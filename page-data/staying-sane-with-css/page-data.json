{"componentChunkName":"component---src-templates-blog-post-js-content-file-path-home-lee-dev-side-projects-blog-content-blog-staying-sane-with-css-index-md","path":"/staying-sane-with-css/","result":{"data":{"site":{"siteMetadata":{"title":"Strings and Things","author":"Lee Warrick","siteUrl":"https://leewarrick.com/blog"}},"mdx":{"id":"3622e958-8330-546a-959a-9927cd86fd2a","excerpt":"In my time as a front-end developer, I’ve seen and heard a lot of gripes about CSS. I often see people reach for a CSS framework like Bootstrap, Materialize, Bulma, Tailwind, etc.…","frontmatter":{"title":"Staying Sane while Organizing CSS","date":"September 01, 2019"},"body":"\n![Mug with 'CSS is Awesome' written on it, but 'Awesome' overflows the border of the text](./mugcss.jpg)\n\nIn my time as a front-end developer, I've seen and heard a lot of gripes about CSS.\n\nI often see people reach for a CSS framework like Bootstrap, Materialize, Bulma, Tailwind, etc. to avoid writing CSS. While CSS frameworks can be great accelerators, they often require solid CSS skills to wield them effectively. That is to say, if you're not very good at CSS, you're probably not going to be that great using a CSS framework either.\n\nFramework or not, when hitting a snag people tend to throw more and more lines of CSS at the problem until they get a working solution. In essence, they're following the \"can't tie a knot? Tie a lot!\" method of development.\n\nUnfortunately a massive, improper knot is unreliable and weakens the rope.\n\nSo don't be the \"see what sticks\" developer. I'm going to show you how you can add a little organization to your stylesheets that will get you up and running quickly without pulling your hair out.\n\n## Preparing for Success: Reset vs Normalize\n\nHTML elements come with their own default styling. Unfortunately, much of it is flat-out ugly (Looking at you, form input elements).\n\nTo make things worse, browsers _still_ have not reached 100% parity on that default styling. This means certain elements appear differently on different browsers.\n\nYou may even end up overriding that default styling over and over again in your stylesheet to achieve the look or positioning you want. Don't fall into this trap. Address the default styles once.\n\nThat said, there are two powerful, pre-built solutions for taming default styles: Reset and Normalize.\n\n**Note**: Don't forget to add these **before** all other styles--remember the cascade!\n\n### CSS Reset\n\n[CSS Reset](https://cssreset.com/scripts/eric-meyer-reset-css/) is essentially the nuclear option. It wipes out all the styles from all of the elements, more or less making them differ in name only. `<h1>`'s look like `<p>` tags, for example.\n\nThis is a valid solution if you need to start from scratch, but you typically don't need to obliterate the default styles completely. If you do, you're going to have to go back in and make that `<h1>` large and bold again with _more_ CSS.\n\n### Normalize CSS\n\n[Normalize CSS](https://necolas.github.io/normalize.css/) is the more elegant solution than a reset. Its goal is to even out the kinks between browsers and address the most common issues with default styles, while leaving the rest intact.\n\nMost CSS frameworks have a normalize built into them already, so you won't need to add this in if you're using Bootstrap, Materialize, etc.\n\n### The Quick and Easy Option\n\nThere's a third option here worth mentioning. If you're trying to get things done quickly and not using a framework, you can eliminate most of the funk with something like this:\n\n```css\n* {\n    margin: 0;\n    padding: 0;\n    /* box-sizing: border-box */\n    /* border: 1px solid black */\n}\n```\n\nThis ends up stripping out all the micro-adjustments you typically have to come in and do later if you roll with the default padding and margin on elements. (The `*` is a wildcard selector that selects all elements)\n\nYou can optionally toss in the `box-sizing` bit to make sure that your widths/heights are not additive. This means if you say an element is `500px`, it will be exactly that regardless of padding, margin, or border that you add in later. I don't typically find myself reaching for this, but it can help when you're doing pixel-perfect layouts.\n\n**Note**: The last bit is a little 🔥 **hot tip** 🔥 for debugging CSS layouts. If you're wondering how big or what shape an element is, adding a border can quickly show you how something is being rendered. This adds a border to all elements, showing you how everything is laid out on the page.\n\n## Writing Good Markup and 'Going with the Flow'\n\n[CSS Zen Garden](http://www.csszengarden.com/) showed us the awesome power of CSS to style HTML regardless of how it is written.\n\n_What's that quote about power and responsibility...?_ 🤔🕷\n\nHTML has a certain [flow](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow) to it. It's read and rendered top-to-bottom, certain elements are `block` or `inline`, etc. The greater your knowledge of this default behavior, the better you can use it to your advantage, and the less CSS you'll have to write to change it.\n\nYes, CSS can do amazing things to change the default behavior of markup. However, if you write your HTML with your end goal in mind, you'll end up weaponizing CSS less often to make your markup behave appropriately.\n\n\n## Mastering Layouts with Flexbox and Utility Classes\n\nLayouts and positioning of elements is probably the biggest source of strife when learning CSS. You want an element to be in a particular spot, so you write ten lines of CSS that _almost_ positions it perfectly. Then you write ten more lines of CSS, but now it's vertically off-center, etc.\n\nThere's a few tools and tricks that can dramatically reduce the amount of time you spend attempting to place elements where you want them to go.\n\n### Floats\n\nBefore we talk about flexbox, let's talk briefly about floats. If you're using floats for layouts, _please stop_. Flexbox is [highly compatible](https://caniuse.com/#feat=flexbox) with older browsers, and it's way easier to use.\n\nFloats are great for wrapping text around an element, but are awful for layouts. They break the flow of HTML and require a [clearfix](https://www.w3schools.com/howto/howto_css_clearfix.asp) hack to restore that flow for the rest of the elements that come after.\n\nHere's a quick example:\n\n```html html-live\n<div id=\"float-example\">\n    <img src=\"https://picsum.photos/200\" id=\"floatImage\"/>\n    <!-- Let's say we want this blob of text to wrap around our example image -->\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ultricies sem id ante ullamcorper, a commodo eros molestie. Phasellus leo justo, malesuada scelerisque ullamcorper et, finibus ut metus. Integer egestas tellus leo, et consectetur tortor bibendum at. Sed non imperdiet risus. Sed at metus mauris. Donec ullamcorper, nunc sit amet ullamcorper mattis, diam sapien viverra nisi, sit amet pretium ligula mi in est. Nulla finibus imperdiet fringilla. Proin fringilla augue et turpis placerat, sit amet commodo enim dictum. Vivamus viverra mollis augue, in fermentum odio placerat eu. Aenean porta tellus quis urna tristique sagittis.\n</div>\n```\n\n```css css-live\n#floatImage {\n    /* 'float' makes the text wrap around the image, try 'right' */\n    float: left;\n    /* the rest of this is to better illustrate the wrapping effect */\n    shape-outside: circle();\n    border-radius: 100px;\n    margin: 5px;\n}\n\n#float-example::after {\n    /* Another gripe about floats is having to use a clearfix! */\n    content: \"\";\n    display: table;\n    clear: both;\n}\n```\nIf you erase some of the lorem text, and remove that clearfix hack, you'll see how floats destroy a page's flow.\n\nFloats are a good tool if you use them correctly. However for layouts, you probably don't want to use a float.\n\n### Flexbox\n\nFlexbox is a powerful and simple tool to use for creating layouts and positioning elements. If you've never heard of it, Wes Bos has a great free series on it called _[What the Flexbox?](https://www.youtube.com/watch?v=Vj7NZ6FiQvo&list=PLu8EoSxDXHP7xj_y6NIAhy0wuCd4uVdid)_. If you're already familiar with flexbox, there's a great [visual cheat sheet](http://flexbox.malven.co/) you can use as well.\n\nConceptually, flexbox is all about creating containers. So you create a flex container with `display: flex` and then every direct child element will be aligned a certain way based on that parent container element.\n\nIt's also a one-dimensional system of laying things out. Each container runs in one direction, either horizontally with `flex-direction: row` (the default) or vertically with `flex-direction: column`. Children within can then be centered/aligned very easily from there.\n\n#### Why not Grid?\n\nYou can absolutely use Grid! CSS Grid is very similar to flexbox, just way more powerful. If Flexbox is a one-dimensional layout system, Grid is two-dimensional. You can pretty much set a CSS grid container to do anything your heart desires. (If you want a great free CSS Grid course... yup, [Wes Bos](https://www.youtube.com/watch?v=T-slCsOrLcc&list=PLu8EoSxDXHP5CIFvt9-ze3IngcdAc2xKG) has you covered there as well.)\n\nWhy use flexbox then? Honestly, I like it because it's incredibly simple and straightforward. It does one thing and does it very well. Plus you can absolutely nest flex containers and compose them into whatever you need.\n\n## Components vs Utility classes\n\nSo when it comes to organization of CSS, there's two camps: components, and utility classes.\n\n### Components\n\nComponents could be thought of like how bootstrap organizes their building blocks. A \"jumbotron\" or \"navbar\", etc. might be represented by one class applied to an element, or possibly with a handful of subclasses used on elements within. The approach here is to use fewer class names in your HTML, scope/name them smartly, and generally style larger chunks of markup with a handful of classes.\n\nA popular convention for naming such classes is [BEM](http://getbem.com/). BEM stands for \"Block, Element, Modifier\", and it's essentially a system of `--` and `__` inside your class names to increase the reusability and composability of your CSS.\n\nHere's a [BEM in 5-minutes](https://www.youtube.com/watch?v=SLjHSVwXYq4) video to get you up to speed.\n\nThe catch is that this reduces resuability of your CSS. You can't very well apply jumbotron styles to a navbar. BEM and smart naming can only take you so far.\n\n### Utility Classes\n\nThe opposite approach to componentized classes is utility classes. These are small classes that typically do one thing only. For example, `mx-auto` would apply `margin-left: auto; margin-right: auto`.\n\nBootstrap and Materialize have a set of utility classes, and Tailwind CSS is made up entirely of utility classes if you'd like more examples.\n\nThe power of utility classes is in rapid development. You almost never have to leave your HTML file when prototyping if you have enough utility classes defined.\n\nThe con here is that your HTML elements can quickly become bloated with CSS classes, and a combination of ten utility classes used to define a component results in a lot of repeated code.\n\n### Finding Balance\n\nIn my experience, a combination of both methods is the sane choice. Having a handful of global utility classes in combination with larger presentational classes for blocks of markup makes the most sense. This has the added benefit of making your markup a little more readable as well, because your component class names like `card` are listed beside your layout class names like `row` or `column`. So `card row` would tell you this card has a row of children elements.\n\nLet's look at some examples. Let's build a standard layout, starting with a header and some navigation links.\n\nThis little bit of CSS is going to let us do a lot of heavy lifting. We're going to start with a global color palette using [CSS variables](https://codeburst.io/css-variables-explained-with-5-examples-84adaffaa5bd), then define our layout classes.\n\n```css css-live\n:root {\n    --ex-black: #1C0F13;\n    --ex-green-dark: #6E7E85;\n    --ex-green-light: #B7CECE;\n    --ex-purple-dark: #BBBAC6;\n    --ex-purple-light: #E2E2E2\n}\n/* These are going to be our main, bread and butter layout classes */\n.row, .column {\n    display: flex;\n    flex-wrap: wrap;\n}\n.column {\n    flex-direction: column;\n}\n.container {\n    max-width: 500px;\n    margin: auto\n}\n/* These additional classes will be used to space/align content */\n.center-x {\n    justify-content: center;\n}\n.center-y {\n    align-items: center\n}\n.split {\n    justify-content: space-between\n}\n```\nNext we'll add some styles for our navigation header with BEM.\n```css css-live\n /* add some styles to prettify */\n.header {\n    background-color: var(--ex-black);\n    padding: 10px 5px;\n}\n.header__logo {\n    color: var(--ex-purple-light);\n    margin: 0;\n}\n.header__link {\n    color: var(--ex-purple-dark);\n    margin: 0 5px;\n}\n```\n\n```html html-live\n<header class=\"header\">\n    <div class=\"container row split center-y\">\n        <h1 class=\"header__logo\">Logo</h1>\n        <div class=\"row\">\n            <p class=\"header__link\">Link</p>\n            <p class=\"header__link\">Link</p>\n            <p class=\"header__link\">Link</p>\n        </div>\n    </div>\n</header>\n```\n\nThat made short work of the header!\n\nLet's go a little further and build out a jumbotron/call to action and a little text thrown in:\n```css css-live\n.jumbotron__container {\n    background-color: var(--ex-green-light);\n}\n.jumbotron {\n    height: 300px;\n    color: var(--ex-black);\n}\n.jumbotron__button {\n    background-color: var(--ex-purple-light);\n    border: 2px solid var(--ex-green-dark);\n    border-radius: 4px;\n    color: var(--ex-green-dark);\n    transition: background-color 200ms, color 200ms\n}\n.jumbotron__button:hover {\n    color: var(--ex-black);\n    background-color: var(--ex-purple-dark);\n    border: 2px solid var(--ex-black);\n}\n.ex-heading {\n    text-align: center;\n    margin: 24px 0;\n    color: var(--ex-green-dark);\n}\n.ex-text {\n    color: var(--ex-black);\n    max-width: 200px;\n}\n```\n```html html-live\n<header class=\"header\">\n    <div class=\"container row split center-y\">\n        <h1 class=\"header__logo\">Logo</h1>\n        <div class=\"row\">\n            <p class=\"header__link\">Link</p>\n            <p class=\"header__link\">Link</p>\n            <p class=\"header__link\">Link</p>\n        </div>\n    </div>\n</header>\n<main>\n    <div class=\"jumbotron__container\">\n        <div class=\"jumbotron column center-x center-y\">\n            <h2>This is a moving message</h2>\n            <p>And this is why you should click the button below</p>\n            <button class=\"jumbotron__button\">Call to Action</button>\n        </div>\n    </div>\n    <h3 class=\"ex-heading\">Read Stuff</h3>\n    <section class=\"container row split\">\n        <p class=\"ex-text\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ultricies sem id ante ullamcorper, a commodo eros molestie. Phasellus leo justo, malesuada scelerisque ullamcorper et, finibus ut metus. Integer egestas tellus leo, et consectetur tortor bibendum at.\n        </p>\n        <p class=\"ex-text\">\n            Sed non imperdiet risus. Sed at metus mauris. Donec ullamcorper, nunc sit amet ullamcorper mattis, diam sapien viverra nisi, sit amet pretium ligula mi in est. Nulla finibus imperdiet fringilla.\n        </p>\n    </section>\n</main>\n```\nCool right?\n\nDoing something like this as a CSS beginner used to take me hours and many more lines of CSS!\n\n**Note**: If you check this layout on mobile, you'll see it is responsive without any additional work. The `flex-wrap` property makes our children elements wrap to a new line if there's not enough space. Flexbox in general works very well with creating responsive layouts.\n\n## Parting Thoughts\n\nHopefully by now you see the power of applying some organizational principles to your CSS. With a little practice, you can get some amazing things done with only a few lines of code.\n\n"}},"pageContext":{"slug":"/staying-sane-with-css/","previous":{"id":"810cd181-3f81-5c76-b5ff-e5780af37023","fields":{"slug":"/the-courage-to-code/"},"frontmatter":{"title":"Finding the Courage to Code"},"body":"\n![Photo of Lonely Winding Road Sign by Fabien Bazanegue](./roadsign.jpg)\n\nOnce I overheard someone describe a kid they met that knew he wanted to be a podiatrist 👣👨‍⚕️ at age 6. This story is not about that person.\n\nMy life has been rife with indecision. In fact, a good friend once described me as the _\"male Barbie of careers\"_. Sure, I eventually found my way to coding, but it was a long, winding road.\n\n## The Early Years\n\nAs a kid, I always thought I would like to do ..._stuff_ with computers. I wasn't quite sure what that stuff was, but I wanted to do it.\n\nWhat I _did_ know, was that programming seemed dense and mystical. Actually I didn't even really know what programming was. I basically thought it was like the movie \"Hackers\".\n\nIn elementary and middle school, my only exposure to computers was through playing Math Blaster, Oregon Trail, and a Super Mario typing game. In high school I took an introductory computer course (basically a Microsoft A+ certification class), and a web design class where we learned a little HTML.\n\nWriting math formula scripts on my graphing calculator was as close as I got to really coding something in grade school. Those miniature programs were silly, but also _exciting_.\n\n## Clueless in College\n\nThe smart kids in my high school seemed to be all applying and getting accepted to college. So I blindly followed suit.\n\nI applied and was accepted to the University of Florida as a chemical engineering student. I stuck with it for about a month before catching wind of what those folks actually do, then changed majors to Computer Science.\n\nI was going for it folks, I was going to pursue my **dream**.\n\nThe first day of my intro to computer science class went like this:\n\nA lanky, disheveled man strode into the auditorium fifteen minutes late. He stood at the podium and addressed the class:\n\n_\"A little news in the life of Pete. I just found out my_ ***former*** _best friend has been sleeping with my ex-wife.\"_\n\nPete then proceeded to teach us binary, hexidecimal, and other very low-level computer science concepts. For homework, we had to solve small, boring puzzles with Java like _Given a number N, print a triangle of #'s to the screen that is N wide and N tall._\n\nI stubbornly worked through those assignments. I coded in notepad.exe and ran my code with the windows command line. I didn't know what an IDE was and I didn't understand how this was going to add up to writing actual software.\n\nIn class, there was one student up front that nodded along with everything the instructor said, answered every question, and giggled at every Java idiosyncracy that arose during the lecture.\n\nI _hated_ that student. I hated him because I wished I ***was*** him. How did he know so much in an intro class? I felt so incredibly lost by comparison.\n\nI spent two semesters suffering through Java. Our final project of the second semester was hangman. I finished it while having absolutely no idea what I was doing.\n\nI thought, _\"If I've spent a year learning to code, and this is how far I've come, how will I ever make anything useful?\"_\n\n## Succombing to Self-doubt\n\n![Photo of a man walking through the desert by Dan Grinwis](./desert.jpg)\n\nI saw myself as hopelessly outmatched. I convinced myself that coding was for child prodigies and geniuses only seen on TV. I did all the mental gymnastics required to convince myself that I was the problem.\n\nI switched majors again and got my degree in Japanese language.（こんにちは皆さん！）But I doubted my language skills too. In my mind, I couldn't possibly be good enough to work as a translator or interpreter.\n\nSo I went back to school to be a firefighter. I reasoned that my father did it for 30 years, had a great retirement plan, and seemed to enjoy the job, so why shouldn't I do the same?\n\nI somehow made it through fire school. Then I became an EMT and a Paramedic. I got hired. Soon I was keeping the roads hot with my lights and sirens blaring, kicking down doors and saving lives!\n\nExcept it wasn't like that at all. Most 911 calls are not emergencies--most are monotonous and mundane. And of the calls I ran, the 10% that _were_ true emergencies still haunt me from time to time.\n\nAnd the pay was awful. I was exposed to a lot of chemicals, disease, and stress for about $14 an hour.\n\nI convinced myself I needed to do better. I went back to school and became a registered nurse, and worked in intensive care and the emergency room.\n\nMy situation had improved: now I was being exposed to a lot of chemicals, disease, and stress for about $25 an hour.\n\n## Changing Course\n\nAt some point I found myself looking back on my life and wondering how I ended up so far from my dreams. As a kid, I wanted to make things. I wanted to code.\n\nSometimes I'd find myself sitting at the nurse's station absent-mindedly clicking through Codecademy or freeCodeCamp tutorials.\n\nThen I discovered coding bootcamps.\n\nThere's a lot of noise out there about bootcamps. You'd be forgiven for thinking that they're the ponzi scheme of our time after doing a little research on the internet.\n\nThe risk didn't matter though. I saw it as an opportunity to escape. I signed up.\n\nGoing to code bootcamp turned out to be a transformative experience for a few reasons:\n\n1. **I was surrounded by career changers.** When we introduced ourselves on the first day I found myself in the company of marketing executives, fast-food workers, database administrators, school teachers, and even computer science undergrads.\n1. **Everyone struggled to get their code to run.** Sure, some were better than others, but absolutely everyone had difficulties in class and doing the homework.\n1. **We built fun things.** Not once did I have to print a triangle with `for` loops. We built personal websites, games, toy apps, and more. I could feel myself making progress. I actually enjoyed learning.\n1. **We were encouraged to find our own answers.** From day one we were told to \"google it.\" It was our mantra. We weren't expected to know everything, but we had to be able to search for the answers.\n\nSo there I was with like-minded, indecisive people that were struggling to learn, having fun building things, and just as clueless as I was. It was so radically different from that college class I had taken fifteen years ago. It was invigorating.\n\n## Getting Hired as a Developer\n\n![Photo of man climbing a mountain in Yosemite by Billy Onjea](./climbing.jpg)\n\nI worked very, very hard in class. I knew that this was my chance to change course. I took it very seriously.\n\nI also knew going in that getting a job was not guaranteed or even likely.\n\nMost employers don't like junior developers, and they like bootcamp grads even less. They view juniors as a liability not worth the money they'll save on a lower salary.\n\nI needed to stand out in a positive way. I needed to convince someone to give me a chance despite my inexperience.\n\nThe bootcamp did not bless me with a great resume nor a great portfolio, and as a brand new developer living an hour outside of town, I had no network.\n\nSo I went to meetups. I got on a developer slack channel in town and asked a boatload of stupid questions. I worked tirelessly on my resume and portfolio, soliciting feedback from anyone willing to give it. And all the while I machine-gunned my resume to every developer job on indeed that I was remotely qualified for.\n\nEventually I saw a job-listing on slack. I messaged the poster, sent my resume and portfolio, and setup an interview.\n\nIn that interview, I was calm and collected. I made them laugh and answered their questions. My past careers had taught me to maintain my composure and stay calm. One of my interviewers even remarked how it would be great to have a nurse on the team.\n\nI got the job. I quit nursing and became a fulltime developer.\n\n## Words of Wisdom\n\nHere's what I wish someone had told me many years ago at the start of this journey:\n\n* **Stop doubting yourself.** With enough patience and effort, you can learn anything.\n\n* **Do the things that make you happy** and make you feel fulfilled. Don't do something because it's \"a good job\" or \"a steady paycheck\".\n\n* **Find comfort in the fact that you're not alone.** We're all making this up as we go along. [Even our mentors struggle to get their code to work](https://twitter.com/getify/status/972495616600293381). Nobody has all the answers.\n\n* **Don't ever forget where you came from.** Remember the things that confused, infuriated, and discouraged you. It will help you remember how far you've come, keep you humble, and remind you to be kind to those following in your footsteps.\n\nLearn from my mistakes, then pay it forward.","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/the-courage-to-code/index.md"}},"next":{"id":"31f2401f-7ef0-58c0-a5b4-a86f672d574d","fields":{"slug":"/react-use-effect-explained/"},"frontmatter":{"title":"React's useEffect and useRef Explained for Mortals"},"body":"\n![Photo of the Acropolis of Athens, Athens, Greece by Cristina Gottardi](./acropolis.jpg)\n\nIf the React docs leave you in the dust, or Dan Abramov's [blog](https://overreacted.io/a-complete-guide-to-useeffect/) makes you feel like you're reading a scroll handed down from Mt Olympus written in ancient Greek, you're not alone.\n\nSometimes the pantheon of React Gods have a hard time translating their wisdom into language the rest of us can understand. It usually goes like this: You hit a snag with React, google your issue, and read a blog or Stack Overflow post with some advice that makes you feel more lost than when you started.\n\nI've certainly fallen victim to this many, many times. Particularly with `useEffect`. Before we dive into this particular hook, let me say that I love writing React with hooks and wouldn't want to go back to classes. That said, `useEffect` is a big pain point.\n\n## What is an \"effect\" anyway?\n\nTo really wrap your head around `useEffect`, let's back up a little bit and talk about programming and JavaScript.\n\nThe effects that `useEffect` is named for are what we affectionately refer to as \"side effects\".\n\nSo what is a side effect? It's a bit of code that reaches out and ...does something else. It's an abstract concept, so let's talk in examples.\n\nHere's a function with NO side effects:\n\n```js\nfunction add(a, b) {\n    return a + b\n}\n```\n\nThe function `add` does nothing except take an input and return an output. It doesn't reach outside itself to mess with anything else!\n\nLet's introduce a side effect.\n\n```js js-live autorun linkId=\"ex1\" no-edit\nconst resultDiv = document.getElementById('add-example')\nfunction add(a, b) {\n    const result = a + b\n    resultDiv.textContent = `The Result is ${result}`\n    return a + b\n}\nadd(3, 4)\n```\n\n```html html-live linkId=\"ex1\" no-edit\n<div id=\"add-example\"></div>\n```\n\nNow our function reaches outside of itself to update the DOM (short for [Document Object Model](https://www.youtube.com/watch?v=H63dVFDuJDM)) and show the result. This additional behavior is a side effect.\n\n## Side Effects in React\n\nSo what about React? It's a library that pretty much only updates the DOM. A view library, if you will. So what would you call a side effect in React?\n\nAnything outside of updating the page. If you're not using React to update state or render HTML, that's a side effect. It's any non-React thing.\n\nThis means anytime you call an API, use `setInterval`/`setTimeout`, add a keyboard listener, or really anytime you mess with the `window` object you're introducing side effects.\n\nHooks are amazing and let you write really readable, reusable code... except when you're dealing with side effects. And that's unfortunate, because when you think about it, most of the fun, interesting stuff we do as web developers revolves around side effects.\n\nLet's take a step back from hooks for a minute and look at how we would handle side effects in class-based components.\n\n### Class-based Components and Side Effects\n\nIn class-based components, we would use lifecycle methods to perform side effects. For example, on `componentDidMount` we would call APIs to get data for render.\n\n_\"Why not call the API in the constructor function?\"_, you might ask. Well, because React says stuff we use for render goes in \"state\" and we can't mess with state until our component is loaded onto the page. If we try to update state before the component is loaded, we get errors.\n\nHere's a typical class-based component hitting the [PokeAPI](https://pokeapi.co/):\n\n```jsx react-live no-edit\nclass Pokemon extends React.Component {\n    constructor() {\n        super()\n        this.state = null\n    }\n    componentDidMount() {\n        fetch('https://pokeapi.co/api/v2/pokemon/gengar/')\n        .then(res => res.json())\n        .then(res => {\n            this.setState(res)\n        })\n    }\n    render() {\n        const pokemon = this.state\n        const style = {textTransform: 'capitalize'}\n        return (\n            <div>\n            { pokemon\n                ? <>\n                    <img src={pokemon.sprites.front_default}\n                        alt={'Image of ' + pokemon.name}/>\n                    <p style={style}>Name: {pokemon.name}</p>\n                    <p style={style}>\n                        Type: {pokemon.types.map(x => x.type.name).join(', ')}\n                    </p>\n                </>\n                : 'Loading...'\n            }\n            </div>\n        )\n    }\n}\n```\n\nThis works well, except when it doesn't. What happens when we want to hit the API again to grab a different pokemon? What if this component is attached to a certain route in our app and the route changes, but the component doesn't unmount/remount. What if the user goes to a different page and the component unmounts before the API call finishes?\n\nThe answer is to add more lifecycle methods like `componentDidUpdate` and `componentWillUnmount` to perform more API calls and prevent weird unmounting errors. So we add those lifecycle methods in to handle all our edge cases. And by the time we're done, we realize most of our component consists of lifecycle code.\n\n## Then Came React Hooks\n\nThe React team realized that the class API is a little unwieldy and hard to reason about. People were making [lifecycle flowcharts](https://levelup.gitconnected.com/componentdidmakesense-react-lifecycle-explanation-393dcb19e459) trying to understand the inner workings of React ...it was a mess.\n\nSo at ReactConf in October of 2018, after Sophie Alpert outlined just how bad classes are to use, Dan Abramov got on stage and introduced hooks (You can watch the video [here](https://youtu.be/dpw9EHDh2bM?t=643)).\n\nHooks introduced statefulness in functional components, as well as a new way to handle side effects. Hooks made React code more reusable with less code--a huge win!\n\nExcept for one small quirk. Each render, the whole component/function is re-run.\n\nLet's look at an example of a hooks-based component:\n\n```jsx react-live no-edit\nfunction RerenderExample() {\n    const [bool, setBool] = React.useState(false)\n    const randomNum = Math.random()\n    return (\n        <div>\n            <p>This number will be different each time you click the button:</p>\n            <p>{randomNum}</p>\n            <button onClick={() => setBool(!bool)}>Trigger a render</button>\n        </div>\n    )\n}\n```\nWe're not even using `bool` in our rendered JSX, yet the whole function runs everytime the state changes. **Every render, everything inside the component re-runs: function definitions, variable creation/assignment, etc.**\n\nIf you're thinking _\"what if I have to do something computationally expensive inside a component? This can't be performant...\"_, that's an astute observation. An expensive operation in a functional component _wouldn't_ be performant. In fact `useCallback` and `useMemo` exist as escape hatches for this very problem. Kent C Dodds has a challenging read on those [here](https://kentcdodds.com/blog/usememo-and-usecallback), but to summarize, according to Kent you shouldn't worry about the re-renders until you see performance impacts.\n\n(**Note**: If you're unfamiliar with hooks, bookmark that article and come back to it when you're ready. Don't worry about memoization until you have to.)\n\nHooks like `useState` employ some magic under-the-hood to avoid the re-render problem. That's great, and it seems simple enough using `useState`, but what about when you need to do things outside of setting state?\n\nEnter `useEffect`. Gone are those pesky lifecycle methods, hooray! However this hook comes with its own weirdness. First let's check out the syntax:\n\n```jsx\n//accepts two arguments: a function, and dependency array\nuseEffect(() => {\n    // do stuff\n    return () => {} //function to undo our stuff from above when component unmounts\n}, []) //dependency array of things to watch for changes on\n```\n\nSo you pass `useEffect` a callback function to run that contains your side effects, and then an array of things to watch. If the watched things change, `useEffect` will re-run our callback function. If you need to clean up your side effect on unmount, return a function that contains that code.\n\nLet's look at our pokemon example with hooks and `useEffect`:\n\n```jsx react-live no-edit\nfunction Pokemon() {\n    const [pokemon, setPokemon] = React.useState(null)\n    React.useEffect(() => {\n        fetch('https://pokeapi.co/api/v2/pokemon/gengar/')\n        .then(res => res.json())\n        .then(res => {\n            setPokemon(res)\n        })\n    }, []) // empty array means nothing to watch, so run once and no more\n    const style = {textTransform: 'capitalize'}\n    return (\n        <div>\n        { pokemon\n            ? <>\n                <img src={pokemon.sprites.front_default}\n                    alt={'Image of ' + pokemon.name}/>\n                <p style={style}>Name: {pokemon.name}</p>\n                <p style={style}>\n                    Type: {pokemon.types.map(x => x.type.name).join(', ')}\n                </p>\n            </>\n            : 'Loading...'\n        }\n        </div>\n    )\n}\n```\n\nIf you're staring at that empty dependency array, you've noticed the first `useEffect` quirk. By passing an empty array, we're saying \"only ever do this once\". The React pantheon tells us that on rare occasions that's ok, but most of the time you want something in there. The reason is that usually you want to synchronize with _something_ in your code, not just perform the effect once. For example, what if our pokemon component depended on a route parameter or props, anything that said, \"go get a new pokemon\" without mounting/unmounting?\n\nLet's say our component depended on a prop `pokemonToGet` that was an argument telling it which pokemon to get from the API. Let's also add a tiny form for testing purposes:\n```jsx react-live use-render no-edit\nfunction Pokemon({pokemonToGet}) {\n    const [pokemon, setPokemon] = React.useState(null)\n    React.useEffect(() => {\n        fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonToGet}/`)\n        .then(res => res.json())\n        .then(res => {\n            setPokemon(res)\n        })\n    }, [pokemonToGet]) // get a new pokemon with the pokemonToGet prop changes\n    const style = {textTransform: 'capitalize'}\n    return (\n        <div>\n        { pokemon\n            ? <>\n                <img src={pokemon.sprites.front_default}\n                    alt={'Image of ' + pokemon.name}/>\n                <p style={style}>Name: {pokemon.name}</p>\n                <p style={style}>\n                    Type: {pokemon.types.map(x => x.type.name).join(', ')}\n                </p>\n            </>\n            : 'Loading...'\n        }\n        </div>\n    )\n}\nfunction PokemonForm() {\n    const [inputValue, setInputValue] = React.useState(\"rowlet\")\n    const [pokemonToGet, setPokemonToGet] = React.useState(\"gengar\")\n    function getPokemon() {\n        setPokemonToGet(inputValue.trim().toLowerCase())\n        setInputValue(\"\")\n    }\n    return (\n        <div>\n            <input onChange={(e) => setInputValue(e.target.value)}\n                value={inputValue} type=\"text\"/>\n            <button onClick={getPokemon}>\n                Get Pokemon\n            </button>\n            <Pokemon pokemonToGet={pokemonToGet} />\n        </div>\n    )\n}\nrender(<PokemonForm />)\n```\n\nGreat, now our component fetches a new pokemon based on our prop changes. With classes we would've had to play with `componentDidUpdate` and such to achieve a similar effect.\n\nRyan Florence has a great [tweet](https://twitter.com/ryanflorence/status/1125041041063665666?lang=en) to summarize `useEffect`'s usage:\n\n>The question is not \"when does this effect run\" the question is \"with which state does this effect synchronize with\"\n\n> useEffect(fn) // all state\n\n> useEffect(fn, []) // no state\n\n> useEffect(fn, [these, states])\n\nThat \"all state\" case he mentions where you pass in nothing for dependencies is a weird one. I've personally never found a use for it. We know that the whole component runs with each render, so I'm wondering if there's some weird edge case that requires you to use `useEffect(fn)` without any dependency array. In any case, most of the time you're going to be working with this: `useEffect(fn, [these, states])`.\n\n## UseEffect and Previous State: Where things fall apart\n\nThe mental model so far for `useEffect` seems straight-forward enough: synchronize it with certain state changes of your choosing. The problem is when you need to reference that state in an effect, not just know if it changed.\n\n**You don't get access to current state inside of `useEffect`.**\n\nWe didn't see this in our API call example because we're simply overwriting the previous state.\n\nLet's look at a simple example:\n\n```jsx react-live\nfunction Timer() {\n    const [count, setCount] = React.useState(0)\n\n    React.useEffect(() => {\n        const intervalId = setInterval(() => {\n            setCount(count + 1)\n        }, 1000)\n        return () => clearInterval(intervalId)\n    }, [])\n\n    return (\n        <div>The count is: {count}</div>\n    )\n}\n```\n\nSeems like we did all the right things (even cleaning up our side effect on unmount) but our counter isn't incrementing. Is it a `this` issue? Do we not have access to the `window` object that `setInterval` belongs to?\n\nNo and no. If you added a `console.log` into that interval, you'd see it tick every second.\n\nI'll prove it to you:\n\n```jsx react-live\nfunction Timer() {\n    const [count, setCount] = React.useState(0)\n    const [randomNum, setRandomNum] = React.useState(0)\n\n    React.useEffect(() => {\n        const intervalId = setInterval(() => {\n            setCount(count + 1)\n            setRandomNum(Math.random())\n        }, 1000)\n        return () => clearInterval(intervalId)\n    }, [])\n\n    return (\n        <div>\n            <p>The count is: {count}</p>\n            <p>RandomNum is {randomNum}</p>\n        </div>\n    )\n}\n```\nNotice we get a new random number every second. Our interval code is fine.\n\nWe're able to set new state, but are unable to access current state.\n\nThis is a \"**stale closure**\". I won't get into closures, but just know that because of the implementation of React/hooks, the count variable is always going to be 0 in our interval function. It's an old reference.\n\n**Update 9/7/19**: It turns out, there's a solution for simple examples like above, as pointed out by John Tucker (thanks John!). Much like `setState` in class-based components, `useState` can also accept a callback function that receives the previous state as an argument. The [React Docs](https://reactjs.org/docs/hooks-reference.html#functional-updates) also make note of this.\n\nHere's an example of the quick fix:\n\n```jsx react-live\nfunction Timer() {\n    const [count, setCount] = React.useState(0)\n\n    React.useEffect(() => {\n        const intervalId = setInterval(() => {\n            //let's pass a function instead\n            //the argument is the current state\n            setCount(count => count + 1)\n        }, 1000)\n        return () => clearInterval(intervalId)\n    }, [])\n\n    return (\n        <div>The count is: {count}</div>\n    )\n}\n```\n\nThis still doesn't solve all of our problems, though. If you need to access to the latest state inside `useEffect`, but _not_ update it, you would have to start wrapping your `useEffect` code in `setState` callbacks, and then returning the unchanged state at the end. This could quickly become an absolute mess, particularly if you're working with multiple state values.\n\nAnother possible solution could be to work only with `useReducer`, as that receives previous state, but filling your reducer with side effects also seems very messy, and I wouldn't suggest anyone stop using `useState` entirely.\n\nIn any case, I've fallen into the stale closure trap many, many times when writing hooks. I didn't even know it had a name until I read it in [this talk](https://docs.google.com/presentation/d/1PUvpXMBEDS45rd0wHu6tF3j_8wmGC6cOLtOw2hzU-mw/edit#slide=id.p) by Rich Harris, the man behind [Svelte](https://svelte.dev/).\n\nApparently, I'm not the only one tripping over them in hooks, either:\n\n![Photo of Tweet by Kent Dodds asking about hooks pitfalls and a snarky response of \"stale closures\"](./staleclosures.png)\n\nReact even mentions it in their [docs](https://reactjs.org/docs/hooks-faq.html#why-am-i-seeing-stale-props-or-state-inside-my-function):\n\n>\"Any function inside a component, including event handlers and effects, “sees” the props and state from the render it was created in.\"\n\nI read this prior and it made little sense to me before really digging into the issue. I imagine it could be a bit of a black eye for React, so perhaps they don't wish to call it out too loudly.\n\nDan Abramov, however, describes the problem better in his [blog](https://overreacted.io/a-complete-guide-to-useeffect/) and even provides a solution:\n\n>\"Effects always “see” props and state from the render they were defined in. That helps prevent bugs but in some cases can be annoying. For those cases, you can explicitly maintain some value in a mutable ref.\"\n\nThis was helpful, because it provided a solution in the form of `useRef` (Thanks Dan!), but it left me in the dark as to how it would help avoid the issue (mostly because I didn't understand `useRef`).\n\n## What is a \"ref\", and how do you use one?\n\nSo traditionally, refs were meant to let you directly access an html element. For instance, let's say you needed to focus an input field. You have to bail out of React and use regular JavaScript to call `.focus()`. Hooks actually make this fairly simple:\n\n```jsx react-live\nfunction InputField() {\n    const inputRef = React.useRef()\n    return (\n        <div>\n            <input type=\"text\" ref={inputRef} />\n            <button onClick={() => inputRef.current.focus()}>\n                Click to Focus the input\n            </button>\n        </div>\n    )\n}\n```\n\nGreat! Refs are an easy escape hatch to access native DOM APIs when we need to.\n\n...but how does that help us fix our stale closure counter example?\n\n## Using Refs to avoid Stale Closures\n\nThe [React docs](https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables) compare refs to \"instance variables\". I didn't know what that meant (thanks [Wikipedia](https://en.wikipedia.org/wiki/Instance_variable)), so I didn't find that helpful.\n\nI managed to wrap my head around refs by thinking about them this way:\n\n**Refs exist outside of the re-render cycle.**\n\nThink of refs as a variable you're setting to the side. When your component re-runs it happily skips over that ref until you call it somewhere with `.current`.\n\nLet's see the fix for our timer example:\n\n```jsx react-live\nfunction Timer() {\n    const [count, setCount] = React.useState(0)\n    const countRef = React.useRef(0)\n\n    React.useEffect(() => {\n        const intervalId = setInterval(() => {\n            countRef.current = countRef.current + 1\n            setCount(countRef.current)\n        }, 1000)\n        return () => clearInterval(intervalId)\n    }, [])\n\n    return (\n        <div>The count is: {count}</div>\n    )\n}\n```\n\nIf we wanted to stop the timer at say, 10, we could easily do so using the ref:\n\n```jsx react-live\nfunction Timer() {\n    const [count, setCount] = React.useState(0)\n    const countRef = React.useRef(0)\n\n    React.useEffect(() => {\n        const intervalId = setInterval(() => {\n            if (countRef.current === 10)\n                return clearInterval(intervalId)\n            countRef.current = countRef.current + 1\n            setCount(countRef.current)\n        }, 1000)\n        return () => clearInterval(intervalId)\n    }, [])\n\n    return (\n        <div>The count is: {count}</div>\n    )\n}\n```\n\nHere's the alternative using the `setState` callback approach, for sake of comparison:\n\n```jsx react-live\nfunction Timer() {\n    const [count, setCount] = React.useState(0)\n\n    React.useEffect(() => {\n        const intervalId = setInterval(() => {\n            setCount(count => {\n                if (count === 10) {\n                    clearInterval(intervalId)\n                    return count\n                }\n                else return count + 1\n            })\n        }, 1000)\n        return () => clearInterval(intervalId)\n    }, [])\n\n    return (\n        <div>The count is: {count}</div>\n    )\n}\n```\n\nI could see this quickly approaching callback hell, so I would caution against using the callback approach if you're doing something more complex.\n\n\n## State Versus Refs\n\nIs it possible to ditch state entirely and just use refs?\n\nYou might be inclined to think you could use refs instead of state for your component and just sidestep all this weird behavior.\n\nYou can't. **Refs aren't reactive.** When you change a ref, it doesn't cause a re-render. (Remember, they exist outside of the re-render cycle).\n\nThis won't work:\n\n\n```jsx react-live\nfunction Timer() {\n    const count = React.useRef(0)\n\n    React.useEffect(() => {\n        const intervalId = setInterval(() => {\n            count.current = count.current + 1\n            //console.log('Ref example count: ' + count.current)\n        }, 1000)\n        return () => clearInterval(intervalId)\n    }, [])\n\n    return (\n        <div>The count is: {count.current}</div>\n    )\n}\n```\n\nThat component is actually counting upwards internally, but it's not causing the HTML to update. You need `useState` for that. (Go ahead and uncomment the `console.log` if you don't believe me)\n\nHere's an example to demonstrate refs vs state:\n\n```jsx react-live use-render\nfunction Counter() {\n  const [count, setCount] = React.useState(0)\n  const countRef = React.useRef(0)\n\n  return (\n    <div>\n      <p>State Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment State Count\n      </button>\n      <p>Ref Count: {countRef.current}</p>\n      <button onClick={() => countRef.current = countRef.current + 1}>\n        Increment Ref Count\n      </button>\n    </div>\n  )\n}\n\nrender(<Counter/>)\n```\n\nYou won't see the ref count change until you trigger a re-render by setting state.\n\n## Parting Thoughts\n\nI love hooks and functional components in React, but the quirks I've outlined have given me pause. I don't like being required to know so much about the inner-workings of React to use it. I think it presents a roadblock for those learning React, and I hope in the future the React team comes up with some better ways to handle these quirks.\n","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/react-use-effect-explained/index.md"}},"frontmatter":{"title":"Staying Sane while Organizing CSS","date":"2019-09-01T13:00:00-0400"}}},"staticQueryHashes":["2836739900","4250957540"],"slicesMap":{}}