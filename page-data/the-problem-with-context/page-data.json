{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-problem-with-context/","webpackCompilationHash":"d4dc398a381f86ba07bc","result":{"data":{"site":{"siteMetadata":{"title":"Strings and Things","author":"Lee Warrick"}},"mdx":{"id":"f8a5c0bf-9199-5b15-abc1-c1c505cd4750","excerpt":"React's context API is awesome. As someone that looked at Redux as a junior developer and instantly felt defeated, learning about context was a relief. I used it in my appsâ€¦","frontmatter":{"title":"The Problem with React's Context API","date":"November 28, 2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The Problem with React's Context API\",\n  \"date\": \"2019-11-28T12:00:00-0400\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"590px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/blog/static/e32a85ecdd68cc08c7896513261f347b/c35de/gorilla.jpg\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"66.66666666666666%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"A Gorilla looking thoughtful by Rob Schreckhise\",\n    \"title\": \"A Gorilla looking thoughtful by Rob Schreckhise\",\n    \"src\": \"/blog/static/e32a85ecdd68cc08c7896513261f347b/c739e/gorilla.jpg\",\n    \"srcSet\": [\"/blog/static/e32a85ecdd68cc08c7896513261f347b/8ee9c/gorilla.jpg 148w\", \"/blog/static/e32a85ecdd68cc08c7896513261f347b/ebbe7/gorilla.jpg 295w\", \"/blog/static/e32a85ecdd68cc08c7896513261f347b/c739e/gorilla.jpg 590w\", \"/blog/static/e32a85ecdd68cc08c7896513261f347b/5413e/gorilla.jpg 885w\", \"/blog/static/e32a85ecdd68cc08c7896513261f347b/4efde/gorilla.jpg 1180w\", \"/blog/static/e32a85ecdd68cc08c7896513261f347b/c35de/gorilla.jpg 1200w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"React\\u2019s context API is awesome. As someone that looked at Redux as a junior developer and instantly felt defeated, learning about context was a relief. I used it in my apps, quickly forgot about Redux, and never looked back.\"), mdx(\"p\", null, \"That is, until I heard about the supposed performance problems with the Context API. Now, the big names in the React community will tell you not to worry about performance unless you start seeing issues. And yet, I keep hearing about context problems from other developers. One fellow even mentioned his boss banning the use of Context on their project.\"), mdx(\"p\", null, \"Let\\u2019s review the Context API in case you\\u2019re unfamiliar before we talk about its problems.\"), mdx(\"h2\", null, \"Why use the context API?\"), mdx(\"p\", null, \"The Context API is useful for sharing state between components that you can\\u2019t easily share with props. Here\\u2019s an example of a button component that needs to set the state of a distant ancestor:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live use-render\",\n    \"react-live\": true,\n    \"use-render\": true\n  }), \"const { useState } = React\\n\\nfunction CountDisplay({ count }) {\\n  return <h2>The Count is: {count}</h2>\\n}\\n\\nfunction CountButton({ setCount }) {\\n  return (\\n    <button onClick={() => setCount(count => count + 1)}>\\n      Increment\\n    </button>\\n  )\\n}\\n\\nconst OuterWrapper = ({setCount}) => <InnerWrapper setCount={setCount}/>\\nconst InnerWrapper = ({setCount}) => <CountButton setCount={setCount}/>\\n\\nfunction App() {\\n  const [count, setCount] = useState(0)\\n  return (\\n    <div>\\n      <CountDisplay count={count} />\\n      <OuterWrapper setCount={setCount}/>\\n    </div>\\n  )\\n}\\n\\nrender(App)\\n\")), mdx(\"p\", null, \"The button component is within a few other components further down the tree, but still needs to access state from higher up in the app. So we have to pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setCount\"), \" down to each component to finally get it to our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CountButton\"), \" component. This is affectionately known as \\u201Cprop-drilling\\u201D, and used to be a huge pain point in React.\"), mdx(\"p\", null, \"The Context API makes short work of situations like this, thankfully.\"), mdx(\"h2\", null, \"How to use the Context API\"), mdx(\"p\", null, \"Kent C. Dodds has a fantastic \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kentcdodds.com/blog/application-state-management-with-react\"\n  }), \"blog post\"), \" that I refer to whenever I implement the Context API. If you don\\u2019t have time to read that, here\\u2019s the short version: Context is a way to share state between unrelated or distant components. All you have to do is wrap your components in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Context.Provider\"), \" and then call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContext(Context)\"), \" inside that component to access your state and helper functions.\"), mdx(\"p\", null, \"Here\\u2019s our counter example with context:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live use-render\",\n    \"react-live\": true,\n    \"use-render\": true\n  }), \"const {useContext, useState, createContext} = React\\n\\nconst AppContext = createContext()\\n\\nfunction AppProvider(props) {\\n  const [count, setCount] = useState(0)\\n  const value = { count, setCount }\\n  return (\\n    <AppContext.Provider value={value}>\\n      {props.children}\\n    </AppContext.Provider>\\n  )\\n}\\n\\nfunction CountDisplay() {\\n  const { count } = useContext(AppContext)\\n  return <h2>The Count is: {count}</h2>\\n}\\n\\nfunction CountButton() {\\n  const { setCount } = useContext(AppContext)\\n  return (\\n    <button onClick={() => setCount(count => count + 1)}>\\n      Increment\\n    </button>\\n  )\\n}\\n\\nconst OuterWrapper = () => <InnerWrapper />\\n\\nconst InnerWrapper = () => <CountButton />\\n\\nfunction App() {\\n  return (\\n    <div>\\n      <AppProvider>\\n        <CountDisplay/>\\n        <OuterWrapper/>\\n      </AppProvider>\\n    </div>\\n  )\\n}\\n\\nrender(App)\\n\")), mdx(\"p\", null, \"Here we have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CountDisplay\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CountButton\"), \" components that both need to interact with the higher-level \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" state in our context. We start by making a context with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createContext\"), \", then a provider component in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AppProvider\"), \" to wrap our dependent components, and finally call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContext\"), \" in each component to pull out the values we need. It doesn\\u2019t matter how far apart the components are as long as they\\u2019re wrapped in a provider.\"), mdx(\"p\", null, \"Pretty great right?\"), mdx(\"h2\", null, \"Kent C. Dodd\\u2019s Optimizations \\uD83D\\uDCC8\"), mdx(\"p\", null, \"We can improve on this a little bit by implementing some stuff that Kent has in his article on state management. Let\\u2019s take a look:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live use-render\",\n    \"react-live\": true,\n    \"use-render\": true\n  }), \"const {useContext, useState, createContext, useMemo} = React\\nconst AppContext = createContext()\\n\\n// instead of calling useContext directly in our components,\\n// we make our own hook that throws an error if we try to\\n// access context outside of the provider\\nfunction useAppContext() {\\n  const context = useContext(AppContext)\\n  if (!context)\\n    throw new Error('AppContext must be used with AppProvider!')\\n  return context\\n}\\n\\nfunction AppProvider(props) {\\n  const [count, setCount] = useState(0)\\n  // here we use useMemo for... reasons.\\n  // this says don't give back a new count/setCount unless count changes\\n  const value = useMemo(() => ({ count, setCount }), [count])\\n  return <AppContext.Provider value={value} {...props} />\\n}\\n\\nfunction CountDisplay() {\\n  const { count } = useAppContext()\\n  return <h2>The Count is: {count}</h2>\\n}\\n\\nfunction CountButton() {\\n  const { setCount } = useAppContext()\\n  return (\\n    <button onClick={() => setCount(count => count + 1)}>\\n      Increment\\n    </button>\\n  )\\n}\\n\\nconst OuterWrapper = () => <InnerWrapper />\\n\\nconst InnerWrapper = () => <CountButton />\\n\\nfunction App() {\\n  return (\\n    <div>\\n      <AppProvider>\\n        <CountDisplay />\\n        <OuterWrapper />\\n      </AppProvider>\\n    </div>\\n  )\\n}\\n\\nrender(App)\\n\")), mdx(\"p\", null, \"The first thing we do is throw an error if we try to access the context outside of our provider. This is a great idea to improve the developer experience of your app (aka: make the console scream at you when you forget how context works).\"), mdx(\"p\", null, \"The second thing is to memoize our context value to only re-render if the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" changes. Now, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \" is a difficult thing to wrap your head around, but the basic gist is that when you memoize something, you\\u2019re saying that you won\\u2019t return that value again unless your specified value changes. Kent has a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kentcdodds.com/blog/usememo-and-usecallback\"\n  }), \"great article\"), \" on that too if you want to read more.\"), mdx(\"p\", null, \"I can\\u2019t discern a difference between using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \" and not using it, but I would venture that if you\\u2019re doing some heavy lifting in your Context Provider, it might be beneficial to apply memoization. If you read Kent\\u2019s article on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useCallback\"), \" he cautions against using them unless you start to see performance hits. (Full Disclosure: I\\u2019ve never needed to use either one.)\"), mdx(\"p\", null, \"Kent also spreads his \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \" on the provider instead of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props.children\"), \", which is a neat trick, so I included that as well.\"), mdx(\"h2\", null, \"The Context API\\u2019s Dirty Little Secret \\uD83E\\uDD2B\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"590px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/c35de/trashman.jpg\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"100%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Man making the shush gesture with his finger over his lip, laying on a mound of trash. Photo by Jordan Beltran\",\n    \"title\": \"Man making the shush gesture with his finger over his lip, laying on a mound of trash. Photo by Jordan Beltran\",\n    \"src\": \"/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/c739e/trashman.jpg\",\n    \"srcSet\": [\"/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/8ee9c/trashman.jpg 148w\", \"/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/ebbe7/trashman.jpg 295w\", \"/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/c739e/trashman.jpg 590w\", \"/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/5413e/trashman.jpg 885w\", \"/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/4efde/trashman.jpg 1180w\", \"/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/c35de/trashman.jpg 1200w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"Boy, the Context API sure is great. It\\u2019s super easy to use compared to Redux and requires a lot less code, so why \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"wouldn\\u2019t\"), \" you use it?\"), mdx(\"p\", null, \"The problem with context is simple: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Everything that consumes a context re-renders everytime that context\\u2019s state changes.\")), mdx(\"p\", null, \"That means that if you\\u2019re consuming your context all over the place in your app, or worse, using one context for your entire app\\u2019s state, you\\u2019re causing a ton of re-renders all over the place!\"), mdx(\"p\", null, \"Let\\u2019s visualize this with a simple app. Let\\u2019s make a context with a counter and a message. The message will never change, but be consumed by three components that display the message in a random color on each render. The count will be consumed by one component, and be the only value that changes.\"), mdx(\"p\", null, \"That sounds like a middle school math problem, but if you look at this code and the resulting app, the problem becomes blatantly obvious:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live use-render\",\n    \"react-live\": true,\n    \"use-render\": true\n  }), \"const {useContext, useState, createContext} = React\\nconst AppContext = createContext()\\n\\nfunction useAppContext() {\\n  const context = useContext(AppContext)\\n  if (!context)\\n    throw new Error('useAppContext must be used within AppProvider!')\\n  return context\\n}\\n\\nfunction AppProvider(props) {\\n  // the count for our counter component\\n  const [count, setCount] = useState(0)\\n  // this message never changes!\\n  const [message, setMessage] = useState('Hello from Context!')\\n  const value = {\\n    count,\\n    setCount,\\n    message,\\n    setMessage\\n  }\\n  return <AppContext.Provider value={value} {...props}/>\\n}\\n\\nfunction Message() {\\n  const { message } = useAppContext()\\n  // the text will render to a random color for\\n  // each instance of the Message component\\n  const getColor = () => (Math.floor(Math.random() * 255))\\n  const style = {\\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\\n  }\\n  return (\\n    <div>\\n      <h4 style={style}>{message}</h4>\\n    </div>\\n  )\\n}\\n\\nfunction Count() {\\n  const {count, setCount} = useAppContext()\\n  return (\\n    <div>\\n      <h3>Current count from context: {count}</h3>\\n      <button onClick={() => setCount(count + 1)}>Increment</button>\\n    </div>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <div>\\n      <AppProvider>\\n        <h2>Re-renders! \\uD83D\\uDE29</h2>\\n        <Message />\\n        <Message />\\n        <Message />\\n        <Count />\\n      </AppProvider>\\n    </div>\\n  )\\n}\\nrender(App)\\n\")), mdx(\"p\", null, \"Everything re-renders when we click increment \\uD83D\\uDE31.\"), mdx(\"p\", null, \"The message components don\\u2019t even use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" from our context, but they re-render anyway. Yikes!\"), mdx(\"h3\", null, \"What about memoization?\"), mdx(\"p\", null, \"Maybe we just forgot to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \" like Kent did in his example. Let\\u2019s memoize our context and see what happens:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live use-render\",\n    \"react-live\": true,\n    \"use-render\": true\n  }), \"const {useContext, useState, createContext, useMemo} = React\\nconst AppContext = createContext()\\n\\nfunction useAppContext() {\\n  const context = useContext(AppContext)\\n  if (!context) throw new Error('useAppContext must be used within AppProvider!')\\n  return context\\n}\\n\\nfunction AppProvider(props) {\\n  const [count, setCount] = useState(0)\\n  const [message, setMessage] = useState('Hello from Context!')\\n  // here we pass our value to useMemo,\\n  // and tell useMemo to only give us new values\\n  // when count or message change\\n  const value = useMemo(() => ({\\n    count,\\n    setCount,\\n    message,\\n    setMessage\\n  }), [count, message])\\n  return <AppContext.Provider value={value} {...props}/>\\n}\\n\\nfunction Message() {\\n  const { message } = useAppContext()\\n  const getColor = () => (Math.floor(Math.random() * 255))\\n  const style = {\\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\\n  }\\n  return (\\n    <div>\\n      <h4 style={style}>{message}</h4>\\n    </div>\\n  )\\n}\\n\\nfunction Count() {\\n  const {count, setCount} = useAppContext()\\n  return (\\n    <div>\\n      <h3>Current count from context: {count}</h3>\\n      <button onClick={() => setCount(count + 1)}>Increment</button>\\n    </div>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <div>\\n      <AppProvider>\\n        <h2>Re-renders! \\uD83D\\uDE29</h2>\\n        <Message />\\n        <Message />\\n        <Message />\\n        <Count />\\n      </AppProvider>\\n    </div>\\n  )\\n}\\nrender(App)\\n\")), mdx(\"p\", null, \"Nope! Memoization with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \" doesn\\u2019t help at all!\"), mdx(\"h3\", null, \"What about components that don\\u2019t consume Context, do they re-render?\"), mdx(\"p\", null, \"That\\u2019s an excellent question, let\\u2019s test it with a Message component that doesn\\u2019t consume context:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live use-render\",\n    \"react-live\": true,\n    \"use-render\": true\n  }), \"const {useContext, useState, createContext, useMemo} = React\\nconst AppContext = createContext()\\n\\nfunction useAppContext() {\\n  const context = useContext(AppContext)\\n  if (!context) throw new Error('useAppContext must be used within AppProvider!')\\n  return context\\n}\\n\\nfunction AppProvider(props) {\\n  const [count, setCount] = useState(0)\\n  const [message, setMessage] = useState('Hello from Context!')\\n  const value = useMemo(() => ({\\n    count,\\n    setCount,\\n    message,\\n    setMessage\\n  }), [count, message])\\n  return <AppContext.Provider value={value} {...props}/>\\n}\\n\\n// this component does NOT consume the context\\n// but is still within the Provider component\\nfunction IndependentMessage() {\\n  const getColor = () => (Math.floor(Math.random() * 255))\\n  const style = {\\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\\n  }\\n  return (\\n    <div>\\n      <h4 style={style}>I'm my own Independent Message!</h4>\\n    </div>\\n  )\\n}\\n\\nfunction Message() {\\n  const { message } = useAppContext()\\n  const getColor = () => (Math.floor(Math.random() * 255))\\n  const style = {\\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\\n  }\\n  return (\\n    <div>\\n      <h4 style={style}>{message}</h4>\\n    </div>\\n  )\\n}\\n\\nfunction Count() {\\n  const {count, setCount} = useAppContext()\\n  return (\\n    <div>\\n      <h3>Current count from context: {count}</h3>\\n      <button onClick={() => setCount(count + 1)}>Increment</button>\\n    </div>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <div>\\n      <AppProvider>\\n        <h2>Re-renders! \\uD83D\\uDE29</h2>\\n        <Message />\\n        <Message />\\n        <Message />\\n        <IndependentMessage />\\n        <Count />\\n      </AppProvider>\\n    </div>\\n  )\\n}\\nrender(App)\\n\")), mdx(\"p\", null, \"Well, this is the only good news so far. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Only components that call \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"useContext\"), \" re-render whenever the context\\u2019s state changes.\")), mdx(\"p\", null, \"Still, this is bad news for our app. We don\\u2019t want to trigger a bunch of unnecessary re-renders everywhere we use a context.\"), mdx(\"p\", null, \"Imagine if those message components were doing a lot of work like calculating animations, or if we had a huge React app with lots of components dependent on our context. That could lead to pretty serious performance issues, right?\"), mdx(\"h2\", null, \"Should we stop using Context?\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"590px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/blog/static/8c27d995b617560da5b04f46a8069006/c35de/trash.jpg\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"75%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Sign showing man throwing away trash, photo by Gary Chan\",\n    \"title\": \"Sign showing man throwing away trash, photo by Gary Chan\",\n    \"src\": \"/blog/static/8c27d995b617560da5b04f46a8069006/c739e/trash.jpg\",\n    \"srcSet\": [\"/blog/static/8c27d995b617560da5b04f46a8069006/8ee9c/trash.jpg 148w\", \"/blog/static/8c27d995b617560da5b04f46a8069006/ebbe7/trash.jpg 295w\", \"/blog/static/8c27d995b617560da5b04f46a8069006/c739e/trash.jpg 590w\", \"/blog/static/8c27d995b617560da5b04f46a8069006/5413e/trash.jpg 885w\", \"/blog/static/8c27d995b617560da5b04f46a8069006/4efde/trash.jpg 1180w\", \"/blog/static/8c27d995b617560da5b04f46a8069006/c35de/trash.jpg 1200w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"I\\u2019ll go ahead and say this now: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"no, this isn\\u2019t a reason to stop using context\"), \". There\\u2019s a ton of apps out there using context and chugging along just fine, including a bunch of my own apps.\"), mdx(\"p\", null, \"Still, performance is kind of a big deal. I don\\u2019t want to leave you sitting up at night worrying about the Context API\\u2019s dirty little secret. So let\\u2019s talk about some ways to deal with this re-render business.\"), mdx(\"h3\", null, \"Option 1: Don\\u2019t worry at all. Keep on Context\\u2019n like you do. YOLO \\uD83E\\uDD2A!\"), mdx(\"p\", null, \"I\\u2019ve basically used Context a whole bunch in a lot of various apps without memoization, at the top level of my app, and consumed by a bunch of components without noticing any performance hits at all. Like I said before, a lot of the React folks say you shouldn\\u2019t even worry about performance optimizations until you see performance impacts.\"), mdx(\"p\", null, \"Still, this strategy won\\u2019t work for everyone. You may already have performance issues in your app, or if your app processes a lot of logic or animations, you may see performance issues as your app grows and end up doing some serious refactoring down the road.\"), mdx(\"h3\", null, \"Option 2: Use Redux or Mobx\"), mdx(\"p\", null, \"Redux and Mobx both use the context API, so how do they help? The store that\\u2019s shared by these state management libraries with context is a little different from sharing state directly with context. When you\\u2019re using Redux and Mobx, there\\u2019s a diffing algorithm at work that makes sure to only re-render the components that actually need to re-render.\"), mdx(\"p\", null, \"Still, context was supposed to save us from having to learn Redux and Mobx! There\\u2019s a lot of abtractions and boilerplate involved in using a state management library, making it an unattractive solution to some folks.\"), mdx(\"p\", null, \"Plus, isn\\u2019t keeping all of our state in global state a bad practice?\"), mdx(\"h3\", null, \"Option 3: Use Multiple Contexts, and keep state close to its Dependent Components\"), mdx(\"p\", null, \"This solution takes the most finesse to pull off, but gives you the best performance without reaching for Redux and Mobx. It relies on being smart about your state management choices, and only passing state up to a context if you need to share it between distant components.\"), mdx(\"p\", null, \"There\\u2019s a few key tenants to this strategy:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Let a component manage its own state if it can.\"), \" This is a good practice to follow regardless of your choice of state management. For example, if you have a modal that needs to keep track of an open/closed state, but no other components need to know if that modal is open, keep that open/closed state in the modal. Don\\u2019t push state into context (or Redux) if you don\\u2019t have to!\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"If your state is shared between a parent and a few children, just prop it down.\"), \" This is the old school method of sharing state. Just pass it as props to the children components that need it. Passing props or \\u201CProp-drilling\\u201D can be miserable with deeply nested components, but if you\\u2019re only passing things down a few levels, you should probably just do it.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"If the previous two things fail, use context but keep it close to the components that depend on it.\"), \" This means if you need to share some state, like a form for instance with multiple components, go ahead and make a separate context for just the form and wrap the form components in your provider.\")), mdx(\"p\", null, \"That last one deserves an example. Let\\u2019s apply it to our problem app from before. We can fix those re-renders by separating the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"message\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" into their own contexts.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live use-render\",\n    \"react-live\": true,\n    \"use-render\": true\n  }), \"const { useContext, useState, createContext } = React\\nconst CountContext = createContext()\\n\\n// Now count context only worries about count!\\nfunction useCountContext() {\\n  const context = useContext(CountContext)\\n  if (!context)\\n    throw new Error('useCountContext must be used within CountProvider!')\\n  return context\\n}\\n\\nfunction CountProvider(props) {\\n  const [count, setCount] = useState(0)\\n  const value = { count, setCount }\\n  return <CountContext.Provider value={value} {...props}/>\\n}\\n\\n// And message context only worries about message!\\nconst MessageContext = createContext()\\n\\nfunction useMessageContext() {\\n  const context = useContext(MessageContext)\\n  if (!context)\\n    throw new Error('useMessageContext must be used within MessageProvider!')\\n  return context\\n}\\n\\nfunction MessageProvider(props) {\\n  const [message, setMessage] = useState('Hello from Context!')\\n  const value = { message, setMessage }\\n  return <MessageContext.Provider value={value} {...props}/>\\n}\\n\\nfunction Message() {\\n  const { message } = useMessageContext()\\n  const getColor = () => (Math.floor(Math.random() * 255))\\n  const style = {\\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\\n  }\\n  return (\\n    <div>\\n      <h4 style={style}>{message}</h4>\\n    </div>\\n  )\\n}\\n\\nfunction Count() {\\n  const {count, setCount} = useCountContext()\\n  return (\\n    <div>\\n      <h3>Current count from context: {count}</h3>\\n      <button onClick={() => setCount(count + 1)}>Increment</button>\\n    </div>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <div>\\n      <h2>No Unnecessary Re-renders! \\uD83D\\uDE0E</h2>\\n      <MessageProvider>\\n        <Message />\\n        <Message />\\n        <Message />\\n      </MessageProvider>\\n      <CountProvider>\\n        <Count />\\n      </CountProvider>\\n    </div>\\n  )\\n}\\nrender(App)\\n\")), mdx(\"p\", null, \"Now our state is only shared with the components that care about that state. When we increment, the colors of our message components stay the same because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" lives outside of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"messageContext\"), \".\"), mdx(\"h2\", null, \"Final Thoughts\"), mdx(\"p\", null, \"Although this article\\u2019s title is a little incendiary and the \\u201Cproblem\\u201D with context  may not be the boogie man some might envision it to be, I still think this is worth talking about. React\\u2019s flexibility makes it both a great framework for beginners as well as a devastating footgun for those that don\\u2019t know its inner-workings. I don\\u2019t forsee a lot of people tripping over this particular detail, but if you\\u2019re using context and seeing performance issues, it\\u2019s a good thing to know!\"));\n}\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/the-problem-with-context/","previous":{"id":"f778ebec-0f70-534a-a926-de65e8a5cad0","fields":{"slug":"/how-to-debounce/"},"frontmatter":{"title":"What are debounce and throttle functions, and how do you write them in JavaScript and React?"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"What are debounce and throttle functions, and how do you write them in JavaScript and React?\",\n  \"date\": \"2019-10-17T12:00:00-0400\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"590px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/blog/static/91985b102e11e1a9b8ac2de71cb5733e/c35de/typewriter.jpg\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"75%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Photo of Typewriter by Pereanu Sebastian\",\n    \"title\": \"Photo of Typewriter by Pereanu Sebastian\",\n    \"src\": \"/blog/static/91985b102e11e1a9b8ac2de71cb5733e/c739e/typewriter.jpg\",\n    \"srcSet\": [\"/blog/static/91985b102e11e1a9b8ac2de71cb5733e/8ee9c/typewriter.jpg 148w\", \"/blog/static/91985b102e11e1a9b8ac2de71cb5733e/ebbe7/typewriter.jpg 295w\", \"/blog/static/91985b102e11e1a9b8ac2de71cb5733e/c739e/typewriter.jpg 590w\", \"/blog/static/91985b102e11e1a9b8ac2de71cb5733e/5413e/typewriter.jpg 885w\", \"/blog/static/91985b102e11e1a9b8ac2de71cb5733e/4efde/typewriter.jpg 1180w\", \"/blog/static/91985b102e11e1a9b8ac2de71cb5733e/c35de/typewriter.jpg 1200w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"Have you ever heard the story of the QWERTY layout on a keyboard? The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Typewriter#QWERTY\"\n  }), \"popular legend\"), \" is that it was too easy to type if the letters were arranged alphabetically, and this caused mechanical typewriters to jam. The most common letters were too close together, supposedly. So to fix this, the QWERTY layout was invented, to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"slow down the typist\"), \".\"), mdx(\"p\", null, \"This Dilbertian engineering idea is eerily similar to what a debounce function does.\"), mdx(\"h2\", null, \"What is a debounce?\"), mdx(\"p\", null, \"A debounce function is meant to slow down something in your application, typically a function call. The best way to wrap your head around this is by example.\"), mdx(\"p\", null, \"Consider this: you have a search input on your site somewhere, and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"as the user types\"), \", you want to go fetch some search results to try and match what the user is looking for before they finish typing.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Piece of cake!\"), \", you think. With React, you can attach your API call to your input\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" event like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live\",\n    \"react-live\": true\n  }), \"function SearchForm() {\\n  const [inputVal, setInputVal] = React.useState(\\\"\\\")\\n  const [callCount, setCallCount] = React.useState(0)\\n\\n  function handleChange(e) {\\n    setInputVal(e.target.value)\\n    // let's say this was an API call\\n    // to add auto-complete data\\n    setCallCount(callCount + 1)\\n  }\\n\\n  return (\\n    <div>\\n      <h2>Type in this Box \\u2B07\\uFE0F</h2>\\n      <input onChange={handleChange} value={inputVal}/>\\n      <p>Current Data: {inputVal}</p>\\n      <p>Calls Done: {callCount}</p>\\n    </div>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Notice that as you type in the search box, if your API function is attached to your input\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" event, you\\u2019ll make an API call \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"every time the user presses a key\"), \" \\uD83D\\uDE31. If you couple this with the small delay it takes to make an API call, you can imagine the traffic jam that this would cause as you have multiple API calls being made and flooding back in.\"), mdx(\"p\", null, \"This isn\\u2019t what we imagined when we first cooked up this auto-populating search box scheme. What we \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"really\"), \" want to do is to make our API call when the user pauses or stops typing.\"), mdx(\"p\", null, \"This is the purpose of a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"debounce\"), \" function, to limit the amount of calls that can happen in a given amount of time.\"), mdx(\"h2\", null, \"How to debounce a function in JavaScript\"), mdx(\"p\", null, \"So we need to fire fewer API calls, but how do we do it?\"), mdx(\"p\", null, \"Before we jump into React, let\\u2019s give this a shot with regular JavaScript. Let\\u2019s put our fake API call in its own function, then wrap it in our debounce function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"js-live\",\n    \"js-live\": true\n  }), \"let callCount = 0\\n\\n// this is just a promise that resolves after 300ms\\n// and console logs a counter\\nfunction fakeAPICall() {\\n  return new Promise(resolve => {\\n    setTimeout(() => {\\n      callCount++\\n      console.log(\\\"Calls Made:\\\" + callCount)\\n      resolve()\\n    }, 300)\\n  })\\n}\\n\\nfakeAPICall() // 1\\nfakeAPICall() // 2\\nfakeAPICall() // 3\\n\\nfunction debounce(callback) {\\n    // each call to debounce creates a new timeoutId\\n    let timeoutId\\n    return function() {\\n      // this inner function keeps a reference to\\n      // timeoutId from the function outside of it\\n      clearTimeout(timeoutId)\\n      timeoutId = setTimeout(callback, 800)\\n    }\\n}\\n\\n// wraps the fakeAPICall function and returns\\n// a function that calls fakeAPICall\\nconst debouncedFakeApiCall = debounce(fakeAPICall)\\n\\n// all these calls cancel each other\\n// Until the last call finally happens after 800 ms\\ndebouncedFakeApiCall()\\ndebouncedFakeApiCall()\\ndebouncedFakeApiCall()\\ndebouncedFakeApiCall()\\ndebouncedFakeApiCall()\\ndebouncedFakeApiCall()\\ndebouncedFakeApiCall() // 4\\n\")), mdx(\"p\", null, \"Success!\"), mdx(\"p\", null, \"Without a debounce, we get 3 calls, but with a debounce, we only fire an API call \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"on the last function call\"), \".\"), mdx(\"h3\", null, \"How it works\"), mdx(\"p\", null, \"The most basic, critical piece of this debounce function is to delay the actual API call, then as more calls come in, cancel and reset the delay for the API call. We do this with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setTimeout\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearTimeout\"), \" in the JavaScript above.\"), mdx(\"p\", null, \"If you noticed the debounce function taking a function and returning a another function, that is an example of a closure in JavaScript. When we debounce a function, we pass our original function in, and wrap it in another function that delays calls to the original. In this way our debounce function is reusable throughout our program. We could debounce as many different functions as we want, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"because each one has its own \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"timeoutId\"), \" variable\"), \".\"), mdx(\"h2\", null, \"How to write a debounce function in React\"), mdx(\"p\", null, \"React allows us to encapsulate logic in components, so we can skip the fancy JavaScript closures and just use our component to write a debounce function.\"), mdx(\"p\", null, \"Let\\u2019s take a look:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live use-render\",\n    \"react-live\": true,\n    \"use-render\": true\n  }), \"// just an async helper\\nfunction fakeAPICall() {\\n  return new Promise(resolve => {\\n    setTimeout(resolve, 300)\\n  })\\n}\\n\\nfunction SearchForm() {\\n  const [inputVal, setInputVal] = React.useState(\\\"\\\")\\n  const [query, setQuery] = React.useState(\\\"\\\")\\n  const inputRef = React.useRef(\\\"\\\")\\n  const [callCount, setCallCount] = React.useState(0)\\n  const timeoutId = React.useRef()\\n\\n  function handleChange(e) {\\n    setInputVal(e.target.value)\\n    // mimic the value so we can access\\n    // the latest value in our API call\\n    inputRef.current = e.target.value\\n  }\\n\\n  React.useEffect(() => {\\n    // if the user keeps typing, stop the API call!\\n    clearTimeout(timeoutId.current)\\n    // don't make an API call with no data\\n    if (!inputVal.trim()) return\\n    // capture the timeoutId so we can\\n    // stop the call if the user keeps typing\\n    timeoutId.current = setTimeout(() => {\\n      // grab our query, but store it in state so\\n      // I can show it to you below in the example \\uD83D\\uDE04\\n      setQuery(inputRef.current)\\n      fakeAPICall()\\n      // here we pass a callback so we get the current callCount value\\n      // from the useState hook's setter function\\n      // we use a Ref for timeoutId to avoid this same problem\\n      .then(() => setCallCount(callCount => callCount + 1))\\n    }, 800)\\n  }, [inputVal])\\n\\n  return (\\n    <div>\\n      <h2>Type in this Box \\u2B07\\uFE0F</h2>\\n      <input onChange={handleChange} value={inputVal}/>\\n      <p>Current Data: {inputVal}</p>\\n      <p>Query Sent: {query}</p>\\n      <p>Calls Done: {callCount}</p>\\n    </div>\\n  )\\n}\\n\\nrender(SearchForm)\\n\")), mdx(\"p\", null, \"Now as we type, the component won\\u2019t actually make any API calls until the typing stops.\"), mdx(\"p\", null, \"The only difference here is that instead of writing a closure, we\\u2019re using a React Ref for our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timeoutId\"), \". Refs are React\\u2019s version of instance variables, so each SearchForm component that we make should get its own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"timeoutId\"), \". If you want to learn more about Refs and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leewarrick.com/blog/react-use-effect-explained/\"\n  }), \"I wrote another post on that topic\"), \".\"), mdx(\"h2\", null, \"What is a throttle?\"), mdx(\"p\", null, \"This might not be exactly what you imagined when you envisioned this functionality. For example, as you type into Google search, you still get autocomplete suggestions as you type, even if you haven\\u2019t stopped typing.\"), mdx(\"p\", null, \"So while our previous examples will ensure we do the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fewest\"), \" API calls possible, we may want to tweak our solution to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"make an API call every so often as the user types\"), \". This would be a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"throttle\"), \" function.\"), mdx(\"h2\", null, \"How to write a throttle in JavaScript\"), mdx(\"p\", null, \"Let\\u2019s tweak our JavaScript debounce implementation so that we only make our API call every 800ms.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"js-live\",\n    \"js-live\": true\n  }), \"let callCount = 0\\n\\nfunction fakeAPICall() {\\n  return new Promise(resolve => {\\n    setTimeout(() => {\\n      callCount++\\n      console.log(\\\"Calls Made:\\\" + callCount)\\n      resolve()\\n    }, 300)\\n  })\\n}\\n\\nfunction throttle(cb) {\\n    let makingCall\\n    return function() {\\n      // if I'm in progress of making an API call,\\n      // don't trigger another one\\n      if (makingCall) return\\n      // set up API call to fire\\n      makingCall = true\\n      // give the user some time to type by delaying the actual call\\n      setTimeout(() => {\\n        makingCall = false\\n        cb()\\n      }, 1000)\\n    }\\n}\\n\\nconst throttledFakeApiCall = throttle(fakeAPICall)\\n\\n// imagine the user starting and stopping typing\\n// we'll only make a call every 800ms\\nthrottledFakeApiCall() // 1\\nthrottledFakeApiCall()\\nthrottledFakeApiCall()\\nsetTimeout(() => {\\n  throttledFakeApiCall()\\n  throttledFakeApiCall()\\n}, 600)\\nsetTimeout(() => {\\n  throttledFakeApiCall() // 2\\n  throttledFakeApiCall()\\n}, 1200)\\nsetTimeout(() => {\\n  throttledFakeApiCall()\\n  throttledFakeApiCall()\\n}, 1800)\\nsetTimeout(() => {\\n  throttledFakeApiCall() // 3\\n  throttledFakeApiCall()\\n}, 2400)\\n\")), mdx(\"p\", null, \"Now as our throttle function fires, we are limiting our calls to happen every 800ms.\"), mdx(\"h3\", null, \"How it works\"), mdx(\"p\", null, \"This new version uses a simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" value to determine if we should trigger more calls instead of clearing the timeout and cancelling previous calls. Now the first call to the throttled function tees up the call, and the subsequent calls are ignored until the API call is complete.\"), mdx(\"h2\", null, \"How to write a throttle in React\"), mdx(\"p\", null, \"Let\\u2019s apply this same functionality to our previous React example.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"react-live use-render\",\n    \"react-live\": true,\n    \"use-render\": true\n  }), \"// just an async helper\\nfunction fakeAPICall() {\\n  return new Promise(resolve => {\\n    setTimeout(resolve, 300)\\n  })\\n}\\n\\nfunction SearchForm() {\\n  const [inputVal, setInputVal] = React.useState(\\\"\\\")\\n  const [query, setQuery] = React.useState(\\\"\\\")\\n  const inputRef = React.useRef(\\\"\\\")\\n  const [callCount, setCallCount] = React.useState(0)\\n  const makingCall = React.useRef(false)\\n\\n  function handleChange(e) {\\n    setInputVal(e.target.value)\\n    // mimic the value so we can access\\n    // the latest value in our API call\\n    inputRef.current = e.target.value\\n  }\\n\\n  React.useEffect(() => {\\n    // if there's no value or we've already triggered a call\\n    // prevent further calls\\n    if (!inputVal.trim() || makingCall.current) return\\n    makingCall.current = true\\n    setTimeout(() => {\\n      // again, this setQuery is just so I can\\n      // render the query below.\\n      // if this API call were real, we'd probably\\n      // pass the query into the API call function\\n      setQuery(inputRef.current)\\n      fakeAPICall()\\n      .then(() => {\\n        setCallCount(callCount => callCount + 1)\\n        makingCall.current = false\\n      })\\n    }, 1000)\\n  }, [inputVal])\\n\\n  return (\\n    <div>\\n      <h2>Type in this Box \\u2B07\\uFE0F</h2>\\n      <input onChange={handleChange} value={inputVal}/>\\n      <p>Current Data: {inputVal}</p>\\n      <p>Query Sent: {query}</p>\\n      <p>Calls Done: {callCount}</p>\\n    </div>\\n  )\\n}\\n\\nrender(SearchForm)\\n\")), mdx(\"p\", null, \"Success! Now as the user types, every 800ms we make a call for an autocomplete suggestion. This means \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"more API calls, but better user experience\"), \", at least in the case of our search autocomplete example.\"), mdx(\"h2\", null, \"Parting Thoughts\"), mdx(\"p\", null, \"So there you have it: throttling and debounce functions in JS and React.\"), mdx(\"p\", null, \"But would you ever implement this yourself in real life?\"), mdx(\"p\", null, \"Sure! If you just needed simple functionality like this, you could absolutely manage your own debounce logic/helpers in your app. However, there\\u2019s no shame in pulling in Lodash and using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://lodash.com/docs/4.17.15#debounce\"\n  }), \"debounce\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://lodash.com/docs/4.17.15#throttle\"\n  }), \"throttle\"), \" functions that they\\u2019ve implemented.\"), mdx(\"p\", null, \"I find it fun to try and implement my own solutions, and I think it\\u2019s worth the mental gymnastics to give this stuff a shot in your own code every once in a while. But don\\u2019t be fooled, nobody will judge you if you reach for a third-party solution!\"));\n}\nMDXContent.isMDXComponent = true;"},"next":null}}}