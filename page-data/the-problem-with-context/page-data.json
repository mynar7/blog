{"componentChunkName":"component---src-templates-blog-post-js-content-file-path-home-lee-dev-side-projects-blog-content-blog-the-problem-with-context-index-md","path":"/the-problem-with-context/","result":{"data":{"site":{"siteMetadata":{"title":"Strings and Things","author":"Lee Warrick","siteUrl":"https://leewarrick.com/blog"}},"mdx":{"id":"6b14c7b4-5f94-5cb9-9efa-63b0717f40da","excerpt":"React’s context API is awesome. As someone that looked at Redux as a junior developer and instantly felt defeated, learning about context was a relief. I used it in my apps…","frontmatter":{"title":"The Problem with React's Context API","date":"November 28, 2019"},"body":"![A Gorilla looking thoughtful by Rob Schreckhise](gorilla.jpg)\n\nReact's context API is awesome. As someone that looked at Redux as a junior developer and instantly felt defeated, learning about context was a relief. I used it in my apps, quickly forgot about Redux, and never looked back.\n\nThat is, until I heard about the supposed performance problems with the Context API. Now, the big names in the React community will tell you not to worry about performance unless you start seeing issues. And yet, I keep hearing about context problems from other developers. One fellow even mentioned his boss banning the use of Context on their project.\n\nLet's review the Context API in case you're unfamiliar before we talk about its problems.\n\n## Why use the context API?\n\nThe Context API is useful for sharing state between components that you can't easily share with props. Here's an example of a button component that needs to set the state of a distant ancestor:\n\n```jsx react-live use-render\nconst { useState } = React\n\nfunction CountDisplay({ count }) {\n  return <h2>The Count is: {count}</h2>\n}\n\nfunction CountButton({ setCount }) {\n  return (\n    <button onClick={() => setCount(count => count + 1)}>\n      Increment\n    </button>\n  )\n}\n\nconst OuterWrapper = ({setCount}) => <InnerWrapper setCount={setCount}/>\nconst InnerWrapper = ({setCount}) => <CountButton setCount={setCount}/>\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  return (\n    <div>\n      <CountDisplay count={count} />\n      <OuterWrapper setCount={setCount}/>\n    </div>\n  )\n}\n\nrender(App)\n```\n\nThe button component is within a few other components further down the tree, but still needs to access state from higher up in the app. So we have to pass `setCount` down to each component to finally get it to our `CountButton` component. This is affectionately known as \"prop-drilling\", and used to be a huge pain point in React.\n\nThe Context API makes short work of situations like this, thankfully.\n\n## How to use the Context API\n\nKent C. Dodds has a fantastic [blog post](https://kentcdodds.com/blog/application-state-management-with-react) that I refer to whenever I implement the Context API. If you don't have time to read that, here's the short version: Context is a way to share state between unrelated or distant components. All you have to do is wrap your components in a `Context.Provider` and then call `useContext(Context)` inside that component to access your state and helper functions.\n\nHere's our counter example with context:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext} = React\n\nconst AppContext = createContext()\n\nfunction AppProvider(props) {\n  const [count, setCount] = useState(0)\n  const value = { count, setCount }\n  return (\n    <AppContext.Provider value={value}>\n      {props.children}\n    </AppContext.Provider>\n  )\n}\n\nfunction CountDisplay() {\n  const { count } = useContext(AppContext)\n  return <h2>The Count is: {count}</h2>\n}\n\nfunction CountButton() {\n  const { setCount } = useContext(AppContext)\n  return (\n    <button onClick={() => setCount(count => count + 1)}>\n      Increment\n    </button>\n  )\n}\n\nconst OuterWrapper = () => <InnerWrapper />\n\nconst InnerWrapper = () => <CountButton />\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <CountDisplay/>\n        <OuterWrapper/>\n      </AppProvider>\n    </div>\n  )\n}\n\nrender(App)\n```\n\nHere we have `CountDisplay` and `CountButton` components that both need to interact with the higher-level `count` state in our context. We start by making a context with `createContext`, then a provider component in `AppProvider` to wrap our dependent components, and finally call `useContext` in each component to pull out the values we need. It doesn't matter how far apart the components are as long as they're wrapped in a provider.\n\nPretty great right?\n\n## Kent C. Dodd's Optimizations 📈\n\nWe can improve on this a little bit by implementing some stuff that Kent has in his article on state management. Let's take a look:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext, useMemo} = React\nconst AppContext = createContext()\n\n// instead of calling useContext directly in our components,\n// we make our own hook that throws an error if we try to\n// access context outside of the provider\nfunction useAppContext() {\n  const context = useContext(AppContext)\n  if (!context)\n    throw new Error('AppContext must be used with AppProvider!')\n  return context\n}\n\nfunction AppProvider(props) {\n  const [count, setCount] = useState(0)\n  // here we use useMemo for... reasons.\n  // this says don't give back a new count/setCount unless count changes\n  const value = useMemo(() => ({ count, setCount }), [count])\n  return <AppContext.Provider value={value} {...props} />\n}\n\nfunction CountDisplay() {\n  const { count } = useAppContext()\n  return <h2>The Count is: {count}</h2>\n}\n\nfunction CountButton() {\n  const { setCount } = useAppContext()\n  return (\n    <button onClick={() => setCount(count => count + 1)}>\n      Increment\n    </button>\n  )\n}\n\nconst OuterWrapper = () => <InnerWrapper />\n\nconst InnerWrapper = () => <CountButton />\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <CountDisplay />\n        <OuterWrapper />\n      </AppProvider>\n    </div>\n  )\n}\n\nrender(App)\n```\n\nThe first thing we do is throw an error if we try to access the context outside of our provider. This is a great idea to improve the developer experience of your app (aka: make the console scream at you when you forget how context works).\n\nThe second thing is to memoize our context value to only re-render if the `count` changes. Now, `useMemo` is a difficult thing to wrap your head around, but the basic gist is that when you memoize something, you're saying that you won't return that value again unless your specified value changes. Kent has a [great article](https://kentcdodds.com/blog/usememo-and-usecallback) on that too if you want to read more.\n\nI can't discern a difference between using `useMemo` and not using it, but I would venture that if you're doing some heavy lifting in your Context Provider, it might be beneficial to apply memoization. If you read Kent's article on `useMemo` and `useCallback` he cautions against using them unless you start to see performance hits. (Full Disclosure: I've never needed to use either one.)\n\nKent also spreads his `props` on the provider instead of using `props.children`, which is a neat trick, so I included that as well.\n\n## The Context API's Dirty Little Secret 🤫\n\n![Man making the shush gesture with his finger over his lip, laying on a mound of trash. Photo by Jordan Beltran](trashman.jpg)\n\nBoy, the Context API sure is great. It's super easy to use compared to Redux and requires a lot less code, so why _wouldn't_ you use it?\n\nThe problem with context is simple: **Everything that consumes a context re-renders everytime that context's state changes.**\n\nThat means that if you're consuming your context all over the place in your app, or worse, using one context for your entire app's state, you're causing a ton of re-renders all over the place!\n\nLet's visualize this with a simple app. Let's make a context with a counter and a message. The message will never change, but be consumed by three components that display the message in a random color on each render. The count will be consumed by one component, and be the only value that changes.\n\nThat sounds like a middle school math problem, but if you look at this code and the resulting app, the problem becomes blatantly obvious:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext} = React\nconst AppContext = createContext()\n\nfunction useAppContext() {\n  const context = useContext(AppContext)\n  if (!context)\n    throw new Error('useAppContext must be used within AppProvider!')\n  return context\n}\n\nfunction AppProvider(props) {\n  // the count for our counter component\n  const [count, setCount] = useState(0)\n  // this message never changes!\n  const [message, setMessage] = useState('Hello from Context!')\n  const value = {\n    count,\n    setCount,\n    message,\n    setMessage\n  }\n  return <AppContext.Provider value={value} {...props}/>\n}\n\nfunction Message() {\n  const { message } = useAppContext()\n  // the text will render to a random color for\n  // each instance of the Message component\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>{message}</h4>\n    </div>\n  )\n}\n\nfunction Count() {\n  const {count, setCount} = useAppContext()\n  return (\n    <div>\n      <h3>Current count from context: {count}</h3>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <h2>Re-renders! 😩</h2>\n        <Message />\n        <Message />\n        <Message />\n        <Count />\n      </AppProvider>\n    </div>\n  )\n}\nrender(App)\n```\nEverything re-renders when we click increment 😱.\n\nThe message components don't even use the `count` from our context, but they re-render anyway. Yikes!\n\n### What about memoization?\n\nMaybe we just forgot to use `useMemo` like Kent did in his example. Let's memoize our context and see what happens:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext, useMemo} = React\nconst AppContext = createContext()\n\nfunction useAppContext() {\n  const context = useContext(AppContext)\n  if (!context) throw new Error('useAppContext must be used within AppProvider!')\n  return context\n}\n\nfunction AppProvider(props) {\n  const [count, setCount] = useState(0)\n  const [message, setMessage] = useState('Hello from Context!')\n  // here we pass our value to useMemo,\n  // and tell useMemo to only give us new values\n  // when count or message change\n  const value = useMemo(() => ({\n    count,\n    setCount,\n    message,\n    setMessage\n  }), [count, message])\n  return <AppContext.Provider value={value} {...props}/>\n}\n\nfunction Message() {\n  const { message } = useAppContext()\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>{message}</h4>\n    </div>\n  )\n}\n\nfunction Count() {\n  const {count, setCount} = useAppContext()\n  return (\n    <div>\n      <h3>Current count from context: {count}</h3>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <h2>Re-renders! 😩</h2>\n        <Message />\n        <Message />\n        <Message />\n        <Count />\n      </AppProvider>\n    </div>\n  )\n}\nrender(App)\n```\n\nNope! Memoization with `useMemo` doesn't help at all!\n\n### What about components that don't consume Context, do they re-render?\n\nThat's an excellent question, let's test it with a Message component that doesn't consume context:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext, useMemo} = React\nconst AppContext = createContext()\n\nfunction useAppContext() {\n  const context = useContext(AppContext)\n  if (!context) throw new Error('useAppContext must be used within AppProvider!')\n  return context\n}\n\nfunction AppProvider(props) {\n  const [count, setCount] = useState(0)\n  const [message, setMessage] = useState('Hello from Context!')\n  const value = useMemo(() => ({\n    count,\n    setCount,\n    message,\n    setMessage\n  }), [count, message])\n  return <AppContext.Provider value={value} {...props}/>\n}\n\n// this component does NOT consume the context\n// but is still within the Provider component\nfunction IndependentMessage() {\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>I'm my own Independent Message!</h4>\n    </div>\n  )\n}\n\nfunction Message() {\n  const { message } = useAppContext()\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>{message}</h4>\n    </div>\n  )\n}\n\nfunction Count() {\n  const {count, setCount} = useAppContext()\n  return (\n    <div>\n      <h3>Current count from context: {count}</h3>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <h2>Re-renders! 😩</h2>\n        <Message />\n        <Message />\n        <Message />\n        <IndependentMessage />\n        <Count />\n      </AppProvider>\n    </div>\n  )\n}\nrender(App)\n```\n\nWell, this is the only good news so far. **Only components that call `useContext` re-render whenever the context's state changes.**\n\nStill, this is bad news for our app. We don't want to trigger a bunch of unnecessary re-renders everywhere we use a context.\n\nImagine if those message components were doing a lot of work like calculating animations, or if we had a huge React app with lots of components dependent on our context. That could lead to pretty serious performance issues, right?\n\n## Should we stop using Context?\n\n![Sign showing man throwing away trash, photo by Gary Chan](trash.jpg)\n\nI'll go ahead and say this now: **no, this isn't a reason to stop using context**. There's a ton of apps out there using context and chugging along just fine, including a bunch of my own apps.\n\nStill, performance is kind of a big deal. I don't want to leave you sitting up at night worrying about the Context API's dirty little secret. So let's talk about some ways to deal with this re-render business.\n\n### Option 1: Don't worry at all. Keep on Context'n like you do. YOLO 🤪!\n\nI've basically used Context a whole bunch in a lot of various apps without memoization, at the top level of my app, and consumed by a bunch of components without noticing any performance hits at all. Like I said before, a lot of the React folks say you shouldn't even worry about performance optimizations until you see performance impacts.\n\nStill, this strategy won't work for everyone. You may already have performance issues in your app, or if your app processes a lot of logic or animations, you may see performance issues as your app grows and end up doing some serious refactoring down the road.\n\n### Option 2: Use Redux or Mobx\n\nRedux and Mobx both use the context API, so how do they help? The store that's shared by these state management libraries with context is a little different from sharing state directly with context. When you're using Redux and Mobx, there's a diffing algorithm at work that makes sure to only re-render the components that actually need to re-render.\n\nStill, context was supposed to save us from having to learn Redux and Mobx! There's a lot of abstractions and boilerplate involved in using a state management library, making it an unattractive solution to some folks.\n\nPlus, isn't keeping all of our state in global state a bad practice?\n\n### Option 3: Use Multiple Contexts, and keep state close to its Dependent Components\n\nThis solution takes the most finesse to pull off, but gives you the best performance without reaching for Redux and Mobx. It relies on being smart about your state management choices, and only passing state up to a context if you need to share it between distant components.\n\nThere's a few key tenants to this strategy:\n\n1. **Let a component manage its own state if it can.** This is a good practice to follow regardless of your choice of state management. For example, if you have a modal that needs to keep track of an open/closed state, but no other components need to know if that modal is open, keep that open/closed state in the modal. Don't push state into context (or Redux) if you don't have to!\n1. **If your state is shared between a parent and a few children, just prop it down.** This is the old school method of sharing state. Just pass it as props to the children components that need it. Passing props or \"Prop-drilling\" can be miserable with deeply nested components, but if you're only passing things down a few levels, you should probably just do it.\n1. **If the previous two things fail, use context but keep it close to the components that depend on it.** This means if you need to share some state, like a form for instance with multiple components, go ahead and make a separate context for just the form and wrap the form components in your provider.\n\nThat last one deserves an example. Let's apply it to our problem app from before. We can fix those re-renders by separating the `message` and `count` into their own contexts.\n\n```jsx react-live use-render\nconst { useContext, useState, createContext } = React\nconst CountContext = createContext()\n\n// Now count context only worries about count!\nfunction useCountContext() {\n  const context = useContext(CountContext)\n  if (!context)\n    throw new Error('useCountContext must be used within CountProvider!')\n  return context\n}\n\nfunction CountProvider(props) {\n  const [count, setCount] = useState(0)\n  const value = { count, setCount }\n  return <CountContext.Provider value={value} {...props}/>\n}\n\n// And message context only worries about message!\nconst MessageContext = createContext()\n\nfunction useMessageContext() {\n  const context = useContext(MessageContext)\n  if (!context)\n    throw new Error('useMessageContext must be used within MessageProvider!')\n  return context\n}\n\nfunction MessageProvider(props) {\n  const [message, setMessage] = useState('Hello from Context!')\n  const value = { message, setMessage }\n  return <MessageContext.Provider value={value} {...props}/>\n}\n\nfunction Message() {\n  const { message } = useMessageContext()\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>{message}</h4>\n    </div>\n  )\n}\n\nfunction Count() {\n  const {count, setCount} = useCountContext()\n  return (\n    <div>\n      <h3>Current count from context: {count}</h3>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <h2>No Unnecessary Re-renders! 😎</h2>\n      <MessageProvider>\n        <Message />\n        <Message />\n        <Message />\n      </MessageProvider>\n      <CountProvider>\n        <Count />\n      </CountProvider>\n    </div>\n  )\n}\nrender(App)\n```\n\nNow our state is only shared with the components that care about that state. When we increment, the colors of our message components stay the same because `count` lives outside of `messageContext`.\n\n## Final Thoughts\n\nAlthough this article's title is a little incendiary and the \"problem\" with context  may not be the boogie man some might envision it to be, I still think this is worth talking about. React's flexibility makes it both a great framework for beginners as well as a devastating footgun for those that don't know its inner-workings. I don't forsee a lot of people tripping over this particular detail, but if you're using context and seeing performance issues, it's a good thing to know!"}},"pageContext":{"slug":"/the-problem-with-context/","previous":{"id":"b412c488-45ca-51b9-9f6d-77f1de52163e","fields":{"slug":"/how-to-debounce/"},"frontmatter":{"title":"What are debounce and throttle functions, and how do you write them in JavaScript and React?"},"body":"![Photo of Typewriter by Pereanu Sebastian](./typewriter.jpg)\n\nHave you ever heard the story of the QWERTY layout on a keyboard? The [popular legend](https://en.wikipedia.org/wiki/Typewriter#QWERTY) is that it was too easy to type if the letters were arranged alphabetically, and this caused mechanical typewriters to jam. The most common letters were too close together, supposedly. So to fix this, the QWERTY layout was invented, to _slow down the typist_.\n\nThis Dilbertian engineering idea is eerily similar to what a debounce function does.\n\n## What is a debounce?\n\nA debounce function is meant to slow down something in your application, typically a function call. The best way to wrap your head around this is by example.\n\nConsider this: you have a search input on your site somewhere, and _as the user types_, you want to go fetch some search results to try and match what the user is looking for before they finish typing.\n\n_Piece of cake!_, you think. With React, you can attach your API call to your input's `onChange` event like so:\n\n```jsx react-live\nfunction SearchForm() {\n  const [inputVal, setInputVal] = React.useState(\"\")\n  const [callCount, setCallCount] = React.useState(0)\n\n  function handleChange(e) {\n    setInputVal(e.target.value)\n    // let's say this was an API call\n    // to add auto-complete data\n    setCallCount(callCount + 1)\n  }\n\n  return (\n    <div>\n      <h2>Type in this Box ⬇️</h2>\n      <input onChange={handleChange} value={inputVal}/>\n      <p>Current Data: {inputVal}</p>\n      <p>Calls Done: {callCount}</p>\n    </div>\n  )\n}\n```\n\nNotice that as you type in the search box, if your API function is attached to your input's `onChange` event, you'll make an API call _every time the user presses a key_ 😱. If you couple this with the small delay it takes to make an API call, you can imagine the traffic jam that this would cause as you have multiple API calls being made and flooding back in.\n\nThis isn't what we imagined when we first cooked up this auto-populating search box scheme. What we _really_ want to do is to make our API call when the user pauses or stops typing.\n\nThis is the purpose of a **debounce** function, to limit the amount of calls that can happen in a given amount of time.\n\n## How to debounce a function in JavaScript\n\nSo we need to fire fewer API calls, but how do we do it?\n\nBefore we jump into React, let's give this a shot with regular JavaScript. Let's put our fake API call in its own function, then wrap it in our debounce function.\n\n```js js-live\nlet callCount = 0\n\n// this is just a promise that resolves after 300ms\n// and console logs a counter\nfunction fakeAPICall() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      callCount++\n      console.log(\"Calls Made:\" + callCount)\n      resolve()\n    }, 300)\n  })\n}\n\nfakeAPICall() // 1\nfakeAPICall() // 2\nfakeAPICall() // 3\n\nfunction debounce(callback) {\n    // each call to debounce creates a new timeoutId\n    let timeoutId\n    return function() {\n      // this inner function keeps a reference to\n      // timeoutId from the function outside of it\n      clearTimeout(timeoutId)\n      timeoutId = setTimeout(callback, 800)\n    }\n}\n\n// wraps the fakeAPICall function and returns\n// a function that calls fakeAPICall\nconst debouncedFakeApiCall = debounce(fakeAPICall)\n\n// all these calls cancel each other\n// Until the last call finally happens after 800 ms\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall() // 4\n```\n\nSuccess!\n\nWithout a debounce, we get 3 calls, but with a debounce, we only fire an API call **on the last function call**.\n\n### How it works\n\nThe most basic, critical piece of this debounce function is to delay the actual API call, then as more calls come in, cancel and reset the delay for the API call. We do this with `setTimeout` and `clearTimeout` in the JavaScript above.\n\nIf you noticed the debounce function taking a function and returning a another function, that is an example of a closure in JavaScript. When we debounce a function, we pass our original function in, and wrap it in another function that delays calls to the original. In this way our debounce function is reusable throughout our program. We could debounce as many different functions as we want, **because each one has its own `timeoutId` variable**.\n\n## How to write a debounce function in React\n\nReact allows us to encapsulate logic in components, so we can skip the fancy JavaScript closures and just use our component to write a debounce function.\n\nLet's take a look:\n\n```jsx react-live use-render\n// just an async helper\nfunction fakeAPICall() {\n  return new Promise(resolve => {\n    setTimeout(resolve, 300)\n  })\n}\n\nfunction SearchForm() {\n  const [inputVal, setInputVal] = React.useState(\"\")\n  const [query, setQuery] = React.useState(\"\")\n  const inputRef = React.useRef(\"\")\n  const [callCount, setCallCount] = React.useState(0)\n  const timeoutId = React.useRef()\n\n  function handleChange(e) {\n    setInputVal(e.target.value)\n    // mimic the value so we can access\n    // the latest value in our API call\n    inputRef.current = e.target.value\n  }\n\n  React.useEffect(() => {\n    // if the user keeps typing, stop the API call!\n    clearTimeout(timeoutId.current)\n    // don't make an API call with no data\n    if (!inputVal.trim()) return\n    // capture the timeoutId so we can\n    // stop the call if the user keeps typing\n    timeoutId.current = setTimeout(() => {\n      // grab our query, but store it in state so\n      // I can show it to you below in the example 😄\n      setQuery(inputRef.current)\n      fakeAPICall()\n      // here we pass a callback so we get the current callCount value\n      // from the useState hook's setter function\n      // we use a Ref for timeoutId to avoid this same problem\n      .then(() => setCallCount(callCount => callCount + 1))\n    }, 800)\n  }, [inputVal])\n\n  return (\n    <div>\n      <h2>Type in this Box ⬇️</h2>\n      <input onChange={handleChange} value={inputVal}/>\n      <p>Current Data: {inputVal}</p>\n      <p>Query Sent: {query}</p>\n      <p>Calls Done: {callCount}</p>\n    </div>\n  )\n}\n\nrender(SearchForm)\n```\nNow as we type, the component won't actually make any API calls until the typing stops.\n\nThe only difference here is that instead of writing a closure, we're using a React Ref for our `timeoutId`. Refs are React's version of instance variables, so each SearchForm component that we make should get its own `timeoutId`. If you want to learn more about Refs and `useEffect`, [I wrote another post on that topic](https://leewarrick.com/blog/react-use-effect-explained/).\n\n## What is a throttle?\n\nThis might not be exactly what you imagined when you envisioned this functionality. For example, as you type into Google search, you still get autocomplete suggestions as you type, even if you haven't stopped typing.\n\nSo while our previous examples will ensure we do the _fewest_ API calls possible, we may want to tweak our solution to **make an API call every so often as the user types**. This would be a **throttle** function.\n\n## How to write a throttle in JavaScript\n\nLet's tweak our JavaScript debounce implementation so that we only make our API call every 800ms.\n\n```js js-live\nlet callCount = 0\n\nfunction fakeAPICall() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      callCount++\n      console.log(\"Calls Made:\" + callCount)\n      resolve()\n    }, 300)\n  })\n}\n\nfunction throttle(cb) {\n    let makingCall\n    return function() {\n      // if I'm in progress of making an API call,\n      // don't trigger another one\n      if (makingCall) return\n      // set up API call to fire\n      makingCall = true\n      // give the user some time to type by delaying the actual call\n      setTimeout(() => {\n        makingCall = false\n        cb()\n      }, 800)\n    }\n}\n\nconst throttledFakeApiCall = throttle(fakeAPICall)\n\n// imagine the user starting and stopping typing\n// we'll only make a call every 800ms\nthrottledFakeApiCall() // 1\nthrottledFakeApiCall()\nthrottledFakeApiCall()\nsetTimeout(() => {\n  throttledFakeApiCall()\n  throttledFakeApiCall()\n}, 600)\nsetTimeout(() => {\n  throttledFakeApiCall() // 2\n  throttledFakeApiCall()\n}, 1200)\nsetTimeout(() => {\n  throttledFakeApiCall()\n  throttledFakeApiCall()\n}, 1800)\nsetTimeout(() => {\n  throttledFakeApiCall() // 3\n  throttledFakeApiCall()\n}, 2400)\n\n```\n\nNow as our throttle function fires, we are limiting our calls to happen every 800ms.\n\n### How it works\n\nThis new version uses a simple `true`/`false` value to determine if we should trigger more calls instead of clearing the timeout and cancelling previous calls. Now the first call to the throttled function tees up the call, and the subsequent calls are ignored until the API call is complete.\n\n## How to write a throttle in React\n\nLet's apply this same functionality to our previous React example.\n\n```jsx react-live use-render\n// just an async helper\nfunction fakeAPICall() {\n  return new Promise(resolve => {\n    setTimeout(resolve, 300)\n  })\n}\n\nfunction SearchForm() {\n  const [inputVal, setInputVal] = React.useState(\"\")\n  const [query, setQuery] = React.useState(\"\")\n  const inputRef = React.useRef(\"\")\n  const [callCount, setCallCount] = React.useState(0)\n  const makingCall = React.useRef(false)\n\n  function handleChange(e) {\n    setInputVal(e.target.value)\n    // mimic the value so we can access\n    // the latest value in our API call\n    inputRef.current = e.target.value\n  }\n\n  React.useEffect(() => {\n    // if there's no value or we've already triggered a call\n    // prevent further calls\n    if (!inputVal.trim() || makingCall.current) return\n    makingCall.current = true\n    setTimeout(() => {\n      makingCall.current = false\n      // again, this setQuery is just so I can\n      // render the query below.\n      // if this API call were real, we'd probably\n      // pass the query into the API call function\n      setQuery(inputRef.current)\n      fakeAPICall()\n      .then(() => {\n        setCallCount(callCount => callCount + 1)\n      })\n    }, 800)\n  }, [inputVal])\n\n  return (\n    <div>\n      <h2>Type in this Box ⬇️</h2>\n      <input onChange={handleChange} value={inputVal}/>\n      <p>Current Data: {inputVal}</p>\n      <p>Query Sent: {query}</p>\n      <p>Calls Done: {callCount}</p>\n    </div>\n  )\n}\n\nrender(SearchForm)\n```\n\nSuccess! Now as the user types, every 800ms we make a call for an autocomplete suggestion. This means **more API calls, but better user experience**, at least in the case of our search autocomplete example.\n\n## Parting Thoughts\n\nSo there you have it: throttling and debounce functions in JS and React.\n\nBut would you ever implement this yourself in real life?\n\nSure! If you just needed simple functionality like this, you could absolutely manage your own debounce logic/helpers in your app. However, there's no shame in pulling in Lodash and using the [debounce](https://lodash.com/docs/4.17.15#debounce) or [throttle](https://lodash.com/docs/4.17.15#throttle) functions that they've implemented.\n\nI find it fun to try and implement my own solutions, and I think it's worth the mental gymnastics to give this stuff a shot in your own code every once in a while. But don't be fooled, nobody will judge you if you reach for a third-party solution!","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/how-to-debounce/index.md"}},"next":{"id":"3bcb8598-bb54-51ae-8624-263aa1141705","fields":{"slug":"/what-is-jamstack/"},"frontmatter":{"title":"Just what is JAMstack, anyway?"},"body":"\n![Jars of jam stacked on a shelf. A literal jamstack. Photo by Viktor Forgacs on https://unsplash.com/photos/5mGGOWD-Ths](./jamstack.jpg)\n\nJAMstack is one of those buzzwords that leaves the listener confused whenever it's uttered (see also PWAs, blockchain, and serverless). Despite the name, JAMstack is a fantastic choice for front-end web applications, and definitely worth your time as a front-end developer.\n\nHowever, defining \"JAMstack\" is a tricky thing, and the community knows it. There's why there's sites like [jamstack.wtf](https://jamstack.wtf) and [jamstack.org](https://jamstack.org) devoted to explaining just what it is.\n\nUnfortunately, you have to have a solid understanding of web development technologies before explanations of JAMstack start to make sense. So let's start with the basics.\n\n## Let's Review\n\nWhen I started out as a developer, I had _some_ knowledge of the front-end ecosystem I was entering. There was of course JavaScript, HTML, and CSS, plus single page application (SPA) frameworks like React, Angular, and Vue. I understood two potential options for making web apps with this tooling.\n\nThe first is the old-school **server-rendered** route: build your pages in HTML/CSS/JS ahead of time and let the server serve those. Or you could have the server build those pages with a templating language (handlebars, EJS, jinja, etc) as requests came in. The downside here was that either your content was static (that's no fun), or your server was doing a lot of work. Plus, each time the user requested a new page they would see a white screen as the server built/found the page and sent it to the user's browser.\n\nThe more modern method uses **client-side rendering**. You write an SPA, and send a big payload of JavaScript to your user upfront when they visit your site. This is the buy-once, cry-once method. The user waits while all the JavaScript downloads, then again while it renders the requested page. After that initial hit, the app is buttery smooth and provides a great experience, because each page change after that is rendered with JavaScript running in the user's browser. Still, that initial page-load is the important one. Users are impatient, and a long initial load time means you're losing traffic.\n\nThis always made me think of those signs you see in restaurants and mechanic shops. You know the one:\n\n> We offer three kinds of Services:\n\n> GOOD - FAST - CHEAP\n\n> ...but you can only pick __two__.\n\n## The Chimera Option\n\n![Photo of The Chimera of Arezzo, c. 400 BC, found in Arezzo, an ancient Etruscan and Roman city in Tuscany, Museo Archeologico Nazionale, Florence. By Carole Raddato. From https://www.flickr.com/photos/carolemage/22636282885](./chimera.jpg)\n\nIt turns out there's another option. This is where things start to get sticky, though. Single page applications are already difficult to think about, and typically we like to think about them as using client-side, on-demand rendering only. However it's now possible to mix and match dynamic and static content on both the client and server.\n\nThere's two main camps using this hybrid methodology to web app rendering and delivery. The first is server-rendered single page applications, and the second is JAMstack.\n\n### Server-Rendered SPAs\n\nWith a server-rendered SPA, you have to maintain your own server. On initial hit the server pre-renders the page the user requested in HTML/CSS and sends it down to the user. This means the users gets to see a dynamically-rendered page relatively quickly. The server also sends a mess of JavaScript that loads in the background. Now when the user navigates to the next page, the app functions like an SPA and uses that mess of JavaScript to render the new page, instead of asking the server for it. The app only asks the server for data (typically JSON) after that initial page-load.\n\nSome examples of this technology are [NextJS](https://nextjs.org/), [NuxtJS](https://nuxtjs.org/) and [Angular Universal](https://angular.io/guide/universal). For what it's worth, I've used both NextJS and NuxtJS, and they are both fantastic.\n\nThe only problem with this method is that, again, you need to maintain your own server. Running your own server is much more costly than a static hosting solution (using someone else's server). There's also some potential security liability involved.\n\n### Pre-Rendered SPAs\n\nYou're probably thinking this is a bit silly. The whole point of an SPA is to have a dynamic, on-the-fly rendering of your application at any given point, right? If you pre-render everything, what are you left with?\n\nThe answer is a lot, actually. When we build a single page app, we often have various routes or views baked in that don't change. You may have a \"home\" page, an \"about\" page, and then your \"main\" content. Those home and about changes don't really require dynamic data to render anything, but with a traditional SPA they're rendered dynamically all the same. Even the \"main\" stuff probably lives on a route in some kind of wrapper component, right?\n\nWith a pre-rendered SPA, when we \"build\" the application (bundle with Webpack) we designate what can be safely pre-rendered and what needs to be left alone to render on the client's machine at runtime. Then our bundler pre-renders as much of the application as possible (all the routes), and leaves the rest to be rendered with JavaScript at runtime.\n\nInstead of a single HTML page in your build folder as an entrypoint to your app, you'll have multiple. So when the user asks to visit the \"about\" page instead of the home page, that \"about\" page HTML file is ready before the request comes in. After that initial page-load, the JavaScript takes over and handles the page transitions and dynamic portions of the application.\n\nThe result is an SPA that has a _fast_ initial load, instead of a long initial load, meaning a great user experience without the cost and maintenance of a server.\n\nSome examples of this technology are [GatsbyJS](https://www.gatsbyjs.org/), [Gridsome](https://gridsome.org/), [NextJS](https://nextjs.org/features/static-exporting), and [NuxtJS](https://nuxtjs.org/guide#static-generated-pre-rendering).\n\nGatsby and Gridsome are more purpose-built for \"static\"-site generation, while Next and Nuxt are swiss army knife tools that allow you to do both server-rendering and static-site generation.\n\n**Note**: There's a lot of confusion about Static-Site Generators (SSG). A traditional SSG (Hugo, Jekyll, etc) takes your templated code and generates static HTML files from it. Gatsby and Gridsome are actually a lot more than SSGs. They allow you to smartly pre-build and template content in a lot of various ways.\n\nFor example, this blog is built from markdown files, and at build time, Gatsby compiles the markdown files into a React application. You could also query an API or CMS like Wordpress to get your data dynamically at build time. However you're still free to make API calls at runtime too. _You're still building a React app_. You're just pre-rendering some of it.\n\n## Are you going to talk about JAMstack or not?\n\n![Incredulous looking woman with furrowed brow. Photo by Jeffrey Wegrzyn on https://unsplash.com/photos/K-chxjiTu7c](./impatient.jpg)\n\nYes! Now we can talk about what is and isn't JAMstack. JAMstack stands for JavaScript, APIs, and markup. I find that definition entirely unhelpful, hence the lengthy lead-in for this segment.\n\nJAMstack is really about making awesome websites without running your own server, or at least decoupling your \"static\" front-end from your back-end data sources. The front-end app should be composed of static files **only** and be its own codebase. That means **no server-rendered content**.\n\nThis sounds a little restrictive, but trust me, you can build **a lot** of dynamic content following these rules. Just about anything you can build with create-react-app or an SPA can be a JAMstack site. You can build Blogs, e-commerce sites, marketing pages, and full on web apps all with JAMstack methods.\n\nClear as mud, right?\n\n### JAMstack FAQ:\n\nI had a lot of questions on my journey to understanding JAMstack. Let's try to address some of those points of confusion.\n\n#### If it's pre-rendered, how do I update it?\n\nYou have to rebuild the site/app everytime you update something that is pre-rendered. So if I make a new blog post, I have to rebuild the site and redeploy it.\n\nHowever, that doesn't mean you have to redeploy everytime your app needs to make an API call. Remember that your site can still run JavaScript on the front-end.\n\n#### If I have to redeploy to update the site, how do my users make updates?\n\nAh yes, consider the scenario where you make a blog for someone else. They probably don't want to write posts in markdown and push code to github, right? That's OK! You can automate your build step. If they make a new post, all you need to do is *trigger* a build to happen.\n\n[Netlify CMS](https://www.netlifycms.org/) is based around this idea. The user makes their edits on a dashboard (also an SPA), and when they \"save\", they're really committing the code with git, which then triggers a rebuild.\n\n#### I don't want my users touching git. Ever. I'd rather use Wordpress.\n\nAh, but you can do that too! You'd have to host your own Wordpress server somewhere, but Wordpress has a JSON API. When your user makes a new post, you simply have to trigger your static site to build somehow. If you're using Gatsby or Gridsome, the build step queries your Wordpress API (or any other CMS, really) for all the available posts and builds the site.\n\n#### What about user comments on blog posts?\n\nThat's OK! You can still do all the things we just talked about, and just make a API calls for comments on the fly at runtime. You could build your own comment microservice, or use a premium service [FaunaDB](https://fauna.com/) to store comments for you.\n\n#### What are the advantages to JAMstack?\n\nTypically, you can have faster page loads and a much better user experience using JAMstack methods. Also, because your front-end is detached from the server, security issues are greatly diminished. Plus, it's mostly free or at least very cheap to host a static site.\n\n#### When wouldn't I use JAMstack for a site then?\n\nIf all of your front-end content needs to be generated on the fly, JAMstack is not a great choice. For example, if you need dynamic routes, that makes it very difficult to build a static front-end app. Similarly, if you're building a server anyway, maybe it makes more sense to serve the front-end as well.\n\n#### Can you show me some examples of JAMstack sites?\n\nSure! I've built a whole mess of them.\n\n1. [My blog](https://leewarrick.com/blog) - Built with Gatsby, hosted on Github Pages\n1. [The Tech JR Podcast site](https://techjr.dev) - Built with Gridsome, hosted on Netlify and mp3s stored on AWS S3\n1. [Babelfish, a translation app](https://leewarrick.com/babelfish) - Built with Gatsby and Google's translation API, hosted on Github pages\n1. [Goaler, a todo app](https://leewarrick.com/goaler) - Built with Create-React-App and Firebase, hosted on Github Pages\n1. [This Pokedex App](https://leewarrick.com/pokemon-cards) - Built with the Vue CLI and the Poke-API, hosted on Github Pages\n\n## Parting thoughts\n\nJAMstack, like most great technological trends, is a pretty awesome solution with a crummy name. It's not a perfect solution by any stretch, but it empowers front-end developers to build all kinds of sites and applications using their exisiting skills.\n\nSo what are you waiting for? Get out there and build something!\n","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/what-is-jamstack/index.md"}},"frontmatter":{"title":"The Problem with React's Context API","date":"2019-11-28T12:00:00-0400"}}},"staticQueryHashes":["2836739900","4250957540"],"slicesMap":{}}