{"componentChunkName":"component---src-templates-blog-post-js-content-file-path-home-lee-dev-side-projects-blog-content-blog-angular-vs-react-vs-vue-index-md","path":"/angular-vs-react-vs-vue/","result":{"data":{"site":{"siteMetadata":{"title":"Strings and Things","author":"Lee Warrick","siteUrl":"https://leewarrick.com/blog"}},"mdx":{"id":"f6d9912f-db42-550a-80df-5956b0ba0fe1","excerpt":"Being a front-end developer is a bit like being a cowboy in a rodeo. As a developer, you’ll find yourself wrangling a new framework over and over because of the speed at which the…","frontmatter":{"title":"Front-end Fisticuffs: Angular vs React vs Vue in 2019","date":"October 05, 2019"},"body":"\n![Cowboy riding horse and kicking up dirt by Lee Pigott](./cowboy.jpg)\n\nBeing a front-end developer is a bit like being a cowboy in a rodeo. As a developer, you'll find yourself wrangling a new framework over and over because of the speed at which the front-end landscape evolves. Sure, learning comes with the territory as a developer, but front-end development in particular is becoming quite the skillset to maintain.\n\nThe fact is, you're likely going to need to know at least one if you're going to become a web developer. Before we talk about choosing one to spend your time on, let's first highlight the problems they solve.\n\n## Why use a framework?\n\nThree weeks into a boot camp, I was amazed with the things I could build with HTML/CSS/JS, including [a dice-roll based RPG for the browser.](https://leewarrick.com/rpg)\n\nI've often wanted to make improvements to that game, but the thought of adding features or refactoring has held me back. The problem is, [it's written with a thousand lines of spaghetti jQuery.](https://github.com/mynar7/rpg/blob/master/assets/script.js) I can only imagine the challenge of working on a project like a banking application before frameworks came onto the scene.\n\n**Front-end frameworks are a response to the challenge of increased complexity and scale in web applications.** As we began making bigger web applications that do more and more for the user, we had to find a way to wrangle increasing amounts of logic, traffic, and code.\n\n**Frameworks handle the problem of scope by separating code into components**. A component can be purely visual, functional, or both. For the most part, JavaScript you write in a component is scoped to that component, providing isolation from other parts of the codebase. You don't have to worry as much about conflicting code when using components. **Components are also reusable**, meaning you can accomplish more with less code.\n\nFrameworks have performance benefits over plain JavaScript or jQuery. Specifically, **frameworks optimize re-rendering**, or in laymen's terms, updating the page's HTML. JavaScript's DOM API (all the `document.getElementById` stuff), is resource intensive for the browser. **Frameworks increase performance by minimizing the actual changes to the HTML**.\n\n**Frameworks also help mitigate large amounts of traffic to a website.** Instead of having one server build a new HTML file for each user and request, we can simply send the entire app to each user and let the user's browser handle re-rendering. This way the server only has to serve HTML/CSS/JS once, and can communicate to the browser with only data after that.\n\n### But...\n\nThere's a few downsides to frameworks. It's more JavaScript for the browser to run, which can be costly in terms of load times when a user first visits your site. It's also another layer of complexity for you to deal with as a developer, adding to your growing list of skills to maintain.\n\nIf you're building a static site like a business information page, you might not need a framework. But for complex applications like your banking website or the game I mentioned above, a framework can bring a lot to the table, albeit with its own costs.\n\n## The Big 3: Angular, React, and Vue\n\n![Three Horses, Photo by Doruk Yemenici](./threehorses.jpg)\n\nBefore we talk about picking a framework, let's talk about the differences between them. As of 2019, there's three big players in the JavaScript front-end framework game: Angular, React and Vue.\n\n### Angular\n\nAngular is a Google invention. It all started with AngularJS, which exploded onto the scene and saw widespread use. Then came React, and the Angular team rewrote the entire framework completely and called it Angular 2 (Then they skipped version 3 and went directly to 4 and we're currently on version 7).\n\nBasically AngularJS and Angular 2+ are completely different beasts, and so a large amount of the AngularJS crowd switched to React when version 2 came out.\n\n#### The Good\n\nAngular absolutely rocks for enterprise development. If you want to work for a big company, Angular is a fantastic choice. Angular is **batteries included**, meaning it comes with its own packages and solutions for the common things you want to do. For example, if you want to make an API call, there's a feature for that. Internationalization, Global State Management and other Angular libraries/features are all built and maintained by the Angular team.\n\n**Angular is also the most opinionated of the Big 3.** And because of its opinionated nature, **most Angular projects look the same**. When I say \"opinionated\" I mean that Angular has a particular method or way of doing what you want to accomplish. This means that once you learn it, you likely can work on any other Angular codebase with little effort.\n\n#### The Bad\n\nBeing opinionated is a double-edged sword. Yes, it means that everyone is probably doing something the same way, but remember that Angular was written by Google Engineers. So the \"Angular Way\" does not necessarily mean the easy way.\n\n**TypeScript is mandatory** in Angular, and **the Angular team loves RxJS**, so that's also rolled into the framework. NGRX, Angular's state management library, makes Redux look lightweight by comparison. All this adds up to a **fairly steep learning curve for the novice developer.**\n\nAngular also wraps its components in HTML elements in such a way that CSS is scoped by default. There's no way to turn it off either. Because of this, it can be incredibly difficult to override a component's CSS when you need to.\n\n#### The Ugly\n\nWorking with the module pattern in Angular is frustrating for beginners. Every component comes with an HTML, CSS, TypeScript, and Test file by default. You then have to register that component in a higher level module that tells Angular and TypeScript where it can find everything. The CLI has commands to generate a new component and auto-register it in a module because of how laborious it can be to do manually.\n\nIf you're still learning front-end development and you're new to frameworks, **Angular can feel like building a rocket launcher to swat a fly.** It's honestly overkill for a small application, the type of which you need to build a lot of when learning.\n\nTo boot, the documentation is not great, and the community is not as prolific as React or Vue's. This means it's harder to find solutions for your problems via Google, and there's not many tutorials out there for you to learn from.\n\nThat said, I recommend [Todd Motto's courses](https://ultimatecourses.com/author/toddmotto) and the [Angular Firebase fellow on YouTube](https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA) if you're hoping to learn Angular.\n\n### React\n\nReact, created by Facebook, launched after AngularJS and quickly became the most popular front-end framework.\n\nIf I had to put the React philosophy into words, I might say that **React wants to be as unobstrusive as possible and make you feel like you're just working with JavaScript**. React also highly values immutabililty and one-way data flow.\n\n#### The Good\n\nBecause of its popularity, **there are an absolute ton of resources to learn React.** You can hop onto Google or YouTube and easily find entire free courses for React. Any questions you may have about React have likely been answered and posted to Stack Overflow or some other forum.\n\nReact's popularity also means there is **plenty of 3rd party support**. If you need any kind of pre-built solution for any aspect of a React project, someone has undoubtedly already built it and published it to NPM.\n\nReact's API is also very small, meaning there's just not that much to it. **Writing React is a lot like writing JavaScript**, particularly with the new hooks API which emphasizes a **functional approach** to writing components. **This makes learning React beginner-friendly**.\n\nThe popularity of React also makes it a great skill for finding a job. Plenty of companies use React.\n\n#### The Bad\n\n**Because React is so small and un-opinionated, you're going to have to bring in your own solutions for everything.** This means you may be using lots of 3rd party libraries to accomplish things that might come standard in Angular or Vue. For example, if you want to make an API call, you'll probably use Axios or JS's fetch. If you want global state management, you're going to use Redux or some other solution, where Angular has NGRX and Vue has Vuex.\n\nBeing a \"bring your own everything\" framework, **one React project may look wildly different from another.** So just because you have worked with React at one company for a length of time, you might change jobs to another React-based team and find yourself on a strange and foreign codebase that you have to learn.\n\n#### The Ugly\n\nBecause it's \"just JavaScript\", **React will let you write a bunch of JavaScript and logic in your template.** This can make your code confusing and obtuse to other developers, and even yourself on a second pass. **It can be incredibly difficult to write JSX in a way that's readable.**\n\nReact is un-opinionated, so you can absolutely turn it into a footgun and begin writing code that's not performant and full of bugs. **It's incredibly easy to write bad React code.**\n\n### Vue\n\nVue is the underdog, and everyone loves a good underdog. It's written by Evan You, a former AngularJS team member. This the only one of the Big 3 not backed by a huge company in Silicon Valley.\n\n#### The Good\n\nVue's API is **incredibly easy to learn**. There's plenty of stories of designers and developers that were turned-off or confused by Angular/React that gravitated towards Vue and loved it.\n\nVue provides just enough opinion to keep your code readable and sane without making you feel like you're jumping through hoops to use it. It also provides some excellent built-in solutions for common framework problems. For instance, state management is greatly simplifed through Vuex, Vue's version of Redux/NGRX.\n\nThere's also a **good amount of community support**; there's plenty of third party libraries and packages for Vue. There's also plenty of tutorials and info to be found on Google for Vue. **And the official documentation is excellent.**\n\nIf you're worried about jobs with Vue, it's a valid concern. You're probably not as likely to find a Vue job in the states as an Angular or React job. However, the PHP community loves Vue. **Laravel ships with Vue, and so if you find a company writing PHP, you're likely to also find them using Vue.** Vue is also huge in Asia likely because the documentation has been translated to Asian languages.\n\n#### The Bad\n\nSharing logic between components with Vue is currently a bit of a mess. \"Mixins\" let you write logic that can be shared between components. They're easy enough to use, but it can be devilish trying to figure out how mixins interact with a components logic. **Mixins are terrible.**\n\nVue also doesn't really play well with TypeScript currently, which is a concern for big codebases that could benefit from it.\n\nAnd as I noted above, you _might_ have a harder time finding work in the West as a Vue dev than you would if you had learned React/Angular.\n\n#### The ...Uncertain\n\nVue isn't ugly. It's _vuetiful_.\n\nThat said, Version 3 of Vue is coming, and it's bringing a different API with it that mimics React hooks.\n\nNow, React hooks are **excellent**, but it remains to be seen how well Vue hooks (or the Composition API) will be embraced by the community. Regardless, Vue 3 will be backwards compatible, so hooks will be opt-in.\n\nHaving used React hooks, and having seen what Vue hooks are bringing to the table, I am excited to give them a try.\n\n### What about Ember, Svelte, Backbone, etc?\n\nThere's a lot of front-end frameworks out there that aren't the big 3. Someone probably published a new one while you were reading this article. Here's a few I didn't mention:\n\n- **Ember** is another highly-opinionated framework, and while it's not as popular, there are teams out there using it.\n- **Svelte** is so new that nobody is using it yet. The creator is brilliant, and this may blow up, so who knows?\n- Nobody uses **backbone**. Sorry backbone.\n- **Lit-HTML/Polymer** is an ultra-lightweight framework (like 30 lines of JS small or something). I don't know of anyone using it.\n\n## Choosing a Framework\n\n![Man riding a horse, lighting his path with a lanterm by Priscilla De Preez](./lanternrider.jpg)\n\nNow that we've talked about the big 3, how do you pick one to learn?\n\nYou'll probably spend most of your time using one framework. A codebase is unlikely to pull in multiple frameworks, and as a developer you likely only have time to specialize in one framework at a time.\n\nThe truth is: **it doesn't really matter which framework you know, as long as you know one**.\n\nAll of these frameworks do the same thing. You write a template, variables and logic and they re-render the template based on those variables and logic.\n\nThey all use webpack and babel, they all have build-steps and CLIs, and you can get the same apps written using all of them. **They're all just HTML, CSS and JavaScript at the end of the day.**\n\nYour skills in one will transfer to another, because you're really learning web development before you're learning Angular or React development.\n\nWith that said, **choose the framework that aligns with your goals and preferences**.\n\nIf you want to move to Asia and work as a developer, Vue is a solid choice. Are you a Java developer or want to work at a big corporation? Angular might be best for you. Are you self-taught? Maybe React is the best choice simply for the amount of free tutorials that are available.\n\n## Parting Thoughts\n\nLearning the conventions and basics of a front-end framework is the hard part. **Once you learn one, it becomes trivial to switch to another.** I learned React in a boot camp, got hired at a big company that used Angular, and then changed jobs to another that used Vue.\n\n**Note**: If you're curious about how web development evolved from Geocities to React, I did [a brief talk on the history of web development and its current landscape.](https://www.youtube.com/watch?v=-W2hZadx8fE)"}},"pageContext":{"slug":"/angular-vs-react-vs-vue/","previous":{"id":"72a3b4a5-4049-5259-a5a2-0b2bf8017b7b","fields":{"slug":"/css-only-menus/"},"frontmatter":{"title":"How to make menus with CSS—no JavaScript or Bootstrap required!"},"body":"\nI think a lot of new developers, myself included, are really excited about CSS until it comes time to start building more modern website features like menus.\n\nI remember building my first site, feeling empowered by CSS to do my own styles, and feeling really proud of myself ...until I needed a navigation menu.\n\n![Pouring coffee into a mug marked \"UGH\". Photo by Nathan Dumlao](./ugh.jpg)\n\nAs soon as I added a few links to my header, I began to run out of room on smaller screens. My site had to look good on mobile, so I was left with a choice:\n\n1. Use Bootstrap menus and include a bunch of JavaScript/jQuery on the page, or\n1. Use fewer links\n\nI've made that choice many times since then, assuming that those were the only options when building navigation menus.\n\n## Creativity through Constraint\n\nIt wasn't until I had to do a coding challenge for a developer job that I had to reckon with the real power of CSS.\n\nI was presented a set of mock-ups of a modern website and told to create the website as close to the provided assets as possible. That's a pretty typical request, except there was one catch: **no JavaScript allowed**.\n\nI thought, _\"No way! There's menus everywhere! How can I pull that off without JS?\"_\n\nThere were **dropdown menus**, **drawers**, and even a Bootstrap-esque **mobile hamburger menu** on one of the mocks.\n\nBeing the intrepid developer that I am, I saw this as a fun challenge. I hopped on Codepen and began searching for CSS-only versions of these common UI components.\n\nAfter a little digging, I found examples for all of them! While there were some tricks involved that I would have never thought of, the tricks themselves were simple.\n\nI took those new tricks and used them to finish the coding challenge. And yes, I got the job!\n\nI had always been told that CSS was super powerful, but I don't think I believed it until that point.\n\nSo without further adieu, here's how I managed to recreate all of those menus with CSS alone.\n\n## The Classic Dropdown Menu\n\nThe first menu I want to talk about is the dropdown menu. You've probably seen this on any e-commerce site or anything with lots of categories and navigation. There's a header up top with a list of categories, and when you mouse over one, a new menu appears with more related items.\n\nHere's an example:\n```css css-live\n.dropdown__header * {\n  padding: 0;\n  margin: 0;\n}\n.dropdown__header {\n  display: flex;\n  align-items: center;\n  background: lightblue;\n}\n\n.dropdown__header strong {\n  margin-left: 5px;\n  margin-right: auto;\n  font-size: 1.6rem;\n}\n\n.dropdown__header .dropdown__categories,\n.dropdown__header .dropdown__menu {\n  display: flex;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.dropdown__header li {\n  padding: 10px;\n  position: relative;\n}\n\n.dropdown__header li:hover {\n  background: #d2f2fc;\n}\n\n.dropdown__header .dropdown__category .dropdown__menu {\n  display: none;\n  position: absolute;\n  background: #ebfaff;\n  width: 200px;\n  top: 50px;\n  right: 0;\n}\n\n.dropdown__header .dropdown__category:hover .dropdown__menu {\n  display: block;\n}\n```\n\n```html html-live\n<header class=\"dropdown__header\">\n  <strong>Logo</strong>\n  <ul class=\"dropdown__categories\">\n    <li class=\"dropdown__category\">\n      <span>Cat 1</span>\n      <ul class=\"dropdown__menu\">\n        <li>Cat 1 Thing</li>\n        <li>Cat 1 Thing</li>\n        <li>Cat 1 Thing</li>\n        <li>Cat 1 Thing</li>\n      </ul>\n    </li>\n    <li class=\"dropdown__category\">\n      <span>Cat 2</span>\n      <ul class=\"dropdown__menu\">\n        <li>Cat 2 Thing</li>\n        <li>Cat 2 Thing</li>\n        <li>Cat 2 Thing</li>\n        <li>Cat 2 Thing</li>\n      </ul>\n    </li>\n  </ul>\n</header>\n<br>\n<h3>CSS Only Dropdown!</h3>\n<p>Hover over the Categories above</p>\n<p>Pretty cool, right?</p>\n```\n\n### What makes this work?\n\nThere's three main concepts here that make this possible: **Showing/Hiding with Psuedoselectors**, **absolute positioning**, and **mindful HTML structure**.\n\n#### Showing/Hiding with Pseudoselectors\n\nI think most people are comfortable showing/hiding things with `display: none` and `display: block`. The real trick here is the selectors.\n\nWe're targetting `.dropdown__menu`, but notice the nesting structure. We're looking for a `.dropdown__menu` class that's within a `.dropdown__category` class. Then we can apply the `:hover` pseudoselector to the parent, which means we're targetting the menu based on a hover over the parent.\n\n```css\n.dropdown__header .dropdown__category .dropdown__menu {\n  display: none;\n}\n\n.dropdown__header .dropdown__category:hover .dropdown__menu {\n  display: block;\n}\n```\n\n#### Mindful HTML Structure\n\nAre you wondering why our menu stays open even when you move your mouse into the menu?\n\nGoing along with our nesting explanation above, note that our `.dropdown__menu` is contained within `.dropdown__category`:\n\n```html\n<li class=\"dropdown__category\">\n  <span>Cat 1</span>\n  <ul class=\"dropdown__menu\">\n    <li>Cat 1 Thing</li>\n    <li>Cat 1 Thing</li>\n    <li>Cat 1 Thing</li>\n    <li>Cat 1 Thing</li>\n  </ul>\n</li>\n```\n\nThis means that although we're no longer over the words \"Cat 1\", the mouse is still within the `.dropdown__category` list item, keeping the `:hover` selector trigger active.\n\n**Note**: The menu and category elements must be adjacent to each other so that your mouse stays within one or the other--you can't position the menu off by itself somewhere and be able to mouse into it. More on that when we get to positioning.\n\n#### Absolute Positioning\n\nWe position the hovered menu next to the category in the header using `position: absolute;`.\n\nW3 Schools has a [great breakdown](https://www.w3schools.com/css/css_positioning.asp) of CSS positioning, but here's the short version:\n\nWhen you set positioning, items can be moved around with `top`, `bottom`, `left`, and `right` options.\n\n* **Static**: The default. The element behaves normally, and is unaffected by top/bottom/left/right.\n* **Fixed**: The element is positioned relative to the viewport. Eg: `top: 0;` would be the top of the viewer's screen.\n* **Relative**: The element is positioned based on where it would be normally. So `top: 0` wouldn't move it at all, and `top: 10px` would push it down 10 pixels.\n* **Sticky**: This is a newer, trickier positioning. The element stays where it is, but when the user scrolls the page, before the element moves out of view, it will still stick to whatever top/bottom/left/right position is set.\n\nAnd lastly, there's **Absolute** positioning. This is the most complicated. The behavior depends on whether this element is within an element that has some kind of positioning set. **If it has a positioned ancestor, it positions relative to that ancestor element. If not, it is positioned relative to the whole page.**\n\nIn the case of our dropdown menus, we make the `li` tag that contains the menu `relative`. Then within it we can use `position: absolute;` to position the expanded menu around our category title.\n\n```css\n.dropdown__header li {\n  position: relative;\n}\n\n.dropdown__header .dropdown__category .dropdown__menu {\n  position: absolute;\n  top: 50px;\n  right: 0;\n}\n```\n\nHere we right-align the menu, and bump it down just far enough so that it's at the bottom of \"Cat 1\" under our mouse.\n\n## Nested Dropdown Menus\n\nUsing the same techniques, we can create a more complicated dropdown menu:\n\n```css css-live\n.nested-dropdown__header * {\n  padding: 0;\n  margin: 0;\n}\n.nested-dropdown__header {\n  display: flex;\n  align-items: center;\n  background: lightblue;\n}\n\n.nested-dropdown__header strong {\n  margin-left: 5px;\n  margin-right: auto;\n  font-size: 1.6rem;\n}\n\n.nested-dropdown__header ul {\n  display: flex;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.nested-dropdown__header li {\n  padding: 10px;\n  position: relative;\n}\n\n.nested-dropdown__header li:hover {\n  background: #d2f2fc;\n}\n\n.nested-dropdown__header .nested-dropdown__menu,\n.nested-dropdown__header .nested-dropdown__submenu {\n  display: none;\n  position: absolute;\n  background: #ebfaff;\n  width: 150px;\n  top: 50px;\n  right: 0;\n}\n\n.nested-dropdown__header .nested-dropdown__category:hover .nested-dropdown__menu,\n.nested-dropdown__header .nested-dropdown__subcategory:hover .nested-dropdown__submenu {\n  display: block;\n}\n\n.nested-dropdown__header .nested-dropdown__submenu {\n  top: 0;\n  right: 100%;\n}\n```\n\n```html html-live\n<header class=\"nested-dropdown__header\">\n  <strong>Logo</strong>\n  <ul class=\"nested-dropdown__categories\">\n    <li class=\"nested-dropdown__category\">\n      <span>Cat 1</span>\n      <ul class=\"nested-dropdown__menu\">\n        <li class=\"nested-dropdown__subcategory\">\n          <span>Sub Cat 1</span>\n          <ul class=\"nested-dropdown__submenu\">\n            <li>Sub Cat 1 Thing</li>\n            <li>Sub Cat 1 Thing</li>\n            <li>Sub Cat 1 Thing</li>\n            <li>Sub Cat 1 Thing</li>\n          </ul>\n        </li>\n        <li class=\"nested-dropdown__subcategory\">\n          <span>Sub Cat 2</span>\n          <ul class=\"nested-dropdown__submenu\">\n            <li>Sub Cat 2 Thing</li>\n            <li>Sub Cat 2 Thing</li>\n            <li>Sub Cat 2 Thing</li>\n          </ul>\n        </li>\n        <li>Cat 1 Thing</li>\n        <li>Cat 1 Thing</li>\n      </ul>\n    </li>\n  </ul>\n</header>\n<br>\n<h3>CSS Only NESTED Dropdown!</h3>\n<p>Hover over 'Cat 1' above,</p>\n<p>Then check out the Sub Categories!</p>\n```\n\nThere's only two caveats to this nested menu.\n\nThe first is that it doesn't work well on mobile devices. This type of menu requires a lot of real-estate and hovers don't translate to touchscreens very well. This isn't a fault of CSS, though. Most sites will switch to a different style of menu on smaller devices, regardless of CSS vs JS.\n\nThe second is that if your user wants to jump from a menu to a nested menu, she may take the shortest path and unintentionally move her mouse cursor out of the current element. Deeply nested menus are a little perilous for the user, so use with caution.\n\n## Content Drawers\n\nCreating drawers with CSS alone seemed impossible. Hover effects don't work, because when you open a drawer, you expect it to stay open. However, I learned that it _is_ possible with some very clever uses of HTML input elements and CSS selectors.\n\nThis example has quite a bit of CSS, but don't fret, I promise to explain the important bits:\n\n```css css-live\n.drawer {\n  position: relative;\n  box-sizing: border-box;\n  width: 300px;\n}\n.drawer input {\n  width: 100%;\n  height: 60px;\n  position: absolute;\n  opacity: 0;\n  top: 0;\n  left: 0;\n  margin: 0;\n  z-index: 3;\n  cursor: pointer;\n}\n.drawer__name {\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid black;\n  padding: 10px;\n  background: lightblue;\n}\n.drawer__content {\n  border: 1px solid black;\n  box-sizing: border-box;\n  width: 100%;\n  margin: 0;\n  height: 0;\n  opacity: 0;\n  pointer-events: none;\n  list-style: none;\n  transition: padding 0.2s;\n}\n.drawer input:checked ~ .drawer__content {\n  height: 100%;\n  opacity: 1;\n  pointer-events: initial;\n  padding: 10px 0;\n}\n.drawer__arrow {\n  font-weight: 900;\n  font-size: 1.2rem;\n  transition: transform 0.2s;\n}\n.drawer input:checked ~ .drawer__name > .drawer__arrow {\n  transform: rotateZ(90deg);\n}\n.drawer__content li {\n  padding: 10px;\n  cursor: pointer;\n}\n.drawer__content li:hover {\n  color: rebeccapurple;\n  text-decoration: underline;\n}\n```\n```html html-live\n<div class=\"drawer\">\n  <input type=\"checkbox\">\n  <span class=\"drawer__name\">\n    <span><strong>Bananas</strong></span>\n    <span class=\"drawer__arrow\">></span>\n  </span>\n  <ul class=\"drawer__content\">\n    <li>Bruised</li>\n    <li>Green</li>\n    <li>Perfect</li>\n  </ul>\n</div>\n<div class=\"drawer\">\n  <input type=\"checkbox\">\n  <span class=\"drawer__name\">\n    <span><strong>Apples</strong></span>\n    <span class=\"drawer__arrow\">></span>\n  </span>\n  <ul class=\"drawer__content\">\n    <li>Mealy</li>\n    <li>Crisp</li>\n    <li>Green</li>\n  </ul>\n</div>\n<div class=\"drawer\">\n  <input type=\"checkbox\">\n  <span class=\"drawer__name\">\n    <span><strong>Oranges</strong></span>\n    <span class=\"drawer__arrow\">></span>\n  </span>\n  <ul class=\"drawer__content\">\n    <li>Bitter</li>\n    <li>Sour</li>\n    <li>Sweet</li>\n  </ul>\n</div>\n```\n\nTa-da! ✨ Pure CSS drawers!\n\nIt seems like a lot of code is required to make this happen, but there's just a few key pieces to this puzzle that make it possible.\n\n### What makes this work?\n\nThe main trick here really did blow my mind. The secret is **HTML checkbox elements**.\n\n**Note:** I would have never thought of this in a million years. When I saw an example of this on Codepen I experienced the same feelings I had when seeing an awesome magic trick explained; I felt amazement of the ingenuity involved, and also anger at being duped by such a simple trick that I should have been able to figure out for myself.\n\nIf we position the checkbox over the drawer and stretch it to the same size as the drawer, then target siblings on a `:checked` state, we can eliminate the need for JavaScript to trigger the open/close events. The CSS sibling selector is `~`, meaning target any neighbor elements coming after this element.\n\nIt's important to note that the **checkbox must come first in the HTML**. You can select sibling/neighbor elements that come after, but not before. We also use `~` and not `+` because `+` targets only the first adjacent sibling element, whereas `~` will give you any following sibling.\n\n```css css-live no-code\n.ex2-drawer {\n  position: relative;\n  box-sizing: border-box;\n  width: 300px;\n}\n.ex2-drawer input {\n  width: 100%;\n  height: 60px;\n  outline: 2px solid red;\n  position: absolute;\n  /* opacity: 0; */\n  top: 0;\n  left: 0;\n  margin: 0;\n  z-index: 3;\n  cursor: pointer;\n}\n.ex2-drawer__name {\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid black;\n  padding: 10px;\n  background: lightblue;\n}\n.ex2-drawer__content {\n  border: 1px solid black;\n  box-sizing: border-box;\n  width: 100%;\n  margin: 0;\n  height: 0;\n  opacity: 0;\n  pointer-events: none;\n  list-style: none;\n  transition: padding 0.2s;\n}\n.ex2-drawer input:checked ~ .ex2-drawer__content {\n  height: 100%;\n  opacity: 1;\n  pointer-events: initial;\n  padding: 10px 0;\n}\n.ex2-drawer__arrow {\n  font-weight: 900;\n  font-size: 1.2rem;\n  transition: transform 0.2s;\n}\n.ex2-drawer input:checked ~ .ex2-drawer__name > .ex2-drawer__arrow {\n  transform: rotateZ(90deg);\n}\n.ex2-drawer__content li {\n  padding: 10px;\n  cursor: pointer;\n}\n.ex2-drawer__content li:hover {\n  color: rebeccapurple;\n  text-decoration: underline;\n}\n```\n```html html-live no-code\n<div class=\"ex2-drawer\">\n  <input type=\"checkbox\">\n  <span class=\"ex2-drawer__name\">\n    <span><strong>Bananas</strong></span>\n    <span class=\"ex2-drawer__arrow\">></span>\n  </span>\n  <ul class=\"ex2-drawer__content\">\n    <li>Bruised</li>\n    <li>Green</li>\n    <li>Perfect</li>\n  </ul>\n</div>\n<div class=\"ex2-drawer\">\n  <input type=\"checkbox\">\n  <span class=\"ex2-drawer__name\">\n    <span><strong>Apples</strong></span>\n    <span class=\"ex2-drawer__arrow\">></span>\n  </span>\n  <ul class=\"ex2-drawer__content\">\n    <li>Mealy</li>\n    <li>Crisp</li>\n    <li>Green</li>\n  </ul>\n</div>\n<div class=\"ex2-drawer\">\n  <input type=\"checkbox\">\n  <span class=\"ex2-drawer__name\">\n    <span><strong>Oranges</strong></span>\n    <span class=\"ex2-drawer__arrow\">></span>\n  </span>\n  <ul class=\"ex2-drawer__content\">\n    <li>Bitter</li>\n    <li>Sour</li>\n    <li>Sweet</li>\n  </ul>\n</div>\n```\n\nThe other important piece to this puzzle is the transition. Notice we didn't use `display` here to show and hide the drawer. If you do, you won't be able to use CSS transitions to animate. **You can't animate an element that's hidden with `display: none`**\n\nInstead, we use a combo of `height`, `padding`, `opacity`, and `pointer-events`. (That seems like a lot, but hear me out).\n\nHere's the main code that makes this possible for reference:\n```css\n.drawer {\n  position: relative;\n}\n.drawer input {\n  width: 100%;\n  height: 60px;\n  position: absolute;\n  opacity: 0;\n  top: 0;\n  left: 0;\n  z-index: 3;\n  cursor: pointer;\n}\n.drawer__content {\n  height: 0;\n  opacity: 0;\n  pointer-events: none;\n  transition: padding 0.2s;\n}\n.drawer input:checked ~ .drawer__content {\n  height: 100%;\n  opacity: 1;\n  pointer-events: initial;\n  padding: 10px 0;\n}\n```\n```html\n<div class=\"drawer\">\n  <input type=\"checkbox\">\n  <span class=\"drawer__name\">\n    <span><strong>Oranges</strong></span>\n    <span class=\"drawer__arrow\">></span>\n  </span>\n  <ul class=\"drawer__content\">\n    <li>Bitter</li>\n    <li>Sour</li>\n    <li>Sweet</li>\n  </ul>\n</div>\n```\n\nFirst we squash the `.drawer__content` with `height: 0`, and hide it with `opacity: 0`. However, because it's still on the page, the user would be able to click the things within, even though the content isn't visible. The solution is to disable mouse interaction with `pointer-events: none`. This allows us to animate the content while not letting the use see or interact with it.\n\nFinally, we use `padding` as our animation. Animating the `height` causes some weird behavior, but animating the padding allows some for some subtle animation while keeping the drawer itself very responsive.\n\n**Note:** It's possible to make drawers with just HTML alone using the `details` element. You lose out on the ability to animate with CSS, though.\n\nHere's a quick example. None of the CSS is necessary for the drawer behavior:\n\n```css css-live\ndetails {\n  background: rebeccapurple;\n  color: #ddd;\n  width: 300px;\n  border-radius: 4px;\n  margin-bottom: 5px;\n}\nsummary {\n  padding: 10px;\n}\nsummary:focus {\n  outline: none;\n}\ndetails ul {\n  background: #ddd;\n  margin: 0;\n  color: black;\n  padding: 10px;\n  border-radius: 0 0 4px 4px;\n}\n\ndetails li {\n  margin-left: 30px;\n  margin-top: 10px;\n}\n```\n```html html-live\n<details open>\n  <summary>Drawer 1</summary>\n  <ul>\n    <li>Thing 1</li>\n    <li>Thing 2</li>\n    <li>Thing 3</li>\n    <li>Thing 4</li>\n  </ul>\n</details>\n<details>\n  <summary>Drawer 2</summary>\n  <ul>\n    <li>Thing 1</li>\n    <li>Thing 2</li>\n    <li>Thing 3</li>\n    <li>Thing 4</li>\n  </ul>\n</details>\n```\n## CSS Only Hamburger Menus\n\nNow for the coup de grâce, CSS-only Hamburger menus!\n\nWhat's a hamburger menu? It gets its name from the three stacked dashes that indicate \"hey this is a menu\". I guess someone was awful hungry for three lines to look like a hamburger, but I digress.\n\nYou may have some ideas on how to pull this off in your head after seeing the previous examples. Let's take a look (Warning, incoming a ton of CSS):\n\n```css css-live\n.hamburger-menu__wrapper {\n  min-height: 400px;\n  position: relative;\n  text-align: center;\n}\n.hamburger-menu {\n  height: 100%;\n  width: 300px;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n.hamburger-menu__button {\n  width: 40px;\n  height: 40px;\n  border: 2px solid #777;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  position: relative;\n  z-index: 3;\n}\n\n.hamburger-menu__button span {\n  line-height: 8px;\n  text-align: center;\n  font-size: 1.6rem;\n  font-weight: 400;\n}\n\n.hamburger-menu__button span:last-child {\n  padding-bottom: 5px;\n}\n.hamburger-menu__wrapper {\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n}\n.hamburger-menu__wrapper input[type='checkbox'] {\n  width: 40px;\n  height: 40px;\n  outline: 3px solid red;\n  opacity: 0;\n  position: absolute;\n  top: 6px;\n  left: 6px;\n  z-index: 4;\n  cursor: pointer;\n}\n\n.hamburger-menu__wrapper input:checked ~ .hamburger-menu__button {\n  background: #d2f2fc;\n}\n\n.hamburger-menu__wrapper input:checked ~ .hamburger-menu__slider {\n  transform: none;\n}\n\n.hamburger-menu__slider {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: 100%;\n  background-color: lightblue;\n  z-index: 2;\n  transform: translateX(-310px);\n  transition: transform 0.3s;\n  text-align: left;\n}\n\n.hamburger-menu__item {\n  padding: 10px 0 10px 10px;\n}\n\n.hamburger-menu__item:hover {\n  background-color: #d2f2fc;\n}\n\n.hamburger-menu__item:first-of-type {\n  margin-top: 60px;\n}\n```\n\n```html html-live\n<div class=\"hamburger-menu__wrapper\">\n  <div class=\"hamburger-menu\">\n    <div class=\"hamburger-menu__wrapper\">\n      <input type=\"checkbox\" />\n      <div class=\"hamburger-menu__button\">\n        <span>&mdash;</span>\n        <span>&mdash;</span>\n        <span>&mdash;</span>\n      </div>\n      <div class=\"hamburger-menu__slider\">\n        <div class=\"hamburger-menu__item\">Thing 1</div>\n        <div class=\"hamburger-menu__item\">Thing 2</div>\n        <div class=\"hamburger-menu__item\">Thing 3</div>\n        <div class=\"hamburger-menu__item\">Thing 4</div>\n      </div>\n    </div>\n  </div>\n  <h2>Hamburger!!</h2>\n  <p>Click the Button to toggle the menu</p>\n</div>\n```\n\nTake ***that***, bootstrap. 🤠\n\n### What makes it work?\n\nA lot of the CSS above is for creating that silly hamburger style button. I literally stacked dashes and put a border around them, but you can use an icon if you like.\n\nAs for the menu, it uses **absolute positioning**, the **input checkbox trick**, as well as a new trick, which is using **transform** to slide the drawer in and out.\n\nHere's the code that makes the menu slide:\n```css\n.hamburger-menu__wrapper {\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n}\n\n.hamburger-menu__wrapper input:checked ~ .hamburger-menu__slider {\n  transform: none;\n}\n\n.hamburger-menu__slider {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: 100%;\n  z-index: 2;\n  transform: translateX(-310px);\n  transition: transform 0.3s;\n}\n```\n\nWe style the menu to sit on top of the page, then add in `transform: translateX(-310px)` to pull the menu to the left so it's no longer visible. When the `input` is checked, we remove that `transform` and the transition animates the drawer sliding into view.\n\nThere's a ton of other neat things you can do with the `transform` property. We used it above on our drawers to turn our arrow to point downward when the drawer is open, for example.\n\nWe also use `overflow: hidden` on the wrapper to make sure our menu isn't visible when the menu is closed.\n\n**Note:** We also use `z-index` here to make sure things stack on top of each other. Absolute positioning breaks items out of normal HTML flow, so making sure the menu is on top is crucial. Even more critical, we apply a higher z-index to the checkbox to make sure the user can always open and close the menu. We applied `z-index` to our drawer checkboxes as well above.\n\n## But about JavaScript?\n\nSo yes, the point of this click-baity article title was that these things are possible _without_ JavaScript. But does that make sense?\n\nCSS is incredibly performant in general compared to using JavaScript. So it's a good rule of thumb to use CSS instead of JS for most things.\n\nThat said, some of these examples could be improved with JavaScript. Certainly toggling open/closed states would be much simpler using JS. Also, our hamburger example could benefit from being able to click outside of the menu to close the drawer. For the drawers, you might want to only have one of the drawers open above at a time. And for the dropdown menus you might want to slow the closing of the menus when the mouse cursor moves outside of the menu.\n\nIf you're already using an SPA like React, you may as well use a touch of JavaScript with your CSS to build the menus.\n\nThe point here is that **for a simple site, you don't need to reach for CSS frameworks or JS frameworks.**\n\n## Parting Thoughts\n\nCSS is powerful, and we could all use more excuses to practice and learn more and do more with it. HTML deserves a shout-out here as well. You can build a lot with HTML and CSS alone. Certainly more than I thought was possible when I started out.\n\nJavaScript may rule the world, but CSS and HTML deserve your attention as a front-end developer as well.","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/css-only-menus/index.md"}},"next":{"id":"b412c488-45ca-51b9-9f6d-77f1de52163e","fields":{"slug":"/how-to-debounce/"},"frontmatter":{"title":"What are debounce and throttle functions, and how do you write them in JavaScript and React?"},"body":"![Photo of Typewriter by Pereanu Sebastian](./typewriter.jpg)\n\nHave you ever heard the story of the QWERTY layout on a keyboard? The [popular legend](https://en.wikipedia.org/wiki/Typewriter#QWERTY) is that it was too easy to type if the letters were arranged alphabetically, and this caused mechanical typewriters to jam. The most common letters were too close together, supposedly. So to fix this, the QWERTY layout was invented, to _slow down the typist_.\n\nThis Dilbertian engineering idea is eerily similar to what a debounce function does.\n\n## What is a debounce?\n\nA debounce function is meant to slow down something in your application, typically a function call. The best way to wrap your head around this is by example.\n\nConsider this: you have a search input on your site somewhere, and _as the user types_, you want to go fetch some search results to try and match what the user is looking for before they finish typing.\n\n_Piece of cake!_, you think. With React, you can attach your API call to your input's `onChange` event like so:\n\n```jsx react-live\nfunction SearchForm() {\n  const [inputVal, setInputVal] = React.useState(\"\")\n  const [callCount, setCallCount] = React.useState(0)\n\n  function handleChange(e) {\n    setInputVal(e.target.value)\n    // let's say this was an API call\n    // to add auto-complete data\n    setCallCount(callCount + 1)\n  }\n\n  return (\n    <div>\n      <h2>Type in this Box ⬇️</h2>\n      <input onChange={handleChange} value={inputVal}/>\n      <p>Current Data: {inputVal}</p>\n      <p>Calls Done: {callCount}</p>\n    </div>\n  )\n}\n```\n\nNotice that as you type in the search box, if your API function is attached to your input's `onChange` event, you'll make an API call _every time the user presses a key_ 😱. If you couple this with the small delay it takes to make an API call, you can imagine the traffic jam that this would cause as you have multiple API calls being made and flooding back in.\n\nThis isn't what we imagined when we first cooked up this auto-populating search box scheme. What we _really_ want to do is to make our API call when the user pauses or stops typing.\n\nThis is the purpose of a **debounce** function, to limit the amount of calls that can happen in a given amount of time.\n\n## How to debounce a function in JavaScript\n\nSo we need to fire fewer API calls, but how do we do it?\n\nBefore we jump into React, let's give this a shot with regular JavaScript. Let's put our fake API call in its own function, then wrap it in our debounce function.\n\n```js js-live\nlet callCount = 0\n\n// this is just a promise that resolves after 300ms\n// and console logs a counter\nfunction fakeAPICall() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      callCount++\n      console.log(\"Calls Made:\" + callCount)\n      resolve()\n    }, 300)\n  })\n}\n\nfakeAPICall() // 1\nfakeAPICall() // 2\nfakeAPICall() // 3\n\nfunction debounce(callback) {\n    // each call to debounce creates a new timeoutId\n    let timeoutId\n    return function() {\n      // this inner function keeps a reference to\n      // timeoutId from the function outside of it\n      clearTimeout(timeoutId)\n      timeoutId = setTimeout(callback, 800)\n    }\n}\n\n// wraps the fakeAPICall function and returns\n// a function that calls fakeAPICall\nconst debouncedFakeApiCall = debounce(fakeAPICall)\n\n// all these calls cancel each other\n// Until the last call finally happens after 800 ms\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall()\ndebouncedFakeApiCall() // 4\n```\n\nSuccess!\n\nWithout a debounce, we get 3 calls, but with a debounce, we only fire an API call **on the last function call**.\n\n### How it works\n\nThe most basic, critical piece of this debounce function is to delay the actual API call, then as more calls come in, cancel and reset the delay for the API call. We do this with `setTimeout` and `clearTimeout` in the JavaScript above.\n\nIf you noticed the debounce function taking a function and returning a another function, that is an example of a closure in JavaScript. When we debounce a function, we pass our original function in, and wrap it in another function that delays calls to the original. In this way our debounce function is reusable throughout our program. We could debounce as many different functions as we want, **because each one has its own `timeoutId` variable**.\n\n## How to write a debounce function in React\n\nReact allows us to encapsulate logic in components, so we can skip the fancy JavaScript closures and just use our component to write a debounce function.\n\nLet's take a look:\n\n```jsx react-live use-render\n// just an async helper\nfunction fakeAPICall() {\n  return new Promise(resolve => {\n    setTimeout(resolve, 300)\n  })\n}\n\nfunction SearchForm() {\n  const [inputVal, setInputVal] = React.useState(\"\")\n  const [query, setQuery] = React.useState(\"\")\n  const inputRef = React.useRef(\"\")\n  const [callCount, setCallCount] = React.useState(0)\n  const timeoutId = React.useRef()\n\n  function handleChange(e) {\n    setInputVal(e.target.value)\n    // mimic the value so we can access\n    // the latest value in our API call\n    inputRef.current = e.target.value\n  }\n\n  React.useEffect(() => {\n    // if the user keeps typing, stop the API call!\n    clearTimeout(timeoutId.current)\n    // don't make an API call with no data\n    if (!inputVal.trim()) return\n    // capture the timeoutId so we can\n    // stop the call if the user keeps typing\n    timeoutId.current = setTimeout(() => {\n      // grab our query, but store it in state so\n      // I can show it to you below in the example 😄\n      setQuery(inputRef.current)\n      fakeAPICall()\n      // here we pass a callback so we get the current callCount value\n      // from the useState hook's setter function\n      // we use a Ref for timeoutId to avoid this same problem\n      .then(() => setCallCount(callCount => callCount + 1))\n    }, 800)\n  }, [inputVal])\n\n  return (\n    <div>\n      <h2>Type in this Box ⬇️</h2>\n      <input onChange={handleChange} value={inputVal}/>\n      <p>Current Data: {inputVal}</p>\n      <p>Query Sent: {query}</p>\n      <p>Calls Done: {callCount}</p>\n    </div>\n  )\n}\n\nrender(SearchForm)\n```\nNow as we type, the component won't actually make any API calls until the typing stops.\n\nThe only difference here is that instead of writing a closure, we're using a React Ref for our `timeoutId`. Refs are React's version of instance variables, so each SearchForm component that we make should get its own `timeoutId`. If you want to learn more about Refs and `useEffect`, [I wrote another post on that topic](https://leewarrick.com/blog/react-use-effect-explained/).\n\n## What is a throttle?\n\nThis might not be exactly what you imagined when you envisioned this functionality. For example, as you type into Google search, you still get autocomplete suggestions as you type, even if you haven't stopped typing.\n\nSo while our previous examples will ensure we do the _fewest_ API calls possible, we may want to tweak our solution to **make an API call every so often as the user types**. This would be a **throttle** function.\n\n## How to write a throttle in JavaScript\n\nLet's tweak our JavaScript debounce implementation so that we only make our API call every 800ms.\n\n```js js-live\nlet callCount = 0\n\nfunction fakeAPICall() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      callCount++\n      console.log(\"Calls Made:\" + callCount)\n      resolve()\n    }, 300)\n  })\n}\n\nfunction throttle(cb) {\n    let makingCall\n    return function() {\n      // if I'm in progress of making an API call,\n      // don't trigger another one\n      if (makingCall) return\n      // set up API call to fire\n      makingCall = true\n      // give the user some time to type by delaying the actual call\n      setTimeout(() => {\n        makingCall = false\n        cb()\n      }, 800)\n    }\n}\n\nconst throttledFakeApiCall = throttle(fakeAPICall)\n\n// imagine the user starting and stopping typing\n// we'll only make a call every 800ms\nthrottledFakeApiCall() // 1\nthrottledFakeApiCall()\nthrottledFakeApiCall()\nsetTimeout(() => {\n  throttledFakeApiCall()\n  throttledFakeApiCall()\n}, 600)\nsetTimeout(() => {\n  throttledFakeApiCall() // 2\n  throttledFakeApiCall()\n}, 1200)\nsetTimeout(() => {\n  throttledFakeApiCall()\n  throttledFakeApiCall()\n}, 1800)\nsetTimeout(() => {\n  throttledFakeApiCall() // 3\n  throttledFakeApiCall()\n}, 2400)\n\n```\n\nNow as our throttle function fires, we are limiting our calls to happen every 800ms.\n\n### How it works\n\nThis new version uses a simple `true`/`false` value to determine if we should trigger more calls instead of clearing the timeout and cancelling previous calls. Now the first call to the throttled function tees up the call, and the subsequent calls are ignored until the API call is complete.\n\n## How to write a throttle in React\n\nLet's apply this same functionality to our previous React example.\n\n```jsx react-live use-render\n// just an async helper\nfunction fakeAPICall() {\n  return new Promise(resolve => {\n    setTimeout(resolve, 300)\n  })\n}\n\nfunction SearchForm() {\n  const [inputVal, setInputVal] = React.useState(\"\")\n  const [query, setQuery] = React.useState(\"\")\n  const inputRef = React.useRef(\"\")\n  const [callCount, setCallCount] = React.useState(0)\n  const makingCall = React.useRef(false)\n\n  function handleChange(e) {\n    setInputVal(e.target.value)\n    // mimic the value so we can access\n    // the latest value in our API call\n    inputRef.current = e.target.value\n  }\n\n  React.useEffect(() => {\n    // if there's no value or we've already triggered a call\n    // prevent further calls\n    if (!inputVal.trim() || makingCall.current) return\n    makingCall.current = true\n    setTimeout(() => {\n      makingCall.current = false\n      // again, this setQuery is just so I can\n      // render the query below.\n      // if this API call were real, we'd probably\n      // pass the query into the API call function\n      setQuery(inputRef.current)\n      fakeAPICall()\n      .then(() => {\n        setCallCount(callCount => callCount + 1)\n      })\n    }, 800)\n  }, [inputVal])\n\n  return (\n    <div>\n      <h2>Type in this Box ⬇️</h2>\n      <input onChange={handleChange} value={inputVal}/>\n      <p>Current Data: {inputVal}</p>\n      <p>Query Sent: {query}</p>\n      <p>Calls Done: {callCount}</p>\n    </div>\n  )\n}\n\nrender(SearchForm)\n```\n\nSuccess! Now as the user types, every 800ms we make a call for an autocomplete suggestion. This means **more API calls, but better user experience**, at least in the case of our search autocomplete example.\n\n## Parting Thoughts\n\nSo there you have it: throttling and debounce functions in JS and React.\n\nBut would you ever implement this yourself in real life?\n\nSure! If you just needed simple functionality like this, you could absolutely manage your own debounce logic/helpers in your app. However, there's no shame in pulling in Lodash and using the [debounce](https://lodash.com/docs/4.17.15#debounce) or [throttle](https://lodash.com/docs/4.17.15#throttle) functions that they've implemented.\n\nI find it fun to try and implement my own solutions, and I think it's worth the mental gymnastics to give this stuff a shot in your own code every once in a while. But don't be fooled, nobody will judge you if you reach for a third-party solution!","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/how-to-debounce/index.md"}},"frontmatter":{"title":"Front-end Fisticuffs: Angular vs React vs Vue in 2019","date":"2019-10-05T10:00:00-0400"}}},"staticQueryHashes":["2836739900","4250957540"],"slicesMap":{}}