{"componentChunkName":"component---src-templates-blog-post-js-content-file-path-home-lee-dev-side-projects-blog-content-blog-how-to-learn-anything-index-md","path":"/how-to-learn-anything/","result":{"data":{"site":{"siteMetadata":{"title":"Strings and Things","author":"Lee Warrick","siteUrl":"https://leewarrick.com/blog"}},"mdx":{"id":"b2d2c140-a941-5664-8ee5-015d18d9ea8d","excerpt":"Learning to code something new can be a painful process. We inevitably get stuck or frustrated as we stumble through new concepts and ideas. I’ve learned some hard concepts as a…","frontmatter":{"title":"Learn to Code Anything in 6 Steps","date":"August 18, 2019"},"body":"\nLearning to code something new can be a painful process. We inevitably get stuck or frustrated as we stumble through new concepts and ideas.\n\nI've learned some hard concepts as a programmer. I've started from scratch in a new language as well as struggled through difficult concepts in an area I'm already comfortable in.\n\nWorking through those challenges has taught me that there's a process to learning to program in a different language or ecosystem. There's a pattern that emerges.\n\nIt's a little like the [five stages of grief](https://psychcentral.com/lib/the-5-stages-of-loss-and-grief/); some people are in different spots or skip steps, but everyone struggles through roughly the same process.\n\n## 1. Exposure to a New Topic\n\n![Photo by Aarón Blanco Tejedor of mural of man in pain](./pain.jpg)\n\nWhen you're first introduced to a completely new concept, it can be overwhelming.\n\nHandlebars templating stopped me dead in my tracks when I was in a code bootcamp.\n\nMy brain hurt. It was difficult to comprehend this concept, and my body was physically telling me to give up. I found it hard to read about, and I didn't want to listen in class or do the examples. When it came time to do the homework, I had to force myself to sit down and do it.\n\nEventually though, I got the hang of handlebars.\n\nIt took me a long time to realize and find comfort in the fact that this feeling of despair when facing a new, challenging task is temporary. It goes away with time and patience.\n\nWhen you find yourself faced with an overwhelming task or topic, think of yourself like a sculptor. A sculptor can't produce a large piece in an afternoon with a sledgehammer; she has to chisel away slowly to transform the unforgiving rock into art. Hard topics are boulders we try to sculpt into artful understanding slowly over time.\n\nYou need rest, patience, and persistence to learn what at first feels insurmountable.\n\n## 2. Developing a High-level Understanding\n\nMany tutorials and guides zero in on the syntax and finite steps required to accomplish something. This is great if you're a veteran and well-versed in the subject matter.\n\nSo as a guitarist I might watch a 10 minute video and walk away with,\n\n> _\"Ah, so one major pentatonic scale cannot be applied universally to a chord progression. To sound good I have  to match the scale to the specific chord being played._\n\n> _I can accomplish that by using CAGED patterns to match  up with the chords in a progression.\"_\n\nAnd I get it, but I've played guitar for about 20 years. If you're not a guitarist or not familiar with basic music theory, that tip is gibberish to you.\n\nLooking back at the handlebars example, I had to come to grips with a lot of foreign concepts.\n\nI had to understand browsers, http, servers, databases, and client-side vs server-side rendering. I also had to learn what node and npm are, what package managers are, and how to work with modules in node.\n\nI had to understand all of these things to understand the problem that handlebars was created to solve. Once I understood those things, it was easier to focus on handlebars itself, as opposed to the ecosystem it lives in.\n\nIf you find yourself completely lost on a concept, ask yourself:\n\n_\"Do I not understand this because it is complex, or do I not understand this because I don't understand the things that surround it?\"_\n\nThere are many times I've run up against this:\n\n* PassportJS - I didn't know how auth worked, how sessions worked, or how/what OAuth was, so passport was wizardry.\n* Docker - I didn't know what a virtual machine was or why it was useful, therefore didn't understand containers.\n* AWS - I didn't understand what \"cloud architecture\" was, so I didn't understand what it meant to deploy code in the cloud.\n\nSeeking out high-level explanations for those topics and understanding them first was key to allowing me to learn how to use those tools.\n\n## 3. Learning the Workflow\n\nWith a new coding skill usually comes a new workflow.\n\nYou're going to have to spend time figuring out how to edit and run your code, how to use other people's code, and what tooling fits your use case.\n\nThis is often a **boring**, ***miserable*** task.\n\nTo give an example, I've recently been learning Python. I immediately had questions:\n\n1. Which version should I install, 2 or 3?\n1. Can I edit and run Python with VSCode?\n1. What the heck is a REPL?\n1. How do I manage dependencies? Why do they install globally instead of locally by default?\n1. What are virtual environments?\n1. What is a Jupyter Notebook?\n1. How do I run a Jupyter notebook file? _...Oh, hmmm. It comes with Anaconda_\n1. What is anaconda?\n1. Ananconda COMES with a Python installation!? 😫\n\nThen I had to go back to step 2 and work through most of the same questions with conda 🤦‍\n\nA lot tutorial makers and authors skip these crucial tidbits. Whether this is because they don't think their audience needs to be told the basics, or because they want to skip to the 🔥 **hot tips** 🔥, I couldn't say.\n\nWhat I *can* say is that if you don't need the handholding, it's easy to skim further or skip that part of a tutorial. If you *do* need that extra instruction and it isn't there, you're now lost.\n\nPersonally, I really appreciate whenever someone takes the time to build the audience up to a topic and provides some clear, concise steps to follow to get up and running. It's a huge time-saver and let's me get right into the part I enjoy, which is coding.\n\nSo do your research and try to stay motivated while you're working though this part. It's easy to say, _\"Ugh, forget it, I'll figure out npm another day\"_, and then give up on learning Node.\n\nHowever, once you get past this boring part of the process, you can start to learn the fun parts. 🦄\n\n**NOTE:** If you're looking for a blog post topic, this is a great start. I **guarantee** that the workflow knowledge you take for granted is crucial to a novice's continued learning out there. You probably know more than you think you do, so share it.\n\n## 4. Defining a Small, Attainable Goal\n\n![Photo by Kelly Sikkema of a child building a rocket ship out of legos](./lego.jpg)\n\nOnce you've got a good workflow and can actually execute the code you're writing, it's time to figure out something to build.\n\nThis seems obvious, but it's actually a crucial step.\n\nYou need to scope yourself to something achieveable, but also useful and fun to build. Something that will challenge you, but not so much that you give up.\n\nIf you're learning web development, you don't want to start out trying to build a facebook clone. You're going to be sent down so many rabbit holes (servers, databases, react, etc) you'll never get anything accomplished.\n\nAs a beginner, you probably want to stick to HTML and just build a basic site. If you have a little knowledge, maybe use HTML and CSS to make a site with a nice layout and design. If that's too easy, maybe add in some interactivity with JavaScript.\n\nAgain, this seems simple, but can be devilishly challenging if you're entering a new area or subject. How do you know what's too complex? What's actually useful to learn?\n\nYou have to spend some time figuring out what your actual goals are for learning this new skill, then work backwards. What would you like to be able to build? What will you need to learn to build it? How can you practice those things?\n\nAs a guitarist, I started taking lessons as a young adult after about ten years of study. At that point I knew about scales, chords, how to play a song, etc. I knew all the basics.\n\nI sat down across from my new teacher one night and he asked me, _\"What would you like to learn?\"_\n\nI had no idea. He didn't either. How could he teach me?\n\nAvoiding the creation of clearly-defined goals often leads to a lot of wasted time.\n\n## 5. Putting in the Work\n\nCoding is hard. Building useful things out of code is harder. Even veteran programmers struggle:\n\n>20+ yrs dev exp, 8 books w/ 100k+ copies sold, 300k+ hours watched of my videos, 4k+ taught in person...\n\n>And you know what? I still struggle to get my code to work and it's still a tedious slog. And my code still confuses me the next day.\n\n>You're not alone in these struggles. - [Kyle Simpson](https://twitter.com/getify/status/972495616600293381)\n\nBuilding that first project is going to be tough. You're going to hit some snags, discover you need to dive into some new topics, and probably end up on stack overflow more than once.\n\nBut you're going to learn a lot of things if you get it done.\n\nThe important thing here is to realize that you need to keep at it, and that if you planned correctly in the previous step, there's an end in sight.\n\nJust remember that finishing that first project and realizing you've built something with an entirely new skill, language, or framework is...\n\n✨🎵🕊**G L O R I O U S**🕊🎵✨\n\n## 6. Maintaining Momentum\n\n![Photo by Brian Erickson of running on a mountain pass](./hiking.jpg)\n\nOnce you have that first win, it's time to get another under your belt.\n\n😮 *So soon?*, you say.\n\n**Yes.** 😐\n\nGo back to the previous two steps and start figuring out what you can build next that will get you further toward your goal. (You _do_ have a goal, right?)\n\nFigure out how you can expand what you've learned and take those new skills into the next project. Build something bigger or completely different that's going to teach you a little bit more about how to reach that end goal.\n\nThen build it. Build more things. **Keep learning.**\n\nWe signed up for this life when we decided to become developers. It's the bargain we made for a great job with widely-applicable skills. We accepted that we would be constantly learning and growing, that we would continue to hone our skills in an ever-changing industry.\n\nThe good news is that this process becomes easier. You begin to expect it.\n\n_\"Gosh, this is hard. This hurts my brain\"_\n\nBecomes: _\"Ah, yes. This will take some time to learn.\"_\n\n_\"Ugh, where do I start?\"_\n\nBecomes: _\"Hmm, better figure out a workflow.\"_\n\nAnd so on.\n\nI've been through these steps myself many times as a developer. You'll get faster if you keep going."}},"pageContext":{"slug":"/how-to-learn-anything/","previous":{"id":"09473422-f4ba-5f4c-a3bc-eb0df63d595b","fields":{"slug":"/debugging-javascript/"},"frontmatter":{"title":"How to Debug JavaScript Quickly"},"body":"\n![Photo of fire ants](./fireants.jpg)\n\nIf you've ever thought, *\"meh... I'm fine with* `console.log`*, learning to debug is as painful as rolling in fire ants\"*, this article is for you!\n\n## Console Confessional\n\nMe and `console.log` are like this: 🤞. It's been my go-to solution for all things weirdJS from the start: `this`, de-nesting API call data, `async` things, timeouts, etc.\n\nHowever, once upon a time, my bootcamp teacher showed us debugging briefly (thank you James), and I thought, *\"This is... **really cool**\"*.\n\nYou could see **everything** happening inside your code while it's executing--how useful!\n\nUnfortunately I soon got into node-land and then front-end framework valley. I quickly gave up on debugging. (Configure VS Code debugger anyone? Webpack? *...No thanks.*)\n\nAnd that was 👌 for a while. I'd hit an issue, fire off a `console.log` or three, solve it, and go back through the code to delete them. Sometimes issues would require many more console.logs. Sometimes my boss would giggle when one slipped into a Pull Request; I'd feel bad, delete/re-push, and go back to `console.log`-ing.\n\nI've probably typed `console.log` more than any other syntax, word, or punctuation in my time coding JavaScript. I've typed it so much I've thought about installing an [extension](https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log) to save myself keystrokes.\n\nThere's also a ton of useful `console.log` tricks out there. I've used `console.error`, `console.warn`, `console.table`, destructring, used CSS in logs, and [many more](https://kylegill.com/blog/2018-11-20-commanding-the-javascript-console/index).\n\nBut what happens when that's just not enough? What if you're tired of typing *\"c o n s o l e . l o g\"* everytime you hit a snag?\n\n## console.gone\n\nAt work recently, we realized our production code had a memory leak. Our wonderful production code that was compiled and transpiled with webpack, stuffed into a docker container, and running in a linux environment somewhere in AWS land.\n\nWhere was my wonderful `console.log` in all that mess?\n\nGone, friend. Gone.\n\nLong story short, we got deep into Chrome's performance tooling (a topic for another article?). Through that, **I finally found a quick path to connecting node/webpack and chrome dev tools.**\n\nSince then I've found myself using more `debugger` statements in my day-to-day.\n\n## Basic Debugging with Chrome\n\nOK. For anyone that's unfamiliar, first we're going to start with the basics. How do you actually open the chrome debugger?\n\n1. First, **open dev tools on this site.**\n    - Press f12, right-click and select \"inspect\", press ctrl-shift-i on Windows or cmd-clover-unnatural-hand-movement on Mac... just get the dev tools open however you normally do.\n1. **Add a** `debugger` **statement to your code**. (I've already done this below)\n    - Chrome will pick up on any debugger statements, pause the code, and open the debugging tools while code is running **if (and only if)** dev tools are already open.\n1. **Run the code!**\n    * Click ↗↘ or ➡ to step through the code line by line\n    * Click the ▶ to resume the script\n\n\n```js js-live\nfunction doStuff(thing) {\n    thing = thing / 4 * -1\n    thing = Math.pow(thing, 1)\n    const thing2 = Math.trunc(thing) + 5\n    debugger // <-- this makes the magic happen\n    return thing2\n}\n\nconst thingamajig = Math.random()\nconst result = doStuff(thingamajig)\nconsole.log(\"And the result is...\" + result)\n```\n\n#### Pretty cool right? 😎👍\n\nNotice how the debugger prints the values of the code as you step through it. Very very nice! This can save you many many keystrokes if you're trying to dig down into an object.\n\nWhy don't we check out some more basic debugging examples?\n\n## Checking out variable values\n\nYou can hover over variables in the debugger and see their value as you step through the code.\n\nFirst let's look at some HTML:\n\n```html html-live\n<div id=\"magical\">Boooooring</div>\n```\n\nNow let's watch some JavaScript spice things up in the html above. Try stepping through to the \"awesome\" variable, then hovering over it to see all the magical properties and methods a DOM object has attached to it.\n\n(Don't forget to use ↗↘ to step through, and ▶ when you're finished)\n\n```js js-live\ndebugger // Let's watch the magic happen~ ✨👏\nconst div = document.getElementById('magical')\nconst awesome = document.createElement('marquee')\n//I'm I-remember-marquee-tags years old. 🤫\nawesome.innerHTML = '<h2>✨🚀~MAGICAL~ 🦄🌈</h2>'\ndiv.textContent = \"\" //boring no more...\ndiv.appendChild(awesome)\n```\n## Nested Properties\n\nTrying to find a nested property on an object? Debugging can help!\n\nLet's try and get... oh, let's say the level of sweetness on this meatball object below.\n\nIt would take me a *lot* of `console.log`s to finally drill down to that... but there's a better way!\n\nDebug, Hover the variable, then expand the properties until you find the key you're looking for then **Right-Click** and select **Copy Property Path**\n\n```js js-live\nconst meatball = {\n    ingredients: {\n        spices: [\"Oregano\", \"Italian\", \"Mystery\"],\n        meats: {\n            beef: {\n                freeRange: true,\n                happy: \"yes, until it was time to make meatballs\",\n            }\n        },\n    },\n    flavors: [\n        {\n            umami: {\n                level: \"???\"\n            }\n        },\n        {\n            savory: {\n                level: 8\n            }\n        },\n        {\n            sweet: {\n                level: Math.floor(Math.random() * 9)\n            }\n        },\n    ]\n}\n//look up where we assign the meatball variable\n//hover over meatball, and start opening up properties until you get to sweetness\n//then right-click on \"level\" and choose \"copy property path\"\n//paste it after meatball below:\ndebugger\nconsole.log(\"Mama makes a meatball that's \" + /*meatball.<paste here and uncomment>*/ + \"/9 in sweetness\")\n//don't forget to erase the debugger when you run it!\n```\n\n## Blackboxing 📦 and React ⚛\n\nWant to debug React? No problem! You can use the same workflow as above, even when using a framework like React or Vue. Just drop a **debugger** statement in, **open dev tools**, and **run** it!\n\n#### A small catch\n\nOK, there's one minor note I have to make. We want to debug, *our* code, and not React's code, right? However, the debugger will step through **all** of the code that's running, not just yours. So you might find yourself in some weird React code as you're stepping through your component.\n\nNo sweat! There's ways to handle that. Try these tips:\n\n* Lost in a weird script? Click ⬆ to \"Step out\" of a function and hopefully back up to a recognizeable script.\n* Still lost? Look at the **Call Stack** Panel. The scripts here are the ones you're currently stepping through. In some weird script? **Right-click** and select **\"Blackbox script\"** to skip debugging the script you're in.\n\nTry it below!\n\n```js react-live\nfunction Counter() {\n    const [count, setCount] = React.useState(0)\n    function countUp(count) {\n        debugger\n        const newCount = count + 1\n        setCount(newCount)\n    }\n    return (\n        <div>\n            <h2>Count is {count}</h2>\n            <button onClick={() => countUp(count)}>Increment</button>\n        </div>\n    )\n}\n```\n\n## But what about Node?\n\nAh yes... the eternal question. How does one debug NodeJS?\n\nYou can use [VS Code](https://code.visualstudio.com/docs/nodejs/nodejs-debugging), you can use a neat tool called [NDB](https://github.com/GoogleChromeLabs/ndb), but I say we just use chrome and move on with our lives.\n\n(Note: I personally always confuse \"ndb\" and \"nbd\" as in \"No Big Deal\", instead of \"node debugger\", and it makes me nuts. I **always** mistype it, I can't google it, and so it makes a fool of me everytime I try to use it.)\n\n1. Open chrome and type `chrome://inspect`\n1. Then start your app with the `--inspect` flag.\n    * Ex: `node --inspect server.js`\n    * You should see something like: `Debugger listening on ws://127.0.0.1:9229/dfcsd4c63-123e-234-adsd-123lkdfgk`\n1. Go back to Chrome, you should see \"Remote Target\" and a file name/path to your file, plus a little `inspect` link. Click it! This should pop open a separate dev tools window.\n1. Add some debuggers to your code and go to town!\n\n**Note** You may have to close and re-open chrome's debug pane for your app if it doesn't detect your debugger statement on the first pass. I'm also on the latest version of chrome, and you should be too 😉\n\n## Parting Thoughts\n\nDebugging isn't always my first-line of defense against weird JavaScript, but I use it a lot more often now that I've got a decent workflow for it.\n\nHow do you debug code? Hit me up on [twitter](https://twitter.com/leewarrickjr) and let me know!","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/debugging-javascript/index.md"}},"next":{"id":"810cd181-3f81-5c76-b5ff-e5780af37023","fields":{"slug":"/the-courage-to-code/"},"frontmatter":{"title":"Finding the Courage to Code"},"body":"\n![Photo of Lonely Winding Road Sign by Fabien Bazanegue](./roadsign.jpg)\n\nOnce I overheard someone describe a kid they met that knew he wanted to be a podiatrist 👣👨‍⚕️ at age 6. This story is not about that person.\n\nMy life has been rife with indecision. In fact, a good friend once described me as the _\"male Barbie of careers\"_. Sure, I eventually found my way to coding, but it was a long, winding road.\n\n## The Early Years\n\nAs a kid, I always thought I would like to do ..._stuff_ with computers. I wasn't quite sure what that stuff was, but I wanted to do it.\n\nWhat I _did_ know, was that programming seemed dense and mystical. Actually I didn't even really know what programming was. I basically thought it was like the movie \"Hackers\".\n\nIn elementary and middle school, my only exposure to computers was through playing Math Blaster, Oregon Trail, and a Super Mario typing game. In high school I took an introductory computer course (basically a Microsoft A+ certification class), and a web design class where we learned a little HTML.\n\nWriting math formula scripts on my graphing calculator was as close as I got to really coding something in grade school. Those miniature programs were silly, but also _exciting_.\n\n## Clueless in College\n\nThe smart kids in my high school seemed to be all applying and getting accepted to college. So I blindly followed suit.\n\nI applied and was accepted to the University of Florida as a chemical engineering student. I stuck with it for about a month before catching wind of what those folks actually do, then changed majors to Computer Science.\n\nI was going for it folks, I was going to pursue my **dream**.\n\nThe first day of my intro to computer science class went like this:\n\nA lanky, disheveled man strode into the auditorium fifteen minutes late. He stood at the podium and addressed the class:\n\n_\"A little news in the life of Pete. I just found out my_ ***former*** _best friend has been sleeping with my ex-wife.\"_\n\nPete then proceeded to teach us binary, hexidecimal, and other very low-level computer science concepts. For homework, we had to solve small, boring puzzles with Java like _Given a number N, print a triangle of #'s to the screen that is N wide and N tall._\n\nI stubbornly worked through those assignments. I coded in notepad.exe and ran my code with the windows command line. I didn't know what an IDE was and I didn't understand how this was going to add up to writing actual software.\n\nIn class, there was one student up front that nodded along with everything the instructor said, answered every question, and giggled at every Java idiosyncracy that arose during the lecture.\n\nI _hated_ that student. I hated him because I wished I ***was*** him. How did he know so much in an intro class? I felt so incredibly lost by comparison.\n\nI spent two semesters suffering through Java. Our final project of the second semester was hangman. I finished it while having absolutely no idea what I was doing.\n\nI thought, _\"If I've spent a year learning to code, and this is how far I've come, how will I ever make anything useful?\"_\n\n## Succombing to Self-doubt\n\n![Photo of a man walking through the desert by Dan Grinwis](./desert.jpg)\n\nI saw myself as hopelessly outmatched. I convinced myself that coding was for child prodigies and geniuses only seen on TV. I did all the mental gymnastics required to convince myself that I was the problem.\n\nI switched majors again and got my degree in Japanese language.（こんにちは皆さん！）But I doubted my language skills too. In my mind, I couldn't possibly be good enough to work as a translator or interpreter.\n\nSo I went back to school to be a firefighter. I reasoned that my father did it for 30 years, had a great retirement plan, and seemed to enjoy the job, so why shouldn't I do the same?\n\nI somehow made it through fire school. Then I became an EMT and a Paramedic. I got hired. Soon I was keeping the roads hot with my lights and sirens blaring, kicking down doors and saving lives!\n\nExcept it wasn't like that at all. Most 911 calls are not emergencies--most are monotonous and mundane. And of the calls I ran, the 10% that _were_ true emergencies still haunt me from time to time.\n\nAnd the pay was awful. I was exposed to a lot of chemicals, disease, and stress for about $14 an hour.\n\nI convinced myself I needed to do better. I went back to school and became a registered nurse, and worked in intensive care and the emergency room.\n\nMy situation had improved: now I was being exposed to a lot of chemicals, disease, and stress for about $25 an hour.\n\n## Changing Course\n\nAt some point I found myself looking back on my life and wondering how I ended up so far from my dreams. As a kid, I wanted to make things. I wanted to code.\n\nSometimes I'd find myself sitting at the nurse's station absent-mindedly clicking through Codecademy or freeCodeCamp tutorials.\n\nThen I discovered coding bootcamps.\n\nThere's a lot of noise out there about bootcamps. You'd be forgiven for thinking that they're the ponzi scheme of our time after doing a little research on the internet.\n\nThe risk didn't matter though. I saw it as an opportunity to escape. I signed up.\n\nGoing to code bootcamp turned out to be a transformative experience for a few reasons:\n\n1. **I was surrounded by career changers.** When we introduced ourselves on the first day I found myself in the company of marketing executives, fast-food workers, database administrators, school teachers, and even computer science undergrads.\n1. **Everyone struggled to get their code to run.** Sure, some were better than others, but absolutely everyone had difficulties in class and doing the homework.\n1. **We built fun things.** Not once did I have to print a triangle with `for` loops. We built personal websites, games, toy apps, and more. I could feel myself making progress. I actually enjoyed learning.\n1. **We were encouraged to find our own answers.** From day one we were told to \"google it.\" It was our mantra. We weren't expected to know everything, but we had to be able to search for the answers.\n\nSo there I was with like-minded, indecisive people that were struggling to learn, having fun building things, and just as clueless as I was. It was so radically different from that college class I had taken fifteen years ago. It was invigorating.\n\n## Getting Hired as a Developer\n\n![Photo of man climbing a mountain in Yosemite by Billy Onjea](./climbing.jpg)\n\nI worked very, very hard in class. I knew that this was my chance to change course. I took it very seriously.\n\nI also knew going in that getting a job was not guaranteed or even likely.\n\nMost employers don't like junior developers, and they like bootcamp grads even less. They view juniors as a liability not worth the money they'll save on a lower salary.\n\nI needed to stand out in a positive way. I needed to convince someone to give me a chance despite my inexperience.\n\nThe bootcamp did not bless me with a great resume nor a great portfolio, and as a brand new developer living an hour outside of town, I had no network.\n\nSo I went to meetups. I got on a developer slack channel in town and asked a boatload of stupid questions. I worked tirelessly on my resume and portfolio, soliciting feedback from anyone willing to give it. And all the while I machine-gunned my resume to every developer job on indeed that I was remotely qualified for.\n\nEventually I saw a job-listing on slack. I messaged the poster, sent my resume and portfolio, and setup an interview.\n\nIn that interview, I was calm and collected. I made them laugh and answered their questions. My past careers had taught me to maintain my composure and stay calm. One of my interviewers even remarked how it would be great to have a nurse on the team.\n\nI got the job. I quit nursing and became a fulltime developer.\n\n## Words of Wisdom\n\nHere's what I wish someone had told me many years ago at the start of this journey:\n\n* **Stop doubting yourself.** With enough patience and effort, you can learn anything.\n\n* **Do the things that make you happy** and make you feel fulfilled. Don't do something because it's \"a good job\" or \"a steady paycheck\".\n\n* **Find comfort in the fact that you're not alone.** We're all making this up as we go along. [Even our mentors struggle to get their code to work](https://twitter.com/getify/status/972495616600293381). Nobody has all the answers.\n\n* **Don't ever forget where you came from.** Remember the things that confused, infuriated, and discouraged you. It will help you remember how far you've come, keep you humble, and remind you to be kind to those following in your footsteps.\n\nLearn from my mistakes, then pay it forward.","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/the-courage-to-code/index.md"}},"frontmatter":{"title":"Learn to Code Anything in 6 Steps","date":"2019-08-18T19:00:00-0400"}}},"staticQueryHashes":["2836739900","4250957540"],"slicesMap":{}}