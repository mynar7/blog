{"componentChunkName":"component---src-templates-blog-post-js-content-file-path-home-lee-dev-side-projects-blog-content-blog-the-courage-to-code-index-md","path":"/the-courage-to-code/","result":{"data":{"site":{"siteMetadata":{"title":"Strings and Things","author":"Lee Warrick","siteUrl":"https://leewarrick.com/blog"}},"mdx":{"id":"810cd181-3f81-5c76-b5ff-e5780af37023","excerpt":"Once I overheard someone describe a kid they met that knew he wanted to be a podiatrist üë£üë®‚Äç‚öïÔ∏è at age 6. This story is not about that person. My life has been rife with‚Ä¶","frontmatter":{"title":"Finding the Courage to Code","date":"August 25, 2019"},"body":"\n![Photo of Lonely Winding Road Sign by Fabien Bazanegue](./roadsign.jpg)\n\nOnce I overheard someone describe a kid they met that knew he wanted to be a podiatrist üë£üë®‚Äç‚öïÔ∏è at age 6. This story is not about that person.\n\nMy life has been rife with indecision. In fact, a good friend once described me as the _\"male Barbie of careers\"_. Sure, I eventually found my way to coding, but it was a long, winding road.\n\n## The Early Years\n\nAs a kid, I always thought I would like to do ..._stuff_ with computers. I wasn't quite sure what that stuff was, but I wanted to do it.\n\nWhat I _did_ know, was that programming seemed dense and mystical. Actually I didn't even really know what programming was. I basically thought it was like the movie \"Hackers\".\n\nIn elementary and middle school, my only exposure to computers was through playing Math Blaster, Oregon Trail, and a Super Mario typing game. In high school I took an introductory computer course (basically a Microsoft A+ certification class), and a web design class where we learned a little HTML.\n\nWriting math formula scripts on my graphing calculator was as close as I got to really coding something in grade school. Those miniature programs were silly, but also _exciting_.\n\n## Clueless in College\n\nThe smart kids in my high school seemed to be all applying and getting accepted to college. So I blindly followed suit.\n\nI applied and was accepted to the University of Florida as a chemical engineering student. I stuck with it for about a month before catching wind of what those folks actually do, then changed majors to Computer Science.\n\nI was going for it folks, I was going to pursue my **dream**.\n\nThe first day of my intro to computer science class went like this:\n\nA lanky, disheveled man strode into the auditorium fifteen minutes late. He stood at the podium and addressed the class:\n\n_\"A little news in the life of Pete. I just found out my_ ***former*** _best friend has been sleeping with my ex-wife.\"_\n\nPete then proceeded to teach us binary, hexidecimal, and other very low-level computer science concepts. For homework, we had to solve small, boring puzzles with Java like _Given a number N, print a triangle of #'s to the screen that is N wide and N tall._\n\nI stubbornly worked through those assignments. I coded in notepad.exe and ran my code with the windows command line. I didn't know what an IDE was and I didn't understand how this was going to add up to writing actual software.\n\nIn class, there was one student up front that nodded along with everything the instructor said, answered every question, and giggled at every Java idiosyncracy that arose during the lecture.\n\nI _hated_ that student. I hated him because I wished I ***was*** him. How did he know so much in an intro class? I felt so incredibly lost by comparison.\n\nI spent two semesters suffering through Java. Our final project of the second semester was hangman. I finished it while having absolutely no idea what I was doing.\n\nI thought, _\"If I've spent a year learning to code, and this is how far I've come, how will I ever make anything useful?\"_\n\n## Succombing to Self-doubt\n\n![Photo of a man walking through the desert by Dan Grinwis](./desert.jpg)\n\nI saw myself as hopelessly outmatched. I convinced myself that coding was for child prodigies and geniuses only seen on TV. I did all the mental gymnastics required to convince myself that I was the problem.\n\nI switched majors again and got my degree in Japanese language.Ôºà„Åì„Çì„Å´„Å°„ÅØÁöÜ„Åï„ÇìÔºÅÔºâBut I doubted my language skills too. In my mind, I couldn't possibly be good enough to work as a translator or interpreter.\n\nSo I went back to school to be a firefighter. I reasoned that my father did it for 30 years, had a great retirement plan, and seemed to enjoy the job, so why shouldn't I do the same?\n\nI somehow made it through fire school. Then I became an EMT and a Paramedic. I got hired. Soon I was keeping the roads hot with my lights and sirens blaring, kicking down doors and saving lives!\n\nExcept it wasn't like that at all. Most 911 calls are not emergencies--most are monotonous and mundane. And of the calls I ran, the 10% that _were_ true emergencies still haunt me from time to time.\n\nAnd the pay was awful. I was exposed to a lot of chemicals, disease, and stress for about $14 an hour.\n\nI convinced myself I needed to do better. I went back to school and became a registered nurse, and worked in intensive care and the emergency room.\n\nMy situation had improved: now I was being exposed to a lot of chemicals, disease, and stress for about $25 an hour.\n\n## Changing Course\n\nAt some point I found myself looking back on my life and wondering how I ended up so far from my dreams. As a kid, I wanted to make things. I wanted to code.\n\nSometimes I'd find myself sitting at the nurse's station absent-mindedly clicking through Codecademy or freeCodeCamp tutorials.\n\nThen I discovered coding bootcamps.\n\nThere's a lot of noise out there about bootcamps. You'd be forgiven for thinking that they're the ponzi scheme of our time after doing a little research on the internet.\n\nThe risk didn't matter though. I saw it as an opportunity to escape. I signed up.\n\nGoing to code bootcamp turned out to be a transformative experience for a few reasons:\n\n1. **I was surrounded by career changers.** When we introduced ourselves on the first day I found myself in the company of marketing executives, fast-food workers, database administrators, school teachers, and even computer science undergrads.\n1. **Everyone struggled to get their code to run.** Sure, some were better than others, but absolutely everyone had difficulties in class and doing the homework.\n1. **We built fun things.** Not once did I have to print a triangle with `for` loops. We built personal websites, games, toy apps, and more. I could feel myself making progress. I actually enjoyed learning.\n1. **We were encouraged to find our own answers.** From day one we were told to \"google it.\" It was our mantra. We weren't expected to know everything, but we had to be able to search for the answers.\n\nSo there I was with like-minded, indecisive people that were struggling to learn, having fun building things, and just as clueless as I was. It was so radically different from that college class I had taken fifteen years ago. It was invigorating.\n\n## Getting Hired as a Developer\n\n![Photo of man climbing a mountain in Yosemite by Billy Onjea](./climbing.jpg)\n\nI worked very, very hard in class. I knew that this was my chance to change course. I took it very seriously.\n\nI also knew going in that getting a job was not guaranteed or even likely.\n\nMost employers don't like junior developers, and they like bootcamp grads even less. They view juniors as a liability not worth the money they'll save on a lower salary.\n\nI needed to stand out in a positive way. I needed to convince someone to give me a chance despite my inexperience.\n\nThe bootcamp did not bless me with a great resume nor a great portfolio, and as a brand new developer living an hour outside of town, I had no network.\n\nSo I went to meetups. I got on a developer slack channel in town and asked a boatload of stupid questions. I worked tirelessly on my resume and portfolio, soliciting feedback from anyone willing to give it. And all the while I machine-gunned my resume to every developer job on indeed that I was remotely qualified for.\n\nEventually I saw a job-listing on slack. I messaged the poster, sent my resume and portfolio, and setup an interview.\n\nIn that interview, I was calm and collected. I made them laugh and answered their questions. My past careers had taught me to maintain my composure and stay calm. One of my interviewers even remarked how it would be great to have a nurse on the team.\n\nI got the job. I quit nursing and became a fulltime developer.\n\n## Words of Wisdom\n\nHere's what I wish someone had told me many years ago at the start of this journey:\n\n* **Stop doubting yourself.** With enough patience and effort, you can learn anything.\n\n* **Do the things that make you happy** and make you feel fulfilled. Don't do something because it's \"a good job\" or \"a steady paycheck\".\n\n* **Find comfort in the fact that you're not alone.** We're all making this up as we go along. [Even our mentors struggle to get their code to work](https://twitter.com/getify/status/972495616600293381). Nobody has all the answers.\n\n* **Don't ever forget where you came from.** Remember the things that confused, infuriated, and discouraged you. It will help you remember how far you've come, keep you humble, and remind you to be kind to those following in your footsteps.\n\nLearn from my mistakes, then pay it forward."}},"pageContext":{"slug":"/the-courage-to-code/","previous":{"id":"b2d2c140-a941-5664-8ee5-015d18d9ea8d","fields":{"slug":"/how-to-learn-anything/"},"frontmatter":{"title":"Learn to Code Anything in 6 Steps"},"body":"\nLearning to code something new can be a painful process. We inevitably get stuck or frustrated as we stumble through new concepts and ideas.\n\nI've learned some hard concepts as a programmer. I've started from scratch in a new language as well as struggled through difficult concepts in an area I'm already comfortable in.\n\nWorking through those challenges has taught me that there's a process to learning to program in a different language or ecosystem. There's a pattern that emerges.\n\nIt's a little like the [five stages of grief](https://psychcentral.com/lib/the-5-stages-of-loss-and-grief/); some people are in different spots or skip steps, but everyone struggles through roughly the same process.\n\n## 1. Exposure to a New Topic\n\n![Photo by Aar√≥n Blanco Tejedor of mural of man in pain](./pain.jpg)\n\nWhen you're first introduced to a completely new concept, it can be overwhelming.\n\nHandlebars templating stopped me dead in my tracks when I was in a code bootcamp.\n\nMy brain hurt. It was difficult to comprehend this concept, and my body was physically telling me to give up. I found it hard to read about, and I didn't want to listen in class or do the examples. When it came time to do the homework, I had to force myself to sit down and do it.\n\nEventually though, I got the hang of handlebars.\n\nIt took me a long time to realize and find comfort in the fact that this feeling of despair when facing a new, challenging task is temporary. It goes away with time and patience.\n\nWhen you find yourself faced with an overwhelming task or topic, think of yourself like a sculptor. A sculptor can't produce a large piece in an afternoon with a sledgehammer; she has to chisel away slowly to transform the unforgiving rock into art. Hard topics are boulders we try to sculpt into artful understanding slowly over time.\n\nYou need rest, patience, and persistence to learn what at first feels insurmountable.\n\n## 2. Developing a High-level Understanding\n\nMany tutorials and guides zero in on the syntax and finite steps required to accomplish something. This is great if you're a veteran and well-versed in the subject matter.\n\nSo as a guitarist I might watch a 10 minute video and walk away with,\n\n> _\"Ah, so one major pentatonic scale cannot be applied universally to a chord progression. To sound good I have  to match the scale to the specific chord being played._\n\n> _I can accomplish that by using CAGED patterns to match  up with the chords in a progression.\"_\n\nAnd I get it, but I've played guitar for about 20 years. If you're not a guitarist or not familiar with basic music theory, that tip is gibberish to you.\n\nLooking back at the handlebars example, I had to come to grips with a lot of foreign concepts.\n\nI had to understand browsers, http, servers, databases, and client-side vs server-side rendering. I also had to learn what node and npm are, what package managers are, and how to work with modules in node.\n\nI had to understand all of these things to understand the problem that handlebars was created to solve. Once I understood those things, it was easier to focus on handlebars itself, as opposed to the ecosystem it lives in.\n\nIf you find yourself completely lost on a concept, ask yourself:\n\n_\"Do I not understand this because it is complex, or do I not understand this because I don't understand the things that surround it?\"_\n\nThere are many times I've run up against this:\n\n* PassportJS - I didn't know how auth worked, how sessions worked, or how/what OAuth was, so passport was wizardry.\n* Docker - I didn't know what a virtual machine was or why it was useful, therefore didn't understand containers.\n* AWS - I didn't understand what \"cloud architecture\" was, so I didn't understand what it meant to deploy code in the cloud.\n\nSeeking out high-level explanations for those topics and understanding them first was key to allowing me to learn how to use those tools.\n\n## 3. Learning the Workflow\n\nWith a new coding skill usually comes a new workflow.\n\nYou're going to have to spend time figuring out how to edit and run your code, how to use other people's code, and what tooling fits your use case.\n\nThis is often a **boring**, ***miserable*** task.\n\nTo give an example, I've recently been learning Python. I immediately had questions:\n\n1. Which version should I install, 2 or 3?\n1. Can I edit and run Python with VSCode?\n1. What the heck is a REPL?\n1. How do I manage dependencies? Why do they install globally instead of locally by default?\n1. What are virtual environments?\n1. What is a Jupyter Notebook?\n1. How do I run a Jupyter notebook file? _...Oh, hmmm. It comes with Anaconda_\n1. What is anaconda?\n1. Ananconda COMES with a Python installation!? üò´\n\nThen I had to go back to step 2 and work through most of the same questions with conda ü§¶‚Äç\n\nA lot tutorial makers and authors skip these crucial tidbits. Whether this is because they don't think their audience needs to be told the basics, or because they want to skip to the üî• **hot tips** üî•, I couldn't say.\n\nWhat I *can* say is that if you don't need the handholding, it's easy to skim further or skip that part of a tutorial. If you *do* need that extra instruction and it isn't there, you're now lost.\n\nPersonally, I really appreciate whenever someone takes the time to build the audience up to a topic and provides some clear, concise steps to follow to get up and running. It's a huge time-saver and let's me get right into the part I enjoy, which is coding.\n\nSo do your research and try to stay motivated while you're working though this part. It's easy to say, _\"Ugh, forget it, I'll figure out npm another day\"_, and then give up on learning Node.\n\nHowever, once you get past this boring part of the process, you can start to learn the fun parts. ü¶Ñ\n\n**NOTE:** If you're looking for a blog post topic, this is a great start. I **guarantee** that the workflow knowledge you take for granted is crucial to a novice's continued learning out there. You probably know more than you think you do, so share it.\n\n## 4. Defining a Small, Attainable Goal\n\n![Photo by Kelly Sikkema of a child building a rocket ship out of legos](./lego.jpg)\n\nOnce you've got a good workflow and can actually execute the code you're writing, it's time to figure out something to build.\n\nThis seems obvious, but it's actually a crucial step.\n\nYou need to scope yourself to something achieveable, but also useful and fun to build. Something that will challenge you, but not so much that you give up.\n\nIf you're learning web development, you don't want to start out trying to build a facebook clone. You're going to be sent down so many rabbit holes (servers, databases, react, etc) you'll never get anything accomplished.\n\nAs a beginner, you probably want to stick to HTML and just build a basic site. If you have a little knowledge, maybe use HTML and CSS to make a site with a nice layout and design. If that's too easy, maybe add in some interactivity with JavaScript.\n\nAgain, this seems simple, but can be devilishly challenging if you're entering a new area or subject. How do you know what's too complex? What's actually useful to learn?\n\nYou have to spend some time figuring out what your actual goals are for learning this new skill, then work backwards. What would you like to be able to build? What will you need to learn to build it? How can you practice those things?\n\nAs a guitarist, I started taking lessons as a young adult after about ten years of study. At that point I knew about scales, chords, how to play a song, etc. I knew all the basics.\n\nI sat down across from my new teacher one night and he asked me, _\"What would you like to learn?\"_\n\nI had no idea. He didn't either. How could he teach me?\n\nAvoiding the creation of clearly-defined goals often leads to a lot of wasted time.\n\n## 5. Putting in the Work\n\nCoding is hard. Building useful things out of code is harder. Even veteran programmers struggle:\n\n>20+ yrs dev exp, 8 books w/ 100k+ copies sold, 300k+ hours watched of my videos, 4k+ taught in person...\n\n>And you know what? I still struggle to get my code to work and it's still a tedious slog. And my code still confuses me the next day.\n\n>You're not alone in these struggles. - [Kyle Simpson](https://twitter.com/getify/status/972495616600293381)\n\nBuilding that first project is going to be tough. You're going to hit some snags, discover you need to dive into some new topics, and probably end up on stack overflow more than once.\n\nBut you're going to learn a lot of things if you get it done.\n\nThe important thing here is to realize that you need to keep at it, and that if you planned correctly in the previous step, there's an end in sight.\n\nJust remember that finishing that first project and realizing you've built something with an entirely new skill, language, or framework is...\n\n‚ú®üéµüïä**G L O R I O U S**üïäüéµ‚ú®\n\n## 6. Maintaining Momentum\n\n![Photo by Brian Erickson of running on a mountain pass](./hiking.jpg)\n\nOnce you have that first win, it's time to get another under your belt.\n\nüòÆ *So soon?*, you say.\n\n**Yes.** üòê\n\nGo back to the previous two steps and start figuring out what you can build next that will get you further toward your goal. (You _do_ have a goal, right?)\n\nFigure out how you can expand what you've learned and take those new skills into the next project. Build something bigger or completely different that's going to teach you a little bit more about how to reach that end goal.\n\nThen build it. Build more things. **Keep learning.**\n\nWe signed up for this life when we decided to become developers. It's the bargain we made for a great job with widely-applicable skills. We accepted that we would be constantly learning and growing, that we would continue to hone our skills in an ever-changing industry.\n\nThe good news is that this process becomes easier. You begin to expect it.\n\n_\"Gosh, this is hard. This hurts my brain\"_\n\nBecomes: _\"Ah, yes. This will take some time to learn.\"_\n\n_\"Ugh, where do I start?\"_\n\nBecomes: _\"Hmm, better figure out a workflow.\"_\n\nAnd so on.\n\nI've been through these steps myself many times as a developer. You'll get faster if you keep going.","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/how-to-learn-anything/index.md"}},"next":{"id":"3622e958-8330-546a-959a-9927cd86fd2a","fields":{"slug":"/staying-sane-with-css/"},"frontmatter":{"title":"Staying Sane while Organizing CSS"},"body":"\n![Mug with 'CSS is Awesome' written on it, but 'Awesome' overflows the border of the text](./mugcss.jpg)\n\nIn my time as a front-end developer, I've seen and heard a lot of gripes about CSS.\n\nI often see people reach for a CSS framework like Bootstrap, Materialize, Bulma, Tailwind, etc. to avoid writing CSS. While CSS frameworks can be great accelerators, they often require solid CSS skills to wield them effectively. That is to say, if you're not very good at CSS, you're probably not going to be that great using a CSS framework either.\n\nFramework or not, when hitting a snag people tend to throw more and more lines of CSS at the problem until they get a working solution. In essence, they're following the \"can't tie a knot? Tie a lot!\" method of development.\n\nUnfortunately a massive, improper knot is unreliable and weakens the rope.\n\nSo don't be the \"see what sticks\" developer. I'm going to show you how you can add a little organization to your stylesheets that will get you up and running quickly without pulling your hair out.\n\n## Preparing for Success: Reset vs Normalize\n\nHTML elements come with their own default styling. Unfortunately, much of it is flat-out ugly (Looking at you, form input elements).\n\nTo make things worse, browsers _still_ have not reached 100% parity on that default styling. This means certain elements appear differently on different browsers.\n\nYou may even end up overriding that default styling over and over again in your stylesheet to achieve the look or positioning you want. Don't fall into this trap. Address the default styles once.\n\nThat said, there are two powerful, pre-built solutions for taming default styles: Reset and Normalize.\n\n**Note**: Don't forget to add these **before** all other styles--remember the cascade!\n\n### CSS Reset\n\n[CSS Reset](https://cssreset.com/scripts/eric-meyer-reset-css/) is essentially the nuclear option. It wipes out all the styles from all of the elements, more or less making them differ in name only. `<h1>`'s look like `<p>` tags, for example.\n\nThis is a valid solution if you need to start from scratch, but you typically don't need to obliterate the default styles completely. If you do, you're going to have to go back in and make that `<h1>` large and bold again with _more_ CSS.\n\n### Normalize CSS\n\n[Normalize CSS](https://necolas.github.io/normalize.css/) is the more elegant solution than a reset. Its goal is to even out the kinks between browsers and address the most common issues with default styles, while leaving the rest intact.\n\nMost CSS frameworks have a normalize built into them already, so you won't need to add this in if you're using Bootstrap, Materialize, etc.\n\n### The Quick and Easy Option\n\nThere's a third option here worth mentioning. If you're trying to get things done quickly and not using a framework, you can eliminate most of the funk with something like this:\n\n```css\n* {\n    margin: 0;\n    padding: 0;\n    /* box-sizing: border-box */\n    /* border: 1px solid black */\n}\n```\n\nThis ends up stripping out all the micro-adjustments you typically have to come in and do later if you roll with the default padding and margin on elements. (The `*` is a wildcard selector that selects all elements)\n\nYou can optionally toss in the `box-sizing` bit to make sure that your widths/heights are not additive. This means if you say an element is `500px`, it will be exactly that regardless of padding, margin, or border that you add in later. I don't typically find myself reaching for this, but it can help when you're doing pixel-perfect layouts.\n\n**Note**: The last bit is a little üî• **hot tip** üî• for debugging CSS layouts. If you're wondering how big or what shape an element is, adding a border can quickly show you how something is being rendered. This adds a border to all elements, showing you how everything is laid out on the page.\n\n## Writing Good Markup and 'Going with the Flow'\n\n[CSS Zen Garden](http://www.csszengarden.com/) showed us the awesome power of CSS to style HTML regardless of how it is written.\n\n_What's that quote about power and responsibility...?_ ü§îüï∑\n\nHTML has a certain [flow](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow) to it. It's read and rendered top-to-bottom, certain elements are `block` or `inline`, etc. The greater your knowledge of this default behavior, the better you can use it to your advantage, and the less CSS you'll have to write to change it.\n\nYes, CSS can do amazing things to change the default behavior of markup. However, if you write your HTML with your end goal in mind, you'll end up weaponizing CSS less often to make your markup behave appropriately.\n\n\n## Mastering Layouts with Flexbox and Utility Classes\n\nLayouts and positioning of elements is probably the biggest source of strife when learning CSS. You want an element to be in a particular spot, so you write ten lines of CSS that _almost_ positions it perfectly. Then you write ten more lines of CSS, but now it's vertically off-center, etc.\n\nThere's a few tools and tricks that can dramatically reduce the amount of time you spend attempting to place elements where you want them to go.\n\n### Floats\n\nBefore we talk about flexbox, let's talk briefly about floats. If you're using floats for layouts, _please stop_. Flexbox is [highly compatible](https://caniuse.com/#feat=flexbox) with older browsers, and it's way easier to use.\n\nFloats are great for wrapping text around an element, but are awful for layouts. They break the flow of HTML and require a [clearfix](https://www.w3schools.com/howto/howto_css_clearfix.asp) hack to restore that flow for the rest of the elements that come after.\n\nHere's a quick example:\n\n```html html-live\n<div id=\"float-example\">\n    <img src=\"https://picsum.photos/200\" id=\"floatImage\"/>\n    <!-- Let's say we want this blob of text to wrap around our example image -->\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ultricies sem id ante ullamcorper, a commodo eros molestie. Phasellus leo justo, malesuada scelerisque ullamcorper et, finibus ut metus. Integer egestas tellus leo, et consectetur tortor bibendum at. Sed non imperdiet risus. Sed at metus mauris. Donec ullamcorper, nunc sit amet ullamcorper mattis, diam sapien viverra nisi, sit amet pretium ligula mi in est. Nulla finibus imperdiet fringilla. Proin fringilla augue et turpis placerat, sit amet commodo enim dictum. Vivamus viverra mollis augue, in fermentum odio placerat eu. Aenean porta tellus quis urna tristique sagittis.\n</div>\n```\n\n```css css-live\n#floatImage {\n    /* 'float' makes the text wrap around the image, try 'right' */\n    float: left;\n    /* the rest of this is to better illustrate the wrapping effect */\n    shape-outside: circle();\n    border-radius: 100px;\n    margin: 5px;\n}\n\n#float-example::after {\n    /* Another gripe about floats is having to use a clearfix! */\n    content: \"\";\n    display: table;\n    clear: both;\n}\n```\nIf you erase some of the lorem text, and remove that clearfix hack, you'll see how floats destroy a page's flow.\n\nFloats are a good tool if you use them correctly. However for layouts, you probably don't want to use a float.\n\n### Flexbox\n\nFlexbox is a powerful and simple tool to use for creating layouts and positioning elements. If you've never heard of it, Wes Bos has a great free series on it called _[What the Flexbox?](https://www.youtube.com/watch?v=Vj7NZ6FiQvo&list=PLu8EoSxDXHP7xj_y6NIAhy0wuCd4uVdid)_. If you're already familiar with flexbox, there's a great [visual cheat sheet](http://flexbox.malven.co/) you can use as well.\n\nConceptually, flexbox is all about creating containers. So you create a flex container with `display: flex` and then every direct child element will be aligned a certain way based on that parent container element.\n\nIt's also a one-dimensional system of laying things out. Each container runs in one direction, either horizontally with `flex-direction: row` (the default) or vertically with `flex-direction: column`. Children within can then be centered/aligned very easily from there.\n\n#### Why not Grid?\n\nYou can absolutely use Grid! CSS Grid is very similar to flexbox, just way more powerful. If Flexbox is a one-dimensional layout system, Grid is two-dimensional. You can pretty much set a CSS grid container to do anything your heart desires. (If you want a great free CSS Grid course... yup, [Wes Bos](https://www.youtube.com/watch?v=T-slCsOrLcc&list=PLu8EoSxDXHP5CIFvt9-ze3IngcdAc2xKG) has you covered there as well.)\n\nWhy use flexbox then? Honestly, I like it because it's incredibly simple and straightforward. It does one thing and does it very well. Plus you can absolutely nest flex containers and compose them into whatever you need.\n\n## Components vs Utility classes\n\nSo when it comes to organization of CSS, there's two camps: components, and utility classes.\n\n### Components\n\nComponents could be thought of like how bootstrap organizes their building blocks. A \"jumbotron\" or \"navbar\", etc. might be represented by one class applied to an element, or possibly with a handful of subclasses used on elements within. The approach here is to use fewer class names in your HTML, scope/name them smartly, and generally style larger chunks of markup with a handful of classes.\n\nA popular convention for naming such classes is [BEM](http://getbem.com/). BEM stands for \"Block, Element, Modifier\", and it's essentially a system of `--` and `__` inside your class names to increase the reusability and composability of your CSS.\n\nHere's a [BEM in 5-minutes](https://www.youtube.com/watch?v=SLjHSVwXYq4) video to get you up to speed.\n\nThe catch is that this reduces resuability of your CSS. You can't very well apply jumbotron styles to a navbar. BEM and smart naming can only take you so far.\n\n### Utility Classes\n\nThe opposite approach to componentized classes is utility classes. These are small classes that typically do one thing only. For example, `mx-auto` would apply `margin-left: auto; margin-right: auto`.\n\nBootstrap and Materialize have a set of utility classes, and Tailwind CSS is made up entirely of utility classes if you'd like more examples.\n\nThe power of utility classes is in rapid development. You almost never have to leave your HTML file when prototyping if you have enough utility classes defined.\n\nThe con here is that your HTML elements can quickly become bloated with CSS classes, and a combination of ten utility classes used to define a component results in a lot of repeated code.\n\n### Finding Balance\n\nIn my experience, a combination of both methods is the sane choice. Having a handful of global utility classes in combination with larger presentational classes for blocks of markup makes the most sense. This has the added benefit of making your markup a little more readable as well, because your component class names like `card` are listed beside your layout class names like `row` or `column`. So `card row` would tell you this card has a row of children elements.\n\nLet's look at some examples. Let's build a standard layout, starting with a header and some navigation links.\n\nThis little bit of CSS is going to let us do a lot of heavy lifting. We're going to start with a global color palette using [CSS variables](https://codeburst.io/css-variables-explained-with-5-examples-84adaffaa5bd), then define our layout classes.\n\n```css css-live\n:root {\n    --ex-black: #1C0F13;\n    --ex-green-dark: #6E7E85;\n    --ex-green-light: #B7CECE;\n    --ex-purple-dark: #BBBAC6;\n    --ex-purple-light: #E2E2E2\n}\n/* These are going to be our main, bread and butter layout classes */\n.row, .column {\n    display: flex;\n    flex-wrap: wrap;\n}\n.column {\n    flex-direction: column;\n}\n.container {\n    max-width: 500px;\n    margin: auto\n}\n/* These additional classes will be used to space/align content */\n.center-x {\n    justify-content: center;\n}\n.center-y {\n    align-items: center\n}\n.split {\n    justify-content: space-between\n}\n```\nNext we'll add some styles for our navigation header with BEM.\n```css css-live\n /* add some styles to prettify */\n.header {\n    background-color: var(--ex-black);\n    padding: 10px 5px;\n}\n.header__logo {\n    color: var(--ex-purple-light);\n    margin: 0;\n}\n.header__link {\n    color: var(--ex-purple-dark);\n    margin: 0 5px;\n}\n```\n\n```html html-live\n<header class=\"header\">\n    <div class=\"container row split center-y\">\n        <h1 class=\"header__logo\">Logo</h1>\n        <div class=\"row\">\n            <p class=\"header__link\">Link</p>\n            <p class=\"header__link\">Link</p>\n            <p class=\"header__link\">Link</p>\n        </div>\n    </div>\n</header>\n```\n\nThat made short work of the header!\n\nLet's go a little further and build out a jumbotron/call to action and a little text thrown in:\n```css css-live\n.jumbotron__container {\n    background-color: var(--ex-green-light);\n}\n.jumbotron {\n    height: 300px;\n    color: var(--ex-black);\n}\n.jumbotron__button {\n    background-color: var(--ex-purple-light);\n    border: 2px solid var(--ex-green-dark);\n    border-radius: 4px;\n    color: var(--ex-green-dark);\n    transition: background-color 200ms, color 200ms\n}\n.jumbotron__button:hover {\n    color: var(--ex-black);\n    background-color: var(--ex-purple-dark);\n    border: 2px solid var(--ex-black);\n}\n.ex-heading {\n    text-align: center;\n    margin: 24px 0;\n    color: var(--ex-green-dark);\n}\n.ex-text {\n    color: var(--ex-black);\n    max-width: 200px;\n}\n```\n```html html-live\n<header class=\"header\">\n    <div class=\"container row split center-y\">\n        <h1 class=\"header__logo\">Logo</h1>\n        <div class=\"row\">\n            <p class=\"header__link\">Link</p>\n            <p class=\"header__link\">Link</p>\n            <p class=\"header__link\">Link</p>\n        </div>\n    </div>\n</header>\n<main>\n    <div class=\"jumbotron__container\">\n        <div class=\"jumbotron column center-x center-y\">\n            <h2>This is a moving message</h2>\n            <p>And this is why you should click the button below</p>\n            <button class=\"jumbotron__button\">Call to Action</button>\n        </div>\n    </div>\n    <h3 class=\"ex-heading\">Read Stuff</h3>\n    <section class=\"container row split\">\n        <p class=\"ex-text\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ultricies sem id ante ullamcorper, a commodo eros molestie. Phasellus leo justo, malesuada scelerisque ullamcorper et, finibus ut metus. Integer egestas tellus leo, et consectetur tortor bibendum at.\n        </p>\n        <p class=\"ex-text\">\n            Sed non imperdiet risus. Sed at metus mauris. Donec ullamcorper, nunc sit amet ullamcorper mattis, diam sapien viverra nisi, sit amet pretium ligula mi in est. Nulla finibus imperdiet fringilla.\n        </p>\n    </section>\n</main>\n```\nCool right?\n\nDoing something like this as a CSS beginner used to take me hours and many more lines of CSS!\n\n**Note**: If you check this layout on mobile, you'll see it is responsive without any additional work. The `flex-wrap` property makes our children elements wrap to a new line if there's not enough space. Flexbox in general works very well with creating responsive layouts.\n\n## Parting Thoughts\n\nHopefully by now you see the power of applying some organizational principles to your CSS. With a little practice, you can get some amazing things done with only a few lines of code.\n\n","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/staying-sane-with-css/index.md"}},"frontmatter":{"title":"Finding the Courage to Code","date":"2019-08-25T12:00:00-0400"}}},"staticQueryHashes":["2836739900","4250957540"],"slicesMap":{}}