{"componentChunkName":"component---src-templates-blog-post-js","path":"/test/","webpackCompilationHash":"16824e5fe8ea731301e1","result":{"data":{"site":{"siteMetadata":{"title":"Strings and Things","author":"Lee Warrick"}},"mdx":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/test/","previous":{"id":"fb1bb1fd-1e78-54d1-88b2-0c2008b56784","fields":{"slug":"/debugging-javascript/"},"frontmatter":{"title":"How to Debug JavaScript Quickly"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Debug JavaScript Quickly\",\n  \"date\": \"2019-08-11T23:00:00+0400\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"590px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/static/d8b30a405f9f7076dc088249d765c2bf/96f4b/fireants.jpg\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"66.63265306122449%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0px\",\n      \"left\": \"0px\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Photo of fire ants\",\n    \"title\": \"Photo of fire ants\",\n    \"src\": \"/static/d8b30a405f9f7076dc088249d765c2bf/c739e/fireants.jpg\",\n    \"srcSet\": [\"/static/d8b30a405f9f7076dc088249d765c2bf/8ee9c/fireants.jpg 148w\", \"/static/d8b30a405f9f7076dc088249d765c2bf/ebbe7/fireants.jpg 295w\", \"/static/d8b30a405f9f7076dc088249d765c2bf/c739e/fireants.jpg 590w\", \"/static/d8b30a405f9f7076dc088249d765c2bf/5413e/fireants.jpg 885w\", \"/static/d8b30a405f9f7076dc088249d765c2bf/96f4b/fireants.jpg 980w\"],\n    \"sizes\": \"(max-width: 590px) 100vw, 590px\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"If you\\u2019ve ever thought, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201Cmeh\\u2026 I\\u2019m fine with\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), mdx(\"em\", {\n    parentName: \"p\"\n  }, \", learning to debug is as painful as rolling in fire ants\\u201D\"), \", this article is for you!\"), mdx(\"h2\", null, \"Console Confessional\"), mdx(\"p\", null, \"Me and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" are like this: \\uD83E\\uDD1E. It\\u2019s been my go-to solution for all things weirdJS from the start: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"this\"), \", de-nesting API call data, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async\"), \" things, timeouts, etc.\"), mdx(\"p\", null, \"However, once upon a time, my bootcamp teacher showed us debugging briefly (thank you James), and I thought, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201CThis is\\u2026 \", mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"really cool\"), \"\\u201D\"), \".\"), mdx(\"p\", null, \"You could see \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"everything\"), \" happening inside your code while it\\u2019s executing\\u2014how useful!\"), mdx(\"p\", null, \"Unfortunately I soon got into node-land and then front-end framework valley. I quickly gave up on debugging. (Configure VS Code debugger anyone? Webpack? \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u2026No thanks.\"), \")\"), mdx(\"p\", null, \"And that was \\uD83D\\uDC4C for a while. I\\u2019d hit an issue, fire off a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" or three, solve it, and go back through the code to delete them. Sometimes issues would require many more console.logs. Sometimes my boss would giggle when one slipped into a Pull Request; I\\u2019d feel bad, delete/re-push, and go back to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \"-ing.\"), mdx(\"p\", null, \"I\\u2019ve probably typed \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" more than any other syntax, word, or punctuation in my time coding JavaScript. I\\u2019ve typed it so much I\\u2019ve thought about installing an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log\"\n  }), \"extension\"), \" to save myself keystrokes.\"), mdx(\"p\", null, \"There\\u2019s also a ton of useful \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" tricks out there. I\\u2019ve used \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.error\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.warn\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.table\"), \", destructring, used CSS in logs, and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kylegill.com/blog/2018-11-20-commanding-the-javascript-console/index\"\n  }), \"many more\"), \".\"), mdx(\"p\", null, \"But what happens when that\\u2019s just not enough? What if you\\u2019re tired of typing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201Cc o n s o l e . l o g\\u201D\"), \" everytime you hit a snag?\"), mdx(\"h2\", null, \"console.gone\"), mdx(\"p\", null, \"At work recently, we realized our production code had a memory leak. Our wonderful production code that was compiled and transpiled with webpack, stuffed into a docker container, and running in a linux environment somewhere in AWS land.\"), mdx(\"p\", null, \"Where was my wonderful \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" in all that mess?\"), mdx(\"p\", null, \"Gone, friend. Gone.\"), mdx(\"p\", null, \"Long story short, we got deep into Chrome\\u2019s performance tooling (a topic for another article?). Through that, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I finally found a quick path to connecting node/webpack and chrome dev tools.\")), mdx(\"p\", null, \"Since then I\\u2019ve found myself using more \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"debugger\"), \" statements in my day-to-day.\"), mdx(\"h2\", null, \"Basic Debugging with Chrome\"), mdx(\"p\", null, \"OK. For anyone that\\u2019s unfamiliar, first we\\u2019re going to start with the basics. How do you actually open the chrome debugger?\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"First, \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"open dev tools on this site.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Press f12, right-click and select \\u201Cinspect\\u201D, press ctrl-shift-i on Windows or cmd-clover-unnatural-hand-movement on Mac\\u2026 just get the dev tools open however you normally do.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Add a\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"debugger\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"statement to your code\"), \". (I\\u2019ve already done this below)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chrome will pick up on any debugger statements, pause the code, and open the debugging tools while code is running \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"if (and only if)\"), \" dev tools are already open.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Run the code!\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click \\u2197\\u2198 or \\u27A1 to step through the code line by line\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click the \\u25B6 to resume the script\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"js-live\",\n    \"js-live\": true\n  }), \"function doStuff(thing) {\\n    thing = thing / 4 * -1\\n    thing = Math.pow(thing, 1)\\n    const thing2 = Math.trunc(thing) + 5\\n    debugger // <-- this makes the magic happen\\n    return thing2\\n}\\n\\nconst thingamajig = Math.random()\\nconst result = doStuff(thingamajig)\\nconsole.log(\\\"And the result is...\\\" + result)\\n\")), mdx(\"h4\", null, \"Pretty cool right? \\uD83D\\uDE0E\\uD83D\\uDC4D\"), mdx(\"p\", null, \"Notice how the debugger prints the values of the code as you step through it. Very very nice! This can save you many many keystrokes if you\\u2019re trying to dig down into an object.\"), mdx(\"p\", null, \"Why don\\u2019t we check out some more basic debugging examples?\"), mdx(\"h2\", null, \"Checking out variable values\"), mdx(\"p\", null, \"You can hover over variables in the debugger and see their value as you step through the code.\"), mdx(\"p\", null, \"First let\\u2019s look at some HTML:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\",\n    \"metastring\": \"html-live\",\n    \"html-live\": true\n  }), \"<div id=\\\"magical\\\">Boooooring</div>\\n\")), mdx(\"p\", null, \"Now let\\u2019s watch some JavaScript spice things up in the html above. Try stepping through to the \\u201Cawesome\\u201D variable, then hovering over it to see all the magical properties and methods a DOM object has attached to it.\"), mdx(\"p\", null, \"(Don\\u2019t forget to use \\u2197\\u2198 to step through, and \\u25B6 when you\\u2019re finished)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"js-live\",\n    \"js-live\": true\n  }), \"debugger // Let's watch the magic happen~ \\u2728\\uD83D\\uDC4F\\nconst div = document.getElementById('magical')\\nconst awesome = document.createElement('marquee')\\n//I'm I-remember-marquee-tags years old. \\uD83E\\uDD2B\\nawesome.innerHTML = '<h2>\\u2728\\uD83D\\uDE80~MAGICAL~ \\uD83E\\uDD84\\uD83C\\uDF08</h2>'\\ndiv.textContent = \\\"\\\" //boring no more...\\ndiv.appendChild(awesome)\\n\")), mdx(\"h2\", null, \"Nested Properties\"), mdx(\"p\", null, \"Trying to find a nested property on an object? Debugging can help!\"), mdx(\"p\", null, \"Let\\u2019s try and get\\u2026 oh, let\\u2019s say the level of sweetness on this meatball object below.\"), mdx(\"p\", null, \"It would take me a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lot\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \"s to finally drill down to that\\u2026 but there\\u2019s a better way!\"), mdx(\"p\", null, \"Debug, Hover the variable, then expand the properties until you find the key you\\u2019re looking for then \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Right-Click\"), \" and select \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Copy Property Path\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"js-live\",\n    \"js-live\": true\n  }), \"const meatball = {\\n    ingredients: {\\n        spices: [\\\"Oregano\\\", \\\"Italian\\\", \\\"Mystery\\\"],\\n        meats: {\\n            beef: {\\n                freeRange: true,\\n                happy: \\\"yes, until it was time to make meatballs\\\",\\n            }\\n        },\\n    },\\n    flavors: [\\n        {\\n            umami: {\\n                level: \\\"???\\\"\\n            }\\n        },\\n        {\\n            savory: {\\n                level: 8\\n            }\\n        },\\n        {\\n            sweet: {\\n                level: Math.floor(Math.random() * 9)\\n            }\\n        },\\n    ]\\n}\\n//look up where we assign the meatball variable\\n//hover over meatball, and start opening up properties until you get to sweetness\\n//then right-click on \\\"level\\\" and choose \\\"copy property path\\\"\\n//paste it after meatball below:\\ndebugger\\nconsole.log(\\\"Mama makes a meatball that's \\\" + /*meatball.<paste here and uncomment>*/ + \\\"/9 in sweetness\\\")\\n//don't forget to erase the debugger when you run it!\\n\")), mdx(\"h2\", null, \"Blackboxing \\uD83D\\uDCE6 and React \\u269B\"), mdx(\"p\", null, \"Want to debug React? No problem! You can use the same workflow as above, even when using a framework like React or Vue. Just drop a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"debugger\"), \" statement in, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"open dev tools\"), \", and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"run\"), \" it!\"), mdx(\"h4\", null, \"A small catch\"), mdx(\"p\", null, \"OK, there\\u2019s one minor note I have to make. We want to debug, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"our\"), \" code, and not React\\u2019s code, right? However, the debugger will step through \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"all\"), \" of the code that\\u2019s running, not just yours. So you might find yourself in some weird React code as you\\u2019re stepping through your component.\"), mdx(\"p\", null, \"No sweat! There\\u2019s ways to handle that. Try these tips:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lost in a weird script? Click \\u2B06 to \\u201CStep out\\u201D of a function and hopefully back up to a recognizeable script.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Still lost? Look at the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Call Stack\"), \" Panel. The scripts here are the ones you\\u2019re currently stepping through. In some weird script? \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Right-click\"), \" and select \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\u201CBlackbox script\\u201D\"), \" to skip debugging the script you\\u2019re in.\")), mdx(\"p\", null, \"Try it below!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"react-live\",\n    \"react-live\": true\n  }), \"function Counter() {\\n    const [count, setCount] = React.useState(0)\\n    function countUp(count) {\\n        debugger\\n        const newCount = count + 1\\n        setCount(newCount)\\n    }\\n    return (\\n        <div>\\n            <h2>Count is {count}</h2>\\n            <button onClick={() => countUp(count)}>Increment</button>\\n        </div>\\n    )\\n}\\n\")), mdx(\"h2\", null, \"But what about Node?\"), mdx(\"p\", null, \"Ah yes\\u2026 the eternal question. How does one debug NodeJS?\"), mdx(\"p\", null, \"You can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/docs/nodejs/nodejs-debugging\"\n  }), \"VS Code\"), \", you can use a neat tool called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/GoogleChromeLabs/ndb\"\n  }), \"NDB\"), \", but I say we just use chrome and move on with our lives.\"), mdx(\"p\", null, \"(Note: I personally always confuse \\u201Cndb\\u201D and \\u201Cnbd\\u201D as in \\u201CNo Big Deal\\u201D, instead of \\u201Cnode debugger\\u201D, and it makes me nuts. I \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"always\"), \" mistype it, I can\\u2019t google it, and so it makes a fool of me everytime I try to use it.)\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Open chrome and type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chrome://inspect\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Then start your app with the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--inspect\"), \" flag.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ex: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"node --inspect server.js\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You should see something like: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Debugger listening on ws://127.0.0.1:9229/dfcsd4c63-123e-234-adsd-123lkdfgk\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Go back to Chrome, you should see \\u201CRemote Target\\u201D and a file name/path to your file, plus a little \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"inspect\"), \" link. Click it! This should pop open a separate dev tools window.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add some debuggers to your code and go to town!\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \" You may have to close and re-open chrome\\u2019s debug pane for your app if it doesn\\u2019t detect your debugger statement on the first pass. I\\u2019m also on the latest version of chrome, and you should be too \\uD83D\\uDE09\"), mdx(\"h2\", null, \"Parting Thoughts\"), mdx(\"p\", null, \"Debugging isn\\u2019t always my first-line of defense against weird JavaScript, but I use it a lot more often now that I\\u2019ve got a decent workflow for it.\"), mdx(\"p\", null, \"How do you debug code? Hit me up on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/leewarrickjr\"\n  }), \"twitter\"), \" and let me know!\"));\n}\nMDXContent.isMDXComponent = true;"},"next":null}}}