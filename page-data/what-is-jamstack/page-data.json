{"componentChunkName":"component---src-templates-blog-post-js-content-file-path-home-lee-dev-side-projects-blog-content-blog-what-is-jamstack-index-md","path":"/what-is-jamstack/","result":{"data":{"site":{"siteMetadata":{"title":"Strings and Things","author":"Lee Warrick","siteUrl":"https://leewarrick.com/blog"}},"mdx":{"id":"3bcb8598-bb54-51ae-8624-263aa1141705","excerpt":"JAMstack is one of those buzzwords that leaves the listener confused whenever it’s uttered (see also PWAs, blockchain, and serverless). Despite the name, JAMstack is a fantastic…","frontmatter":{"title":"Just what is JAMstack, anyway?","date":"January 18, 2020"},"body":"\n![Jars of jam stacked on a shelf. A literal jamstack. Photo by Viktor Forgacs on https://unsplash.com/photos/5mGGOWD-Ths](./jamstack.jpg)\n\nJAMstack is one of those buzzwords that leaves the listener confused whenever it's uttered (see also PWAs, blockchain, and serverless). Despite the name, JAMstack is a fantastic choice for front-end web applications, and definitely worth your time as a front-end developer.\n\nHowever, defining \"JAMstack\" is a tricky thing, and the community knows it. There's why there's sites like [jamstack.wtf](https://jamstack.wtf) and [jamstack.org](https://jamstack.org) devoted to explaining just what it is.\n\nUnfortunately, you have to have a solid understanding of web development technologies before explanations of JAMstack start to make sense. So let's start with the basics.\n\n## Let's Review\n\nWhen I started out as a developer, I had _some_ knowledge of the front-end ecosystem I was entering. There was of course JavaScript, HTML, and CSS, plus single page application (SPA) frameworks like React, Angular, and Vue. I understood two potential options for making web apps with this tooling.\n\nThe first is the old-school **server-rendered** route: build your pages in HTML/CSS/JS ahead of time and let the server serve those. Or you could have the server build those pages with a templating language (handlebars, EJS, jinja, etc) as requests came in. The downside here was that either your content was static (that's no fun), or your server was doing a lot of work. Plus, each time the user requested a new page they would see a white screen as the server built/found the page and sent it to the user's browser.\n\nThe more modern method uses **client-side rendering**. You write an SPA, and send a big payload of JavaScript to your user upfront when they visit your site. This is the buy-once, cry-once method. The user waits while all the JavaScript downloads, then again while it renders the requested page. After that initial hit, the app is buttery smooth and provides a great experience, because each page change after that is rendered with JavaScript running in the user's browser. Still, that initial page-load is the important one. Users are impatient, and a long initial load time means you're losing traffic.\n\nThis always made me think of those signs you see in restaurants and mechanic shops. You know the one:\n\n> We offer three kinds of Services:\n\n> GOOD - FAST - CHEAP\n\n> ...but you can only pick __two__.\n\n## The Chimera Option\n\n![Photo of The Chimera of Arezzo, c. 400 BC, found in Arezzo, an ancient Etruscan and Roman city in Tuscany, Museo Archeologico Nazionale, Florence. By Carole Raddato. From https://www.flickr.com/photos/carolemage/22636282885](./chimera.jpg)\n\nIt turns out there's another option. This is where things start to get sticky, though. Single page applications are already difficult to think about, and typically we like to think about them as using client-side, on-demand rendering only. However it's now possible to mix and match dynamic and static content on both the client and server.\n\nThere's two main camps using this hybrid methodology to web app rendering and delivery. The first is server-rendered single page applications, and the second is JAMstack.\n\n### Server-Rendered SPAs\n\nWith a server-rendered SPA, you have to maintain your own server. On initial hit the server pre-renders the page the user requested in HTML/CSS and sends it down to the user. This means the users gets to see a dynamically-rendered page relatively quickly. The server also sends a mess of JavaScript that loads in the background. Now when the user navigates to the next page, the app functions like an SPA and uses that mess of JavaScript to render the new page, instead of asking the server for it. The app only asks the server for data (typically JSON) after that initial page-load.\n\nSome examples of this technology are [NextJS](https://nextjs.org/), [NuxtJS](https://nuxtjs.org/) and [Angular Universal](https://angular.io/guide/universal). For what it's worth, I've used both NextJS and NuxtJS, and they are both fantastic.\n\nThe only problem with this method is that, again, you need to maintain your own server. Running your own server is much more costly than a static hosting solution (using someone else's server). There's also some potential security liability involved.\n\n### Pre-Rendered SPAs\n\nYou're probably thinking this is a bit silly. The whole point of an SPA is to have a dynamic, on-the-fly rendering of your application at any given point, right? If you pre-render everything, what are you left with?\n\nThe answer is a lot, actually. When we build a single page app, we often have various routes or views baked in that don't change. You may have a \"home\" page, an \"about\" page, and then your \"main\" content. Those home and about changes don't really require dynamic data to render anything, but with a traditional SPA they're rendered dynamically all the same. Even the \"main\" stuff probably lives on a route in some kind of wrapper component, right?\n\nWith a pre-rendered SPA, when we \"build\" the application (bundle with Webpack) we designate what can be safely pre-rendered and what needs to be left alone to render on the client's machine at runtime. Then our bundler pre-renders as much of the application as possible (all the routes), and leaves the rest to be rendered with JavaScript at runtime.\n\nInstead of a single HTML page in your build folder as an entrypoint to your app, you'll have multiple. So when the user asks to visit the \"about\" page instead of the home page, that \"about\" page HTML file is ready before the request comes in. After that initial page-load, the JavaScript takes over and handles the page transitions and dynamic portions of the application.\n\nThe result is an SPA that has a _fast_ initial load, instead of a long initial load, meaning a great user experience without the cost and maintenance of a server.\n\nSome examples of this technology are [GatsbyJS](https://www.gatsbyjs.org/), [Gridsome](https://gridsome.org/), [NextJS](https://nextjs.org/features/static-exporting), and [NuxtJS](https://nuxtjs.org/guide#static-generated-pre-rendering).\n\nGatsby and Gridsome are more purpose-built for \"static\"-site generation, while Next and Nuxt are swiss army knife tools that allow you to do both server-rendering and static-site generation.\n\n**Note**: There's a lot of confusion about Static-Site Generators (SSG). A traditional SSG (Hugo, Jekyll, etc) takes your templated code and generates static HTML files from it. Gatsby and Gridsome are actually a lot more than SSGs. They allow you to smartly pre-build and template content in a lot of various ways.\n\nFor example, this blog is built from markdown files, and at build time, Gatsby compiles the markdown files into a React application. You could also query an API or CMS like Wordpress to get your data dynamically at build time. However you're still free to make API calls at runtime too. _You're still building a React app_. You're just pre-rendering some of it.\n\n## Are you going to talk about JAMstack or not?\n\n![Incredulous looking woman with furrowed brow. Photo by Jeffrey Wegrzyn on https://unsplash.com/photos/K-chxjiTu7c](./impatient.jpg)\n\nYes! Now we can talk about what is and isn't JAMstack. JAMstack stands for JavaScript, APIs, and markup. I find that definition entirely unhelpful, hence the lengthy lead-in for this segment.\n\nJAMstack is really about making awesome websites without running your own server, or at least decoupling your \"static\" front-end from your back-end data sources. The front-end app should be composed of static files **only** and be its own codebase. That means **no server-rendered content**.\n\nThis sounds a little restrictive, but trust me, you can build **a lot** of dynamic content following these rules. Just about anything you can build with create-react-app or an SPA can be a JAMstack site. You can build Blogs, e-commerce sites, marketing pages, and full on web apps all with JAMstack methods.\n\nClear as mud, right?\n\n### JAMstack FAQ:\n\nI had a lot of questions on my journey to understanding JAMstack. Let's try to address some of those points of confusion.\n\n#### If it's pre-rendered, how do I update it?\n\nYou have to rebuild the site/app everytime you update something that is pre-rendered. So if I make a new blog post, I have to rebuild the site and redeploy it.\n\nHowever, that doesn't mean you have to redeploy everytime your app needs to make an API call. Remember that your site can still run JavaScript on the front-end.\n\n#### If I have to redeploy to update the site, how do my users make updates?\n\nAh yes, consider the scenario where you make a blog for someone else. They probably don't want to write posts in markdown and push code to github, right? That's OK! You can automate your build step. If they make a new post, all you need to do is *trigger* a build to happen.\n\n[Netlify CMS](https://www.netlifycms.org/) is based around this idea. The user makes their edits on a dashboard (also an SPA), and when they \"save\", they're really committing the code with git, which then triggers a rebuild.\n\n#### I don't want my users touching git. Ever. I'd rather use Wordpress.\n\nAh, but you can do that too! You'd have to host your own Wordpress server somewhere, but Wordpress has a JSON API. When your user makes a new post, you simply have to trigger your static site to build somehow. If you're using Gatsby or Gridsome, the build step queries your Wordpress API (or any other CMS, really) for all the available posts and builds the site.\n\n#### What about user comments on blog posts?\n\nThat's OK! You can still do all the things we just talked about, and just make a API calls for comments on the fly at runtime. You could build your own comment microservice, or use a premium service [FaunaDB](https://fauna.com/) to store comments for you.\n\n#### What are the advantages to JAMstack?\n\nTypically, you can have faster page loads and a much better user experience using JAMstack methods. Also, because your front-end is detached from the server, security issues are greatly diminished. Plus, it's mostly free or at least very cheap to host a static site.\n\n#### When wouldn't I use JAMstack for a site then?\n\nIf all of your front-end content needs to be generated on the fly, JAMstack is not a great choice. For example, if you need dynamic routes, that makes it very difficult to build a static front-end app. Similarly, if you're building a server anyway, maybe it makes more sense to serve the front-end as well.\n\n#### Can you show me some examples of JAMstack sites?\n\nSure! I've built a whole mess of them.\n\n1. [My blog](https://leewarrick.com/blog) - Built with Gatsby, hosted on Github Pages\n1. [The Tech JR Podcast site](https://techjr.dev) - Built with Gridsome, hosted on Netlify and mp3s stored on AWS S3\n1. [Babelfish, a translation app](https://leewarrick.com/babelfish) - Built with Gatsby and Google's translation API, hosted on Github pages\n1. [Goaler, a todo app](https://leewarrick.com/goaler) - Built with Create-React-App and Firebase, hosted on Github Pages\n1. [This Pokedex App](https://leewarrick.com/pokemon-cards) - Built with the Vue CLI and the Poke-API, hosted on Github Pages\n\n## Parting thoughts\n\nJAMstack, like most great technological trends, is a pretty awesome solution with a crummy name. It's not a perfect solution by any stretch, but it empowers front-end developers to build all kinds of sites and applications using their exisiting skills.\n\nSo what are you waiting for? Get out there and build something!\n"}},"pageContext":{"slug":"/what-is-jamstack/","previous":{"id":"6b14c7b4-5f94-5cb9-9efa-63b0717f40da","fields":{"slug":"/the-problem-with-context/"},"frontmatter":{"title":"The Problem with React's Context API"},"body":"![A Gorilla looking thoughtful by Rob Schreckhise](gorilla.jpg)\n\nReact's context API is awesome. As someone that looked at Redux as a junior developer and instantly felt defeated, learning about context was a relief. I used it in my apps, quickly forgot about Redux, and never looked back.\n\nThat is, until I heard about the supposed performance problems with the Context API. Now, the big names in the React community will tell you not to worry about performance unless you start seeing issues. And yet, I keep hearing about context problems from other developers. One fellow even mentioned his boss banning the use of Context on their project.\n\nLet's review the Context API in case you're unfamiliar before we talk about its problems.\n\n## Why use the context API?\n\nThe Context API is useful for sharing state between components that you can't easily share with props. Here's an example of a button component that needs to set the state of a distant ancestor:\n\n```jsx react-live use-render\nconst { useState } = React\n\nfunction CountDisplay({ count }) {\n  return <h2>The Count is: {count}</h2>\n}\n\nfunction CountButton({ setCount }) {\n  return (\n    <button onClick={() => setCount(count => count + 1)}>\n      Increment\n    </button>\n  )\n}\n\nconst OuterWrapper = ({setCount}) => <InnerWrapper setCount={setCount}/>\nconst InnerWrapper = ({setCount}) => <CountButton setCount={setCount}/>\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  return (\n    <div>\n      <CountDisplay count={count} />\n      <OuterWrapper setCount={setCount}/>\n    </div>\n  )\n}\n\nrender(App)\n```\n\nThe button component is within a few other components further down the tree, but still needs to access state from higher up in the app. So we have to pass `setCount` down to each component to finally get it to our `CountButton` component. This is affectionately known as \"prop-drilling\", and used to be a huge pain point in React.\n\nThe Context API makes short work of situations like this, thankfully.\n\n## How to use the Context API\n\nKent C. Dodds has a fantastic [blog post](https://kentcdodds.com/blog/application-state-management-with-react) that I refer to whenever I implement the Context API. If you don't have time to read that, here's the short version: Context is a way to share state between unrelated or distant components. All you have to do is wrap your components in a `Context.Provider` and then call `useContext(Context)` inside that component to access your state and helper functions.\n\nHere's our counter example with context:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext} = React\n\nconst AppContext = createContext()\n\nfunction AppProvider(props) {\n  const [count, setCount] = useState(0)\n  const value = { count, setCount }\n  return (\n    <AppContext.Provider value={value}>\n      {props.children}\n    </AppContext.Provider>\n  )\n}\n\nfunction CountDisplay() {\n  const { count } = useContext(AppContext)\n  return <h2>The Count is: {count}</h2>\n}\n\nfunction CountButton() {\n  const { setCount } = useContext(AppContext)\n  return (\n    <button onClick={() => setCount(count => count + 1)}>\n      Increment\n    </button>\n  )\n}\n\nconst OuterWrapper = () => <InnerWrapper />\n\nconst InnerWrapper = () => <CountButton />\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <CountDisplay/>\n        <OuterWrapper/>\n      </AppProvider>\n    </div>\n  )\n}\n\nrender(App)\n```\n\nHere we have `CountDisplay` and `CountButton` components that both need to interact with the higher-level `count` state in our context. We start by making a context with `createContext`, then a provider component in `AppProvider` to wrap our dependent components, and finally call `useContext` in each component to pull out the values we need. It doesn't matter how far apart the components are as long as they're wrapped in a provider.\n\nPretty great right?\n\n## Kent C. Dodd's Optimizations 📈\n\nWe can improve on this a little bit by implementing some stuff that Kent has in his article on state management. Let's take a look:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext, useMemo} = React\nconst AppContext = createContext()\n\n// instead of calling useContext directly in our components,\n// we make our own hook that throws an error if we try to\n// access context outside of the provider\nfunction useAppContext() {\n  const context = useContext(AppContext)\n  if (!context)\n    throw new Error('AppContext must be used with AppProvider!')\n  return context\n}\n\nfunction AppProvider(props) {\n  const [count, setCount] = useState(0)\n  // here we use useMemo for... reasons.\n  // this says don't give back a new count/setCount unless count changes\n  const value = useMemo(() => ({ count, setCount }), [count])\n  return <AppContext.Provider value={value} {...props} />\n}\n\nfunction CountDisplay() {\n  const { count } = useAppContext()\n  return <h2>The Count is: {count}</h2>\n}\n\nfunction CountButton() {\n  const { setCount } = useAppContext()\n  return (\n    <button onClick={() => setCount(count => count + 1)}>\n      Increment\n    </button>\n  )\n}\n\nconst OuterWrapper = () => <InnerWrapper />\n\nconst InnerWrapper = () => <CountButton />\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <CountDisplay />\n        <OuterWrapper />\n      </AppProvider>\n    </div>\n  )\n}\n\nrender(App)\n```\n\nThe first thing we do is throw an error if we try to access the context outside of our provider. This is a great idea to improve the developer experience of your app (aka: make the console scream at you when you forget how context works).\n\nThe second thing is to memoize our context value to only re-render if the `count` changes. Now, `useMemo` is a difficult thing to wrap your head around, but the basic gist is that when you memoize something, you're saying that you won't return that value again unless your specified value changes. Kent has a [great article](https://kentcdodds.com/blog/usememo-and-usecallback) on that too if you want to read more.\n\nI can't discern a difference between using `useMemo` and not using it, but I would venture that if you're doing some heavy lifting in your Context Provider, it might be beneficial to apply memoization. If you read Kent's article on `useMemo` and `useCallback` he cautions against using them unless you start to see performance hits. (Full Disclosure: I've never needed to use either one.)\n\nKent also spreads his `props` on the provider instead of using `props.children`, which is a neat trick, so I included that as well.\n\n## The Context API's Dirty Little Secret 🤫\n\n![Man making the shush gesture with his finger over his lip, laying on a mound of trash. Photo by Jordan Beltran](trashman.jpg)\n\nBoy, the Context API sure is great. It's super easy to use compared to Redux and requires a lot less code, so why _wouldn't_ you use it?\n\nThe problem with context is simple: **Everything that consumes a context re-renders everytime that context's state changes.**\n\nThat means that if you're consuming your context all over the place in your app, or worse, using one context for your entire app's state, you're causing a ton of re-renders all over the place!\n\nLet's visualize this with a simple app. Let's make a context with a counter and a message. The message will never change, but be consumed by three components that display the message in a random color on each render. The count will be consumed by one component, and be the only value that changes.\n\nThat sounds like a middle school math problem, but if you look at this code and the resulting app, the problem becomes blatantly obvious:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext} = React\nconst AppContext = createContext()\n\nfunction useAppContext() {\n  const context = useContext(AppContext)\n  if (!context)\n    throw new Error('useAppContext must be used within AppProvider!')\n  return context\n}\n\nfunction AppProvider(props) {\n  // the count for our counter component\n  const [count, setCount] = useState(0)\n  // this message never changes!\n  const [message, setMessage] = useState('Hello from Context!')\n  const value = {\n    count,\n    setCount,\n    message,\n    setMessage\n  }\n  return <AppContext.Provider value={value} {...props}/>\n}\n\nfunction Message() {\n  const { message } = useAppContext()\n  // the text will render to a random color for\n  // each instance of the Message component\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>{message}</h4>\n    </div>\n  )\n}\n\nfunction Count() {\n  const {count, setCount} = useAppContext()\n  return (\n    <div>\n      <h3>Current count from context: {count}</h3>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <h2>Re-renders! 😩</h2>\n        <Message />\n        <Message />\n        <Message />\n        <Count />\n      </AppProvider>\n    </div>\n  )\n}\nrender(App)\n```\nEverything re-renders when we click increment 😱.\n\nThe message components don't even use the `count` from our context, but they re-render anyway. Yikes!\n\n### What about memoization?\n\nMaybe we just forgot to use `useMemo` like Kent did in his example. Let's memoize our context and see what happens:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext, useMemo} = React\nconst AppContext = createContext()\n\nfunction useAppContext() {\n  const context = useContext(AppContext)\n  if (!context) throw new Error('useAppContext must be used within AppProvider!')\n  return context\n}\n\nfunction AppProvider(props) {\n  const [count, setCount] = useState(0)\n  const [message, setMessage] = useState('Hello from Context!')\n  // here we pass our value to useMemo,\n  // and tell useMemo to only give us new values\n  // when count or message change\n  const value = useMemo(() => ({\n    count,\n    setCount,\n    message,\n    setMessage\n  }), [count, message])\n  return <AppContext.Provider value={value} {...props}/>\n}\n\nfunction Message() {\n  const { message } = useAppContext()\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>{message}</h4>\n    </div>\n  )\n}\n\nfunction Count() {\n  const {count, setCount} = useAppContext()\n  return (\n    <div>\n      <h3>Current count from context: {count}</h3>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <h2>Re-renders! 😩</h2>\n        <Message />\n        <Message />\n        <Message />\n        <Count />\n      </AppProvider>\n    </div>\n  )\n}\nrender(App)\n```\n\nNope! Memoization with `useMemo` doesn't help at all!\n\n### What about components that don't consume Context, do they re-render?\n\nThat's an excellent question, let's test it with a Message component that doesn't consume context:\n\n```jsx react-live use-render\nconst {useContext, useState, createContext, useMemo} = React\nconst AppContext = createContext()\n\nfunction useAppContext() {\n  const context = useContext(AppContext)\n  if (!context) throw new Error('useAppContext must be used within AppProvider!')\n  return context\n}\n\nfunction AppProvider(props) {\n  const [count, setCount] = useState(0)\n  const [message, setMessage] = useState('Hello from Context!')\n  const value = useMemo(() => ({\n    count,\n    setCount,\n    message,\n    setMessage\n  }), [count, message])\n  return <AppContext.Provider value={value} {...props}/>\n}\n\n// this component does NOT consume the context\n// but is still within the Provider component\nfunction IndependentMessage() {\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>I'm my own Independent Message!</h4>\n    </div>\n  )\n}\n\nfunction Message() {\n  const { message } = useAppContext()\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>{message}</h4>\n    </div>\n  )\n}\n\nfunction Count() {\n  const {count, setCount} = useAppContext()\n  return (\n    <div>\n      <h3>Current count from context: {count}</h3>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <AppProvider>\n        <h2>Re-renders! 😩</h2>\n        <Message />\n        <Message />\n        <Message />\n        <IndependentMessage />\n        <Count />\n      </AppProvider>\n    </div>\n  )\n}\nrender(App)\n```\n\nWell, this is the only good news so far. **Only components that call `useContext` re-render whenever the context's state changes.**\n\nStill, this is bad news for our app. We don't want to trigger a bunch of unnecessary re-renders everywhere we use a context.\n\nImagine if those message components were doing a lot of work like calculating animations, or if we had a huge React app with lots of components dependent on our context. That could lead to pretty serious performance issues, right?\n\n## Should we stop using Context?\n\n![Sign showing man throwing away trash, photo by Gary Chan](trash.jpg)\n\nI'll go ahead and say this now: **no, this isn't a reason to stop using context**. There's a ton of apps out there using context and chugging along just fine, including a bunch of my own apps.\n\nStill, performance is kind of a big deal. I don't want to leave you sitting up at night worrying about the Context API's dirty little secret. So let's talk about some ways to deal with this re-render business.\n\n### Option 1: Don't worry at all. Keep on Context'n like you do. YOLO 🤪!\n\nI've basically used Context a whole bunch in a lot of various apps without memoization, at the top level of my app, and consumed by a bunch of components without noticing any performance hits at all. Like I said before, a lot of the React folks say you shouldn't even worry about performance optimizations until you see performance impacts.\n\nStill, this strategy won't work for everyone. You may already have performance issues in your app, or if your app processes a lot of logic or animations, you may see performance issues as your app grows and end up doing some serious refactoring down the road.\n\n### Option 2: Use Redux or Mobx\n\nRedux and Mobx both use the context API, so how do they help? The store that's shared by these state management libraries with context is a little different from sharing state directly with context. When you're using Redux and Mobx, there's a diffing algorithm at work that makes sure to only re-render the components that actually need to re-render.\n\nStill, context was supposed to save us from having to learn Redux and Mobx! There's a lot of abstractions and boilerplate involved in using a state management library, making it an unattractive solution to some folks.\n\nPlus, isn't keeping all of our state in global state a bad practice?\n\n### Option 3: Use Multiple Contexts, and keep state close to its Dependent Components\n\nThis solution takes the most finesse to pull off, but gives you the best performance without reaching for Redux and Mobx. It relies on being smart about your state management choices, and only passing state up to a context if you need to share it between distant components.\n\nThere's a few key tenants to this strategy:\n\n1. **Let a component manage its own state if it can.** This is a good practice to follow regardless of your choice of state management. For example, if you have a modal that needs to keep track of an open/closed state, but no other components need to know if that modal is open, keep that open/closed state in the modal. Don't push state into context (or Redux) if you don't have to!\n1. **If your state is shared between a parent and a few children, just prop it down.** This is the old school method of sharing state. Just pass it as props to the children components that need it. Passing props or \"Prop-drilling\" can be miserable with deeply nested components, but if you're only passing things down a few levels, you should probably just do it.\n1. **If the previous two things fail, use context but keep it close to the components that depend on it.** This means if you need to share some state, like a form for instance with multiple components, go ahead and make a separate context for just the form and wrap the form components in your provider.\n\nThat last one deserves an example. Let's apply it to our problem app from before. We can fix those re-renders by separating the `message` and `count` into their own contexts.\n\n```jsx react-live use-render\nconst { useContext, useState, createContext } = React\nconst CountContext = createContext()\n\n// Now count context only worries about count!\nfunction useCountContext() {\n  const context = useContext(CountContext)\n  if (!context)\n    throw new Error('useCountContext must be used within CountProvider!')\n  return context\n}\n\nfunction CountProvider(props) {\n  const [count, setCount] = useState(0)\n  const value = { count, setCount }\n  return <CountContext.Provider value={value} {...props}/>\n}\n\n// And message context only worries about message!\nconst MessageContext = createContext()\n\nfunction useMessageContext() {\n  const context = useContext(MessageContext)\n  if (!context)\n    throw new Error('useMessageContext must be used within MessageProvider!')\n  return context\n}\n\nfunction MessageProvider(props) {\n  const [message, setMessage] = useState('Hello from Context!')\n  const value = { message, setMessage }\n  return <MessageContext.Provider value={value} {...props}/>\n}\n\nfunction Message() {\n  const { message } = useMessageContext()\n  const getColor = () => (Math.floor(Math.random() * 255))\n  const style = {\n    color: `rgb(${getColor()},${getColor()},${getColor()})`\n  }\n  return (\n    <div>\n      <h4 style={style}>{message}</h4>\n    </div>\n  )\n}\n\nfunction Count() {\n  const {count, setCount} = useCountContext()\n  return (\n    <div>\n      <h3>Current count from context: {count}</h3>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <h2>No Unnecessary Re-renders! 😎</h2>\n      <MessageProvider>\n        <Message />\n        <Message />\n        <Message />\n      </MessageProvider>\n      <CountProvider>\n        <Count />\n      </CountProvider>\n    </div>\n  )\n}\nrender(App)\n```\n\nNow our state is only shared with the components that care about that state. When we increment, the colors of our message components stay the same because `count` lives outside of `messageContext`.\n\n## Final Thoughts\n\nAlthough this article's title is a little incendiary and the \"problem\" with context  may not be the boogie man some might envision it to be, I still think this is worth talking about. React's flexibility makes it both a great framework for beginners as well as a devastating footgun for those that don't know its inner-workings. I don't forsee a lot of people tripping over this particular detail, but if you're using context and seeing performance issues, it's a good thing to know!","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/the-problem-with-context/index.md"}},"next":{"id":"ca8a67f0-a688-51ce-b793-6f0f10ceceec","fields":{"slug":"/learning-machine-learning/"},"frontmatter":{"title":"How much can a Front-end Developer learn about Machine Learning using only JavaScript?"},"body":"\n![Robot Playing Piano by Franck V on Unsplash: https://unsplash.com/photos/U3sOwViXhkY](./pianobot.jpg)\n\nMachine Learning and Artificial Intelligence have been huge buzzwords in the Tech industry for [quite some time](https://towardsdatascience.com/google-trends-on-data-science-160146fea72a). Hearing them might make you picture self-driving cars or chat bots in your head and leave you wondering what kind of programming goes into those projects. AI, in particular, has been the stuff of science fiction for so long that it's hard not to be curious about it now that we're seeing real-life projects surface in the news.\n\nBut what do those terms really mean? A cursory search of any of them will undoubtedly leave you separating science from marketing before you get to any valuable information. I've spent the past few months learning and researching Machine Learning and the Data Science field, so I know how difficult it can be to drill through the buzz and hype. This article is about that experience and how far I was able to get as a humble JavaScript developer.\n\nBefore we get started though, I want to kick things off with my favorite quote about Machine Learning and AI:\n\n> Difference between machine learning and AI:\n>\n> If it is written in Python, it's probably machine learning\n>\n> If it is written in PowerPoint, it's probably AI\n\n--[Matt Velloso on Twitter](https://twitter.com/matvelloso/status/1065778379612282885)\n\n## I thought Machine Learning was only for geniuses (and I'm no genius)\n\nI first started working with Machine Learning (ML) early on in my career when working with a team that was doing text-recognition work. My job was to create a front-end application that let users send documents to the backend for parsing.\n\nPython is the main squeeze when it comes to ML/AI work for a lot of reasons, so I thought I wouldn't get much exposure to any ML work as a front-end developer. However, I ended up tangling with ML quite a bit. Text Recognition models are pretty picky about input, so I ended up using JavaScript implementations of Python libraries to pre-process documents in the browser to match the backend. Through this, I also found JavaScript versions of Machine Learning frameworks as well. Not only could you use trained models to predict data in the browser, but you could create and train models there too.\n\nWhile it was awesome to see that JavaScript can really do all the things, Machine Learning is a specialized field that has massive foundations in calculus and statistics. So while I felt competent in my JavaScript abilities, I felt incompetent when it comes to the kind of higher level math involved in ML. In short, I thought the whole data science field was beyond me as a lowly front-end developer.\n\nAfter moving on from that work project, I didn't touch Machine Learning for months.\n\n## You don't need to be a Mathematician to try your hand at Machine Learning\n\n![Pic of Enrico Fermi doing some math. May or may not be ML-related. Looks hard. Photo by Science in HD on https://unsplash.com/photos/aYxQrt5J6jM](./mathguy.jpg)\n\n_(Pictured: What I thought all Data Scientists looked like before this journey.)_\n\nEven though I gave up on ML, I still wanted to learn Python. I run a [meetup](https://www.meetup.com/orlando-juniors/), so I decided to get some workshops together to teach the community (and myself) Python. I reached out to the [local Python User Group](https://www.meetup.com/OrlandoPython). Its organizer, Michael DuPont, and I got together and planned out a series of talks and workshops where Michael would teach, and I would book the venues.\n\nThe workshops were awesome, and we were also able to [record them for YouTube](https://www.youtube.com/playlist?list=PL5XS6NAljuIyolJIaZjwoMHmBW2oHsr-G). That experience taught me a lot about Python and its ecosystem, but also some interesting lessons about Machine Learning.\n\nAt the [end of the intro talk](https://youtu.be/pTtT8qHj_nc?t=3832), Michael introduced [TPOT](https://epistasislab.github.io/tpot/)--an automated ML tool--and used it to train a model to predict housing prices in Boston. This was fascinating to me because what TPOT does is take data and figure out how to make a model and train it on its own. It essentially cut out all the math and statistics for you. This planted the seed in my head that maybe, just maybe, being a developer is enough to get your feet wet with ML.\n\n## Using JavaScript for Machine Learning\n\nI also run a [podcast](https://techjr.dev), and through that, I ended up meeting [Gant Laborde](https://twitter.com/GantLaborde), a JavaScript developer with a passion for data science. We interviewed Gant about [Machine Learning in JavaScript](https://techjr.dev/episodes/2019/machine-learning-with-java-script-gant-laborde-teaches-us-tensorflow-js), and really dug into how to get started with ML.\n\nGant also revealed that he was working on a [JavaScript Machine Learning course](https://academy.infinite.red/p/beginning-machine-learning-with-tensorflow-js). This piqued my interest because almost all ML tutorials focus exclusively on Python. After we were finished recording, I offered myself up as a guinea pig for Gant's course, and he graciously sent my co-host and I copies of the course to try out ourselves.\n\nShortly after, Gant released a [free intro to Machine Learning course](https://academy.infinite.red/p/ai-demystified-free-5-day-mini-course). Naturally, I signed up for that too.\n\nThe main course is meant to take 3 weeks, and the intro course is meant to be a 5-day course.\n\n...It took me about 3 months to work through both courses.\n\nMy completion time ballooned past the projected 4 weeks for both courses because of my busy schedule, but also because I truly wanted to grasp the material and give myself every chance to learn everything that Gant had poured into the course.\n\nSo I took my time ⏳, drank many cups of coffee ☕, and wrote a **lot** of code 👨‍💻.\n\nLet's talk about what I've learned 🧙‍♂️.\n\n## Machine Learning is really about prediction 🔮\n\nThe general intro course was a fantastic intro to Machine learning. It taught me that ML is really about boiling a data set down to numbers, analyzing a huge group of those numbers, and then being able to predict outcomes when given data it hasn't seen before. It also taught me about the types of Machine Learning and their applications in real life.\n\nThe Machine Learning and Data Science that we deal with are more about **Artificial Narrow Intelligence (ANI)** than **Artificial General Intelligence (AGN)**. AGN is the stuff of science fiction: robots that can function like humans and make decisions for themselves, SkyNet, etc. ANI is about focusing on a specific problem or question. Some examples of ANI include figuring out if a picture is of a cat or a dog, predicting sales numbers based on historical data, or detecting when a person's eyes are open from a video feed.\n\nBut how does an algorithm learn to answer those questions?\n\nIn the example of the Boston Housing data, the data set has a bunch of features like location, crime rate, proximity to schools, etc. that the computer analyzes alongside the price of the home. An ML algorithm will read thousands of those data points to be able to approximate a home price based on those features.\n\nThink about a line from your middle school math classes. There's a formula that will tell you what x and y coordinates will fall on that line with 100% accuracy. Let's say our line has a formula of `y = x`. Using that formula, we could very easily figure out if a set of coordinates are on that line, right? If you have points `(0, 0)`, `(1, 1)` and `(2, 2)`, you know that as long as they're equal, they live on the line.\n\nBut how would Machine Learning approach this problem? Imagine you didn't have a formula that could tell you with 100% accuracy whether a point was on the line or not. How could ML help?\n\nTo solve this with ML, you would feed your model thousands of coordinates that are labeled as on or off the specified line. After doing a lot of math and burning a lot of processing time, you'd have a model that could tell you with a certain confidence (a percentage) how likely any given point is to exist on that line.\n\n**In a nutshell, Machine Learning is just a computer clumsily learning through trial and error.**\n\n[This joke tweet](https://twitter.com/jebbery/status/995491957559439360) really encapsulates the core concept of Machine Learning:\n\n> Machine Learning Job Interview:\n\n> Me: I'm an expert in machine learning\n\n> Interviewer: What's 9 + 10?\n\n> Me: It's 3.\n\n> Interviewer: Not even close. It's 19.\n\n> Me: It's 16.\n\n> Interviewer: Wrong. Its still 19\n\n> Me: It's 18.\n\n> Interviewer: No, it's 19.\n\n> Me: It's 19.\n\n> Interviewer: You're hired.\n\n## What kind of coding is involved in Machine Learning?\n\nThankfully, the inner-workings (calculus and linear algebra 💀) of training a model are abstracted away from us by ML frameworks like TensorFlow. So we don't have to construct the actual algorithms used to process data and train models.\n\nHowever, there's still a level of math that you have to grapple with when dabbling in Machine Learning. You need to first be able to process data to pass into ML algorithms and models. You also need to have some knowledge of ML framework settings and configuration.\n\n### Preparing Data\n\nMost of the work done by data scientists is involved in **preparing the data**. When we interviewed [Data Scientist Amelia Bennett on our podcast](https://techjr.dev/episodes/2019/what-is-data-science-with-amelia-bennett), she described herself as a high-paid data janitor and described data science itself as a \"21st century dirty job\".\n\nIf you've ever wondered how a computer can learn to parse images, sounds, and language, the answer is math. Anything that can be described mathematically can be translated to numbers and fed into ML models. The job of the data scientist is to not only select the data, but convert it. In computer vision for example, this means converting images to arrays of pixels (RGB and location) that the algorithm can use for training. Natural language processing involves describing soundwaves using math--taking frequency and pitch numbers over time to identify spoken words.\n\nFortunately, there are tools to help you convert non-number data to numbers out there. Tensorflow has a lot of utilities dedicated to helping you process images for instance. Still, you need to be able to use those tools and know which ones to reach for.\n\n### Training Configuration\n\n![An audio mixer with a mess of cables and knobs by Steve Harvey on https://unsplash.com/photos/xWiXi6wRLGo](./wires.jpg)\n\nMachine Learning frameworks abstract away most of the math, but you're still stuck needing to know how different algorithms affect training. So you won't be solving any problems on paper, but you're still going to be reading about mathematical concepts with scary names like `softmax`, `sigmoid`, and `ReLu`.\n\nThere's also something to be said about the _amount_ of terms like those activation function names I mentioned above. When using tensorflow specifically, you might feel like you've got more knobs to twist and turn than you really know what to do with. **The TensorFlow API is massive**, and it's hard to imagine someone mastering all of it.\n\n**Note:** You may remember that there are autoML frameworks like TPOT that I mentioned above. These don't require a ton of configuration, but also give you less control over the outputted result. While these tools are useful, you'll likely find yourself using something TensorFlow or something similar the further you get into ML.\n\n### Guess Work\n\nI personally found the amount of configuration at my fingertips to be completely overwhelming. I am the type of person that loves to know exactly what I'm doing and why. However, this left me at odds with a data scientist's typical workflow.\n\n**Machine Learning requires a lot of experimentation**. I used to think that data scientists trained models in one go, but in reality they may train models over and over again before getting desirable results. When training models, there's many various settings to tweak, and selecting the right ones is more of a matter of trial and error than anything else. I had to let go of my need to understand and comprehend everything before I could embrace the experimentation required to solve ML problems.\n\nTo put it another way, data scientists are a bit like fictional mad scientists haphazardly mixing chemicals in a lab--except data scientists are mixing mathematical functions together instead of fluid-filled beakers of various colors.\n\n## Examples of Machine Learning with JavaScript\n\nI got a solid foundation in the basics of how Machine Learning works, but what projects have I been able to build with it? Before we get to the code, let's talk about how to employ ML as a developer.\n\nThere's really two main types of projects when you're working with Machine Learning: **using a pre-trained model**, or **building and training your own model**. I've included examples of both below.\n\n**Note:** These demos were all made from concepts and lessons learned from [Gant Laborde's AI course](https://academy.infinite.red/p/beginning-machine-learning-with-tensorflow-js).\n\n### Pre-trained Model Examples:\n\nThese are super fun apps to make, and require almost no ML knowledge to pull off. I recommend trying some of these yourself! You can quickly make some impressive ML projects by utilizing browser APIs and web technology.\n\n#### [Image API + MobileNet Example](https://codepen.io/mynar7/pen/ZEzNYEo)\n\n![Gif displaying mobilenet classifying random photos](./mobilenet.gif)\n\n[In this demo](https://codepen.io/mynar7/pen/ZEzNYEo), I pulled images from the [lorem picsum API](https://picsum.photos) and used React to hook them up to [MobileNet](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet), which is a pre-trained model that can classify images.\n\nLorem Picsum is mostly random artsy still-life and landscape photos from [Unsplash](https://unsplash.com/), so you get some interesting results from MobileNet's classifications.\n\n#### [Webcam + MobileNet Example](https://codepen.io/mynar7/full/MWYgQaM)\n\n![Gif of me getting mobilenet to recognize various objects](./webcam.gif)\n\n[This app](https://codepen.io/mynar7/full/MWYgQaM) connects MobileNet up to the webcam browser API so that you can point your phone/camera at an object and classify it.\n\n(If you're wondering about some of the crazy results, you should know that MobileNet wasn't trained recognize humans.)\n\n### Browser-based Model Training Examples:\n\nNow we get into the heavy stuff. Beware running these on low-end phones and devices.\n\nThese examples take data sets and use them to train models directly in your web browser using JavaScript!\n\n#### [Solving FizzBuzz with TensorFlow](https://codepen.io/mynar7/pen/qBEGYoJ)\n\n![Gif showing a model finishing training and solving fizzbuzz](./fizzbuzz.gif)\n\n[This example](https://codepen.io/mynar7/pen/qBEGYoJ) feeds a model thousands of numbers (100 through 3100) that have been solved (labeled) using a simple [fizzbuzz](https://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/) algorithm. Then it tries to guess whether numbers 1-100 should be fizz, buzz, or fizzbuzz.\n\n#### [Cat/Dog image recognition with TensorFlow](https://codesandbox.io/s/dogs-and-cats-in-machine-learning-w7ouw)\n\n![Gif of my dogs-n-cats image recognition demo app recognizing random dogs and cats](./catsndogs.gif)\n\nThis app uses Gant Laborde's [dogs-n-cats npm package](https://dogs-n-cats.netlify.com/) to train a model to recognize random dogs or cats.\n\n[Click here to check out the demo on codesandbox](https://codesandbox.io/s/dogs-and-cats-in-machine-learning-w7ouw). Be warned though, it's a bit memory/resource intensive to train a model using 2000 images in the browser.\n\nThe dogs-n-cats package does most of the prep work for you behind the scenes by pre-processing and pre-packaging all 2000 dog/cat images into tensors for you. All I had to do was feed the images directly into a model for training.\n\n## Other Types of Machine Learning\n\nThe examples above all involve **supervised** learning, meaning we are telling the algorithm what to look for and giving it labeled examples to learn from. Supervised learning is fairly simple to wrap your head around, but there's more methods and applications of ML out there.\n\nTwo examples of different ML methods are **unsupervised** and **reinforcement** learning. In **unsupervised** learning, you give the algorithm a data set that's unlabeled and let it discover and classify things on its own. With **reinforcement** learning, where the algorithm learns how to accomplish tasks through good or bad outcomes. [Think of a computer learning to beat a mario level](https://youtu.be/qv6UVOQ0F44) as an example.\n\nI'd love to dip my toes into these other types of ML at some point, but believe me when I say that getting this far with supervised learning was a huge milestone all on its own!\n\n## Are you a Data Scientist now?\n\n![Photo of the word \"nope\" in cursive by Daniel Herron on https://unsplash.com/photos/vBxbZokRL10](./nopewood.jpg)\n\nLet's get this out of the way: **I am definitely not a data scientist after spending a little time with Machine Learning**.\n\nThat said, I have learned a _lot_ about what is actually involved in Machine Learning and how Data Scientists have been able to pull off some of the incredible advances we've seen in the field. I have a solid understanding of the magic (read: math) that's behind computer vision, natural language processing, and other miracle technologies.\n\nI also understand the limitations of Machine Learning and know that there's still quite a lot of work to be done in the field. I'm excited to see what happens as more data sets and better, more accessible ML frameworks become ubiquitous.\n\nAs far as training models, I definitely feel like I'm still a novice. There's so much nuance and intuition involved in selecting proper activation functions, filters, epochs, etc. that I hardly feel qualified to do anything more than guess at how to properly train a model.\n\nI'm also well aware of the massive shortcuts in data preparation I employed. I feel confident that I could train a model from spreadsheet data, but when it comes to preparing and labeling images for training, I still have a long way to go.\n\n## Parting Thoughts\n\nData Science and Machine Learning are really cool things to dip your toes into if you can stomach the mathematics and trial-and-error that's involved. It's a challenging area of technology and something that businesses have begun to heavily invest in, so even having a basic understanding of the data science field is invaluable as a developer.\n\nI definitely recommend Gant's [free intro course](https://academy.infinite.red/p/ai-demystified-free-5-day-mini-course) to ML/AI concepts. If you complete that course and feel like you want to pursue the subject further, I recommend checking out Gant's [paid beginner course](https://academy.infinite.red/p/beginning-machine-learning-with-tensorflow-js) on AI/ML in JavaScript as well. Gant worked very hard to make the concepts within approachable and it shows.\n\nI hope to keep advancing my own Machine Learning skills in the future. If you have ideas on where I should go from here, or questions about this post, hit me up on [Twitter](https://twitter.com/leewarrickjr)! I'd love to hear from you.","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/learning-machine-learning/index.md"}},"frontmatter":{"title":"Just what is JAMstack, anyway?","date":"2020-01-18T12:00:00-0400"}}},"staticQueryHashes":["2836739900","4250957540"],"slicesMap":{}}