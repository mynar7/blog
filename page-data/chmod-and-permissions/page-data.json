{"componentChunkName":"component---src-templates-blog-post-js-content-file-path-home-lee-dev-side-projects-blog-content-blog-chmod-and-permissions-index-md","path":"/chmod-and-permissions/","result":{"data":{"site":{"siteMetadata":{"title":"Strings and Things","author":"Lee Warrick","siteUrl":"https://leewarrick.com/blog"}},"mdx":{"id":"18345b29-0567-56d1-a0c6-fb08c242d85c","excerpt":"Whoa! Lee, Why are you writing about terminal commands? I thought this was a front-end blog? Listen. I contain multitudes. Plus, you’re gonna run across a permissions issue at…","frontmatter":{"title":"Understanding Unix Permissions, chmod, and ls -la","date":"April 25, 2020"},"body":"\n![A picture of a train terminal in Japan by Andrew Leu (https://unsplash.com/photos/fWZ1-EEYzPM). This article is not about this kind of terminal.](./terminal.jpg)\n\n_Whoa! Lee, Why are you writing about terminal commands? I thought this was a front-end blog?_\n\nListen. I contain multitudes. Plus, you're gonna run across a permissions issue at some point regardless of where you hang out in the stack, so why not learn a little about what's going on here?\n\nCool? Cool. Let's roll.\n\n## Why can't I run this script!?\n\nLet's say you're wanting to run a certain script on your computer. Maybe you downloaded it from somewhere or copied it over from stack overflow. Maybe you wrote your own script, who knows? Let's say you have a cool script like this one:\n\n```bash\n#!/bin/bash\n\necho \"Have a great day!\"\n```\n\nSo you jump into your terminal and run `./my-script.sh` and you're greeted with:\n\n```\n$ ./my-script.sh\npermission denied: ./my-script.sh\n```\n\nSo you jump onto stack overflow, search 'run script permission denied' or something, and you get a terse answer in the way of `chmod 744 <filename>`. So you copy that into your terminal and run it, not really worrying about the mysteries of Unix:\n\n```\n$ chmod 744 ./my-script.sh\n$ ./my-script.sh\nHave a nice day!\n```\n\nSatisfied, you go about your business, feeling appropriately greeted by your terminal.\n\nHowever, deep in the back of your subconscious, you've unknowingly unleashed a tiny code demon. This tiny demon waits until you're showering or about to fall asleep--basically when you're finally finding that peaceful zen state that's so hard to channel--and it whispers a question into your brain: _\"What does that command do?\"_\n\nFor a moment, you wonder why you're not more familiar with Unix, doubt yourself and your abilities, and then pack those feelings back down into pandora's box and go about your day.\n\n## Where did my dotfiles go?\n\nIf you've been programming for a minute, you're probably worked with dotfiles. Maybe your project has a `.env` file for API keys, or maybe you colossally destroyed a git history and decided that obliterating the `.git` folder in your project is the last option you've got left.\n\nIn any case, you jump into your terminal and run your trusty `ls` command.\n\n```\n$ ls\nwork stuff morestuff not_file_you_want.js\n```\n\n_Fiddlesticks! Where's my file? It shows up in vscode, why isn't it here!?_\n\nOne more trip to stack overflow and you get `ls -la` as your green checked answer, which gives you this:\n\n```\n$ ls -la\ndrwxr-xr-x 15 you  you   4096 Apr 24 11:16 .\ndrwxr-xr-x  3 root root  4096 Mar 30 12:09 ..\n-rw-r--r--  1 you  you     38 Apr 24 11:04 .mydotfile\ndrwxr-xr-x  9 you  you   4096 Apr 16 09:50 work\ndrwxr-xr-x  9 you  you   4096 Apr 13 09:50 stuff\ndrwxr-xr-x  9 you  you   4096 Apr 11 09:50 morestuff\n-rw-r--r--  1 you  you     38 Apr 24 11:04 not_file_you_want.js\n```\n\nSuccess! There's my dot file that's appropriately named `.mydotfile`. But that little demon in your mind chimes in... \"_What are all those letters and dashes at the beginning?_\"\n\n_ARGH!_ Impostor syndrome! Doubt! Fear! **The dark side!**\n\nYou ask yourself, _Why am I so bad at using computers!?_\n\n## Learn Unix permissions and banish your doubt demons!\n\nLet's first talk about that weird little string of letters and dashes.\n\n```\n-rw-r--r--  1 you  you     38 Apr 24 11:04 .mydotfile\n```\n\nThat string of `-rw-r-r--r--` is a list of permissions for that file! More on the meaning of that in a second.\n\nThe other information from left to right is the number of links to that file (1), owner, group owner, file size (38), date/time last modified, and the file name.\n\nNow, what about that letter/dash nonsense?\n\n```\n-rw-r--r--\n```\n\nThis is actually a grouping of 4 subsets of information.\n\n```\ntype | owner | group | everyone else\n------------------------------------\n-    | rw-   | r--   | r--\n```\n\nFor the type, the dash signifies that this is just a regular ol' file. You'll see `d` to signify directories and `l` for links, and might even see different colors in your terminal to highlight those types of files.\n\nThe rest of the columns have three more bits of info, which are specific permissions for each subset of users on the system. 'Owner' is the creator of the file, 'group' is the group of users that owner belongs to, and the last section is every other user on the system.\n\nAs for the letters themselves, they signify (r)ead (w)rite and e(x)ecute. So for the example above we have:\n\n\n```\ntype | owner | group | everyone else\n------------------------------------\n-    | rw-   | r--   | r--\nfile | read/ | read  | read\n       write\n```\nThis means you (the owner) can read and write to the file, but other users can only read the file.\n\nHere's another set of permissions you'll often see on directories:\n\n```\ntype     | owner    | group    | everyone else\n------------------------------------------\nd        | rwx      | r-x      | r-x\ndirectory| read/    | read/    | read/\n           write/     execute    execute\n           execute\n```\n\nThis means you (again, the owner) can do it all, but others can read and `cd` into the directory.\n\n## Changing Permissions\n\nGreat! So now you know what all those crazy letters mean. But how about changing them?\n\nLet's look at our example directory from above when we ran `ls -la`:\n\n```\n$ ls -la\ndrwxr-xr-x 15 you  you   4096 Apr 24 11:16 .\ndrwxr-xr-x  3 root root  4096 Mar 30 12:09 ..\n-rw-r--r--  1 you  you     38 Apr 24 11:04 .mydotfile\ndrwxr-xr-x  9 you  you   4096 Apr 16 09:50 work\ndrwxr-xr-x  9 you  you   4096 Apr 13 09:50 stuff\ndrwxr-xr-x  9 you  you   4096 Apr 11 09:50 morestuff\n-rw-r--r--  1 you  you     38 Apr 24 11:04 not_file_you_want.js\n```\n\nLet's say we wanted to change the permissions of the `not_file_you_want.js` file and add execute permissions for the owner.\n\nTo do this, we'll use the `chmod` command:\n\n```\n$ chmod u+x not_file_you_want.js\n```\n\nHere the `u+x` part may trip you up, but take another look. It's saying (u)ser + e(x)ecute, or add execute permissions to the user.\n\nWhat about more granular permissions? What if we wanted to remove all permissions from any other users?\n\nWe can be ultra specific with `chmod`:\n\n```\n$ chmod u=rwx,g-rwx,o-rwx not_file_you_want.js\n```\n\nSo this command says (u)ser permissions should equal (r)ead, (w)rite, and e(x)ecute. Remove all permissions from the group, and remove all permissions from all other users.\n\n## Binary Shortcuts\n\n![A blue and grey sign with the number 2 on it. Photo by Sonny Ravesteijn (https://unsplash.com/photos/xyxjKdpUg4I)](./two.jpg)\n\nSo now you can explicitly set whatever file permissions you want. But that little brain demon might still be screaming about our first stack overflow answer.\n\n```\n$ chmod 744 ./my-script.sh\n```\n\nWhat the heck does 744 mean?\n\nThis is actually shorthand for `-rwxr--r--`. Each number represents a user subset. The first number (7) is user, the middle is group, and the last is all other users, just like we showed in our breakdown earlier: `rwx | r-- | r--`.\n\nEach number is actually a binary representation of the three permissions combined. Let's look at just the user permissions:\n\n```\n2^2     | 2^1     | 2^0\nread    | write   | execute\n---------------------------\n1       | 1       | 1\n```\n\nHere we're indicating we want all three permissions (rwx), so we add 2^2, 2^1, 2^0 together to get 7.\n\nFor the other groups:\n\n```\n2^2     | 2^1     | 2^0\nread    | write   | execute\n---------------------------\n1       | 0       | 0\n```\nWe only count 2^2 which is equal to 4 for the group and others permissions, which combined with our 7 gives us 744.\n\nHere's some other common permission examples:\n\n```\n777 = 111 111 111 = rwxrwxrwx\n666 = 110 110 110 = rw-rw-rw-\n644 = 110 100 100 = rw-r--r--\n600 = 110 000 000 = rw-------\n```\n\nPretty wild right?\n\nSo now when you see this command:\n\n```\n$ chmod 700 my-file.sh\n```\n\nYou know that means you're giving the user all permissions and removing all permissions from everyone else. Look at you go, you little Linux Guru 😎.\n\n## Parting Thoughts\n\nSpecial Thanks to my colleague Clay Benson for explaining this to me on a conference call. I have stared at those little strings of `rwx` for _years_ without bothering to look up what they signify, just chalking it up to terminal magic and resiging myself to ignorance. I was actually stunned at how logical the design of Unix file permissions actually is, and the byte math absolutely floored me when I learned it and inspired me to write this post.\n\nThe next time you do some stack overflow linux wizardry, do a little research and you might surprise yourself with how much you learn. I know I will.\n"}},"pageContext":{"slug":"/chmod-and-permissions/","previous":{"id":"ca8a67f0-a688-51ce-b793-6f0f10ceceec","fields":{"slug":"/learning-machine-learning/"},"frontmatter":{"title":"How much can a Front-end Developer learn about Machine Learning using only JavaScript?"},"body":"\n![Robot Playing Piano by Franck V on Unsplash: https://unsplash.com/photos/U3sOwViXhkY](./pianobot.jpg)\n\nMachine Learning and Artificial Intelligence have been huge buzzwords in the Tech industry for [quite some time](https://towardsdatascience.com/google-trends-on-data-science-160146fea72a). Hearing them might make you picture self-driving cars or chat bots in your head and leave you wondering what kind of programming goes into those projects. AI, in particular, has been the stuff of science fiction for so long that it's hard not to be curious about it now that we're seeing real-life projects surface in the news.\n\nBut what do those terms really mean? A cursory search of any of them will undoubtedly leave you separating science from marketing before you get to any valuable information. I've spent the past few months learning and researching Machine Learning and the Data Science field, so I know how difficult it can be to drill through the buzz and hype. This article is about that experience and how far I was able to get as a humble JavaScript developer.\n\nBefore we get started though, I want to kick things off with my favorite quote about Machine Learning and AI:\n\n> Difference between machine learning and AI:\n>\n> If it is written in Python, it's probably machine learning\n>\n> If it is written in PowerPoint, it's probably AI\n\n--[Matt Velloso on Twitter](https://twitter.com/matvelloso/status/1065778379612282885)\n\n## I thought Machine Learning was only for geniuses (and I'm no genius)\n\nI first started working with Machine Learning (ML) early on in my career when working with a team that was doing text-recognition work. My job was to create a front-end application that let users send documents to the backend for parsing.\n\nPython is the main squeeze when it comes to ML/AI work for a lot of reasons, so I thought I wouldn't get much exposure to any ML work as a front-end developer. However, I ended up tangling with ML quite a bit. Text Recognition models are pretty picky about input, so I ended up using JavaScript implementations of Python libraries to pre-process documents in the browser to match the backend. Through this, I also found JavaScript versions of Machine Learning frameworks as well. Not only could you use trained models to predict data in the browser, but you could create and train models there too.\n\nWhile it was awesome to see that JavaScript can really do all the things, Machine Learning is a specialized field that has massive foundations in calculus and statistics. So while I felt competent in my JavaScript abilities, I felt incompetent when it comes to the kind of higher level math involved in ML. In short, I thought the whole data science field was beyond me as a lowly front-end developer.\n\nAfter moving on from that work project, I didn't touch Machine Learning for months.\n\n## You don't need to be a Mathematician to try your hand at Machine Learning\n\n![Pic of Enrico Fermi doing some math. May or may not be ML-related. Looks hard. Photo by Science in HD on https://unsplash.com/photos/aYxQrt5J6jM](./mathguy.jpg)\n\n_(Pictured: What I thought all Data Scientists looked like before this journey.)_\n\nEven though I gave up on ML, I still wanted to learn Python. I run a [meetup](https://www.meetup.com/orlando-juniors/), so I decided to get some workshops together to teach the community (and myself) Python. I reached out to the [local Python User Group](https://www.meetup.com/OrlandoPython). Its organizer, Michael DuPont, and I got together and planned out a series of talks and workshops where Michael would teach, and I would book the venues.\n\nThe workshops were awesome, and we were also able to [record them for YouTube](https://www.youtube.com/playlist?list=PL5XS6NAljuIyolJIaZjwoMHmBW2oHsr-G). That experience taught me a lot about Python and its ecosystem, but also some interesting lessons about Machine Learning.\n\nAt the [end of the intro talk](https://youtu.be/pTtT8qHj_nc?t=3832), Michael introduced [TPOT](https://epistasislab.github.io/tpot/)--an automated ML tool--and used it to train a model to predict housing prices in Boston. This was fascinating to me because what TPOT does is take data and figure out how to make a model and train it on its own. It essentially cut out all the math and statistics for you. This planted the seed in my head that maybe, just maybe, being a developer is enough to get your feet wet with ML.\n\n## Using JavaScript for Machine Learning\n\nI also run a [podcast](https://techjr.dev), and through that, I ended up meeting [Gant Laborde](https://twitter.com/GantLaborde), a JavaScript developer with a passion for data science. We interviewed Gant about [Machine Learning in JavaScript](https://techjr.dev/episodes/2019/machine-learning-with-java-script-gant-laborde-teaches-us-tensorflow-js), and really dug into how to get started with ML.\n\nGant also revealed that he was working on a [JavaScript Machine Learning course](https://academy.infinite.red/p/beginning-machine-learning-with-tensorflow-js). This piqued my interest because almost all ML tutorials focus exclusively on Python. After we were finished recording, I offered myself up as a guinea pig for Gant's course, and he graciously sent my co-host and I copies of the course to try out ourselves.\n\nShortly after, Gant released a [free intro to Machine Learning course](https://academy.infinite.red/p/ai-demystified-free-5-day-mini-course). Naturally, I signed up for that too.\n\nThe main course is meant to take 3 weeks, and the intro course is meant to be a 5-day course.\n\n...It took me about 3 months to work through both courses.\n\nMy completion time ballooned past the projected 4 weeks for both courses because of my busy schedule, but also because I truly wanted to grasp the material and give myself every chance to learn everything that Gant had poured into the course.\n\nSo I took my time ⏳, drank many cups of coffee ☕, and wrote a **lot** of code 👨‍💻.\n\nLet's talk about what I've learned 🧙‍♂️.\n\n## Machine Learning is really about prediction 🔮\n\nThe general intro course was a fantastic intro to Machine learning. It taught me that ML is really about boiling a data set down to numbers, analyzing a huge group of those numbers, and then being able to predict outcomes when given data it hasn't seen before. It also taught me about the types of Machine Learning and their applications in real life.\n\nThe Machine Learning and Data Science that we deal with are more about **Artificial Narrow Intelligence (ANI)** than **Artificial General Intelligence (AGN)**. AGN is the stuff of science fiction: robots that can function like humans and make decisions for themselves, SkyNet, etc. ANI is about focusing on a specific problem or question. Some examples of ANI include figuring out if a picture is of a cat or a dog, predicting sales numbers based on historical data, or detecting when a person's eyes are open from a video feed.\n\nBut how does an algorithm learn to answer those questions?\n\nIn the example of the Boston Housing data, the data set has a bunch of features like location, crime rate, proximity to schools, etc. that the computer analyzes alongside the price of the home. An ML algorithm will read thousands of those data points to be able to approximate a home price based on those features.\n\nThink about a line from your middle school math classes. There's a formula that will tell you what x and y coordinates will fall on that line with 100% accuracy. Let's say our line has a formula of `y = x`. Using that formula, we could very easily figure out if a set of coordinates are on that line, right? If you have points `(0, 0)`, `(1, 1)` and `(2, 2)`, you know that as long as they're equal, they live on the line.\n\nBut how would Machine Learning approach this problem? Imagine you didn't have a formula that could tell you with 100% accuracy whether a point was on the line or not. How could ML help?\n\nTo solve this with ML, you would feed your model thousands of coordinates that are labeled as on or off the specified line. After doing a lot of math and burning a lot of processing time, you'd have a model that could tell you with a certain confidence (a percentage) how likely any given point is to exist on that line.\n\n**In a nutshell, Machine Learning is just a computer clumsily learning through trial and error.**\n\n[This joke tweet](https://twitter.com/jebbery/status/995491957559439360) really encapsulates the core concept of Machine Learning:\n\n> Machine Learning Job Interview:\n\n> Me: I'm an expert in machine learning\n\n> Interviewer: What's 9 + 10?\n\n> Me: It's 3.\n\n> Interviewer: Not even close. It's 19.\n\n> Me: It's 16.\n\n> Interviewer: Wrong. Its still 19\n\n> Me: It's 18.\n\n> Interviewer: No, it's 19.\n\n> Me: It's 19.\n\n> Interviewer: You're hired.\n\n## What kind of coding is involved in Machine Learning?\n\nThankfully, the inner-workings (calculus and linear algebra 💀) of training a model are abstracted away from us by ML frameworks like TensorFlow. So we don't have to construct the actual algorithms used to process data and train models.\n\nHowever, there's still a level of math that you have to grapple with when dabbling in Machine Learning. You need to first be able to process data to pass into ML algorithms and models. You also need to have some knowledge of ML framework settings and configuration.\n\n### Preparing Data\n\nMost of the work done by data scientists is involved in **preparing the data**. When we interviewed [Data Scientist Amelia Bennett on our podcast](https://techjr.dev/episodes/2019/what-is-data-science-with-amelia-bennett), she described herself as a high-paid data janitor and described data science itself as a \"21st century dirty job\".\n\nIf you've ever wondered how a computer can learn to parse images, sounds, and language, the answer is math. Anything that can be described mathematically can be translated to numbers and fed into ML models. The job of the data scientist is to not only select the data, but convert it. In computer vision for example, this means converting images to arrays of pixels (RGB and location) that the algorithm can use for training. Natural language processing involves describing soundwaves using math--taking frequency and pitch numbers over time to identify spoken words.\n\nFortunately, there are tools to help you convert non-number data to numbers out there. Tensorflow has a lot of utilities dedicated to helping you process images for instance. Still, you need to be able to use those tools and know which ones to reach for.\n\n### Training Configuration\n\n![An audio mixer with a mess of cables and knobs by Steve Harvey on https://unsplash.com/photos/xWiXi6wRLGo](./wires.jpg)\n\nMachine Learning frameworks abstract away most of the math, but you're still stuck needing to know how different algorithms affect training. So you won't be solving any problems on paper, but you're still going to be reading about mathematical concepts with scary names like `softmax`, `sigmoid`, and `ReLu`.\n\nThere's also something to be said about the _amount_ of terms like those activation function names I mentioned above. When using tensorflow specifically, you might feel like you've got more knobs to twist and turn than you really know what to do with. **The TensorFlow API is massive**, and it's hard to imagine someone mastering all of it.\n\n**Note:** You may remember that there are autoML frameworks like TPOT that I mentioned above. These don't require a ton of configuration, but also give you less control over the outputted result. While these tools are useful, you'll likely find yourself using something TensorFlow or something similar the further you get into ML.\n\n### Guess Work\n\nI personally found the amount of configuration at my fingertips to be completely overwhelming. I am the type of person that loves to know exactly what I'm doing and why. However, this left me at odds with a data scientist's typical workflow.\n\n**Machine Learning requires a lot of experimentation**. I used to think that data scientists trained models in one go, but in reality they may train models over and over again before getting desirable results. When training models, there's many various settings to tweak, and selecting the right ones is more of a matter of trial and error than anything else. I had to let go of my need to understand and comprehend everything before I could embrace the experimentation required to solve ML problems.\n\nTo put it another way, data scientists are a bit like fictional mad scientists haphazardly mixing chemicals in a lab--except data scientists are mixing mathematical functions together instead of fluid-filled beakers of various colors.\n\n## Examples of Machine Learning with JavaScript\n\nI got a solid foundation in the basics of how Machine Learning works, but what projects have I been able to build with it? Before we get to the code, let's talk about how to employ ML as a developer.\n\nThere's really two main types of projects when you're working with Machine Learning: **using a pre-trained model**, or **building and training your own model**. I've included examples of both below.\n\n**Note:** These demos were all made from concepts and lessons learned from [Gant Laborde's AI course](https://academy.infinite.red/p/beginning-machine-learning-with-tensorflow-js).\n\n### Pre-trained Model Examples:\n\nThese are super fun apps to make, and require almost no ML knowledge to pull off. I recommend trying some of these yourself! You can quickly make some impressive ML projects by utilizing browser APIs and web technology.\n\n#### [Image API + MobileNet Example](https://codepen.io/mynar7/pen/ZEzNYEo)\n\n![Gif displaying mobilenet classifying random photos](./mobilenet.gif)\n\n[In this demo](https://codepen.io/mynar7/pen/ZEzNYEo), I pulled images from the [lorem picsum API](https://picsum.photos) and used React to hook them up to [MobileNet](https://github.com/tensorflow/tfjs-models/tree/master/mobilenet), which is a pre-trained model that can classify images.\n\nLorem Picsum is mostly random artsy still-life and landscape photos from [Unsplash](https://unsplash.com/), so you get some interesting results from MobileNet's classifications.\n\n#### [Webcam + MobileNet Example](https://codepen.io/mynar7/full/MWYgQaM)\n\n![Gif of me getting mobilenet to recognize various objects](./webcam.gif)\n\n[This app](https://codepen.io/mynar7/full/MWYgQaM) connects MobileNet up to the webcam browser API so that you can point your phone/camera at an object and classify it.\n\n(If you're wondering about some of the crazy results, you should know that MobileNet wasn't trained recognize humans.)\n\n### Browser-based Model Training Examples:\n\nNow we get into the heavy stuff. Beware running these on low-end phones and devices.\n\nThese examples take data sets and use them to train models directly in your web browser using JavaScript!\n\n#### [Solving FizzBuzz with TensorFlow](https://codepen.io/mynar7/pen/qBEGYoJ)\n\n![Gif showing a model finishing training and solving fizzbuzz](./fizzbuzz.gif)\n\n[This example](https://codepen.io/mynar7/pen/qBEGYoJ) feeds a model thousands of numbers (100 through 3100) that have been solved (labeled) using a simple [fizzbuzz](https://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/) algorithm. Then it tries to guess whether numbers 1-100 should be fizz, buzz, or fizzbuzz.\n\n#### [Cat/Dog image recognition with TensorFlow](https://codesandbox.io/s/dogs-and-cats-in-machine-learning-w7ouw)\n\n![Gif of my dogs-n-cats image recognition demo app recognizing random dogs and cats](./catsndogs.gif)\n\nThis app uses Gant Laborde's [dogs-n-cats npm package](https://dogs-n-cats.netlify.com/) to train a model to recognize random dogs or cats.\n\n[Click here to check out the demo on codesandbox](https://codesandbox.io/s/dogs-and-cats-in-machine-learning-w7ouw). Be warned though, it's a bit memory/resource intensive to train a model using 2000 images in the browser.\n\nThe dogs-n-cats package does most of the prep work for you behind the scenes by pre-processing and pre-packaging all 2000 dog/cat images into tensors for you. All I had to do was feed the images directly into a model for training.\n\n## Other Types of Machine Learning\n\nThe examples above all involve **supervised** learning, meaning we are telling the algorithm what to look for and giving it labeled examples to learn from. Supervised learning is fairly simple to wrap your head around, but there's more methods and applications of ML out there.\n\nTwo examples of different ML methods are **unsupervised** and **reinforcement** learning. In **unsupervised** learning, you give the algorithm a data set that's unlabeled and let it discover and classify things on its own. With **reinforcement** learning, where the algorithm learns how to accomplish tasks through good or bad outcomes. [Think of a computer learning to beat a mario level](https://youtu.be/qv6UVOQ0F44) as an example.\n\nI'd love to dip my toes into these other types of ML at some point, but believe me when I say that getting this far with supervised learning was a huge milestone all on its own!\n\n## Are you a Data Scientist now?\n\n![Photo of the word \"nope\" in cursive by Daniel Herron on https://unsplash.com/photos/vBxbZokRL10](./nopewood.jpg)\n\nLet's get this out of the way: **I am definitely not a data scientist after spending a little time with Machine Learning**.\n\nThat said, I have learned a _lot_ about what is actually involved in Machine Learning and how Data Scientists have been able to pull off some of the incredible advances we've seen in the field. I have a solid understanding of the magic (read: math) that's behind computer vision, natural language processing, and other miracle technologies.\n\nI also understand the limitations of Machine Learning and know that there's still quite a lot of work to be done in the field. I'm excited to see what happens as more data sets and better, more accessible ML frameworks become ubiquitous.\n\nAs far as training models, I definitely feel like I'm still a novice. There's so much nuance and intuition involved in selecting proper activation functions, filters, epochs, etc. that I hardly feel qualified to do anything more than guess at how to properly train a model.\n\nI'm also well aware of the massive shortcuts in data preparation I employed. I feel confident that I could train a model from spreadsheet data, but when it comes to preparing and labeling images for training, I still have a long way to go.\n\n## Parting Thoughts\n\nData Science and Machine Learning are really cool things to dip your toes into if you can stomach the mathematics and trial-and-error that's involved. It's a challenging area of technology and something that businesses have begun to heavily invest in, so even having a basic understanding of the data science field is invaluable as a developer.\n\nI definitely recommend Gant's [free intro course](https://academy.infinite.red/p/ai-demystified-free-5-day-mini-course) to ML/AI concepts. If you complete that course and feel like you want to pursue the subject further, I recommend checking out Gant's [paid beginner course](https://academy.infinite.red/p/beginning-machine-learning-with-tensorflow-js) on AI/ML in JavaScript as well. Gant worked very hard to make the concepts within approachable and it shows.\n\nI hope to keep advancing my own Machine Learning skills in the future. If you have ideas on where I should go from here, or questions about this post, hit me up on [Twitter](https://twitter.com/leewarrickjr)! I'd love to hear from you.","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/learning-machine-learning/index.md"}},"next":{"id":"a4706fed-f972-5ca1-aafa-e496f84b7a9c","fields":{"slug":"/why-write-tests/"},"frontmatter":{"title":"What's the point of tests?"},"body":"\n![Picture of a multimeter testing circuits. Photo by Nicolas Thomas https://unsplash.com/photos/3GZi6OpSDcY](./multimeter.jpg)\n\nTesting is a subject that nearly every tutorial and course tends to gracefully skip over. This is tragic because as soon as you enter the workforce as a developer, you're going to be expected to write tests. You may even find yourself writing more tests than code. Too many new developers (myself included), walk into their first job blind to testing principles and practices. More than a few develop negative opinions of testing, and some even learn to resent it. \n\nTests are not a necessary evil. In fact, I've found a lot of comfort in well-written automated tests as I've progressed in my career. With that said, let's discuss some benefits of tests.\n\n```js js-live autorun no-code scripts=\"mocha!https://cdnjs.cloudflare.com/ajax/libs/mocha/8.0.1/mocha.min.js,chai!https://cdnjs.cloudflare.com/ajax/libs/chai/4.2.0/chai.min.js,sinon!https://cdnjs.cloudflare.com/ajax/libs/sinon.js/9.0.2/sinon.min.js\"\nconst {\n  EVENT_RUN_BEGIN,\n  EVENT_RUN_END,\n  EVENT_TEST_FAIL,\n  EVENT_TEST_PASS,\n  EVENT_SUITE_BEGIN,\n  EVENT_SUITE_END\n} = Mocha.Runner.constants;\n\nmocha.setup({\n  ui: \"bdd\",\n  reporter: function(runner) {\n    let currentSuite\n    let currentParent\n    let indent = 0\n    runner.once(EVENT_RUN_BEGIN, () => {\n    })\n    runner.on(EVENT_SUITE_BEGIN, (suite) => {\n    })\n    runner.on(EVENT_SUITE_END, (suite) => {\n      if (suite.root) return\n       indent = indent - 2 < 0 ? 0 : indent - 2\n    })\n    runner.on(EVENT_TEST_PASS, (test) => {\n      if (currentParent !== test.parent.parent.title) {\n        currentParent = test.parent.parent.title\n        if (currentParent) {\n          console.log(`${\" \".repeat(indent)}${currentParent}`)\n          indent += 2\n        }\n      }\n      if (currentSuite !== test.parent.title) {\n        currentSuite = test.parent.title\n        console.log(`${\" \".repeat(indent)}${currentSuite}`)\n        indent += 2\n      }\n\n      console.log(`${\" \".repeat(indent)}🟢 ${test.title}`)\n    });\n    runner.on(EVENT_TEST_FAIL, (test) => {\n      if (currentParent !== test.parent.parent.title) {\n        currentParent = test.parent.parent.title\n        if (currentParent) {\n          console.log(`${\" \".repeat(indent)}${currentParent}`)\n          indent += 2\n        }\n      }\n      if (currentSuite !== test.parent.title) {\n        currentSuite = test.parent.title\n        console.log(`${\" \".repeat(indent)}${currentSuite}`)\n        indent += 2\n      }\n\n      console.log(`${\" \".repeat(indent)}❌ ${test.title}`)\n    });\n    runner.once(EVENT_RUN_END, () => {\n      indent = 0\n      console.log(`${runner.stats.passes}/${runner.stats.passes + runner.stats.failures} tests passing`);\n    });\n  },\n  cleanReferencesAfterRun: true\n})\nwindow.assert = chai.assert;\nwindow.expect = chai.expect;\nwindow.mochaRun = mocha.run\nmocha.run = function() {\n  mocha.unloadFiles()\n  window.mochaRun()\n}\n```\n\n## Tests make maintaining and refactoring code much easier\n\nLet's say for example that you had a function that checks to see if a word is a palindrome (it's the same backwards and forwards):\n\n```js \nfunction isPalindrome(str) {\n  str = str.toLowerCase()\n  let strNoPunc = \"\"\n  const letters = 'abcdefghijklmnopqrstuvwxyz'.split(\"\")\n  for(var i = 0; i < str.length; i++) {\n    if(letters.indexOf(str[i]) > -1) strNoPunc += str[i]\n  }\n  let reversed = \"\"\n  for (var i = strNoPunc.length - 1; i >= 0; i--) {\n    reversed += strNoPunc[i]\n  }\n  return reversed === strNoPunc\n}\n```\nYou haven't written a for loop since you first learned JavaScript, so it takes you a second to read through and see what's happening in the function. It's been humming along in your codebase for quite some time before you came across it, but you know you could write a more readable version. How do you proceed, though?\n\nOne way is to manually test with `console.log`:\n\n```js js-live autorun\nfunction isPalindrome(str) {\n  str = str.toLowerCase()\n  let strNoPunc = \"\"\n  const letters = 'abcdefghijklmnopqrstuvwxyz'.split(\"\")\n  for(var i = 0; i < str.length; i++) {\n    if(letters.indexOf(str[i]) > -1) strNoPunc += str[i]\n  }\n  let reversed = \"\"\n  for (var i = strNoPunc.length - 1; i >= 0; i--) {\n    reversed += strNoPunc[i]\n  }\n  return reversed === strNoPunc\n}\nconsole.log(isPalindrome('radar'))\nconsole.log(isPalindrome('pasta'))\nconsole.log(isPalindrome('radar!'))\n```\nApparently `isPalindrome` returns a boolean and is able to handle special characters. But what about spaces? What about uppercase letters? Does it handle numbers? More importantly, _which one of those cases are important in your codebase?_\n\nThat's the rub when it comes to refactoring this function. You know more or less what the function does, but what about all the edge cases? What if it's fed a non-string? Does it return a boolean or throw an error? Does that matter for your existing code that's using `isPalindrome`?\n\nIn an ideal world, you'd have some well-written tests that outline the edge cases of your function. Test cases should cover the functionalities and behaviors of your code that are critical for the final product. Try rewriting the function below and running the tests to see if you can do better.\n\n```js js-live scripts=\"mocha,chai\"\nfunction isPalindrome(str) {\n  str = str.toLowerCase()\n  let strNoPunc = \"\"\n  const letters = 'abcdefghijklmnopqrstuvwxyz'.split(\"\")\n  for(var i = 0; i < str.length; i++) {\n    if(letters.indexOf(str[i]) > -1) strNoPunc += str[i]\n  }\n  let reversed = \"\"\n  for (var i = strNoPunc.length - 1; i >= 0; i--) {\n    reversed += strNoPunc[i]\n  }\n  return reversed === strNoPunc\n}\n\ndescribe('isPalindrome', function() {\n  it('should return a boolean', function() {\n    expect(typeof isPalindrome('banana')).to.eq('boolean')\n  })\n  it('should return true for a palindrome', function() {\n    expect(isPalindrome('radar')).to.be.true\n  })\n  it('should return false for non-palindromes', function() {\n    expect(isPalindrome('banana')).to.be.false\n  })\n  it('should ignore special characters', function() {\n    expect(isPalindrome('radar!')).to.be.true\n  })\n  it('should ignore spaces', function() {\n    expect(isPalindrome('my gym')).to.be.true\n  })\n  it('should ignore letter casing', function() {\n    expect(isPalindrome('Eva, can I see bees in a cave?')).to.be.true\n  })\n})\n\nmocha.run()\n```\n\nWere you able to get all the test cases to pass?\n\nDid you write something like the following? If you didn't, can you see what the solution below is missing? Try and add the missing code using the test cases:\n\n```js js-live scripts=\"mocha,chai\"\nfunction isPalindrome(str) {\n  return str === str.split(\"\").reverse().join(\"\")\n}\n\ndescribe('isPalindrome', function() {\n  it('should return a boolean', function() {\n    expect(typeof isPalindrome('banana')).to.eq('boolean')\n  })\n  it('should return true for a palindrome', function() {\n    expect(isPalindrome('radar')).to.be.true\n  })\n  it('should return false for non-palindromes', function() {\n    expect(isPalindrome('banana')).to.be.false\n  })\n  it('should ignore special characters', function() {\n    expect(isPalindrome('radar!')).to.be.true\n  })\n  it('should ignore spaces', function() {\n    expect(isPalindrome('my gym')).to.be.true\n  })\n  it('should ignore letter casing', function() {\n    expect(isPalindrome('Eva, can I see bees in a cave?')).to.be.true\n  })\n})\n\nmocha.run()\n```\n\nIn the code above, we solved the main palindrome problem, but failed to handle special characters, casing, and spaces. Here's the code with solutions for all the tests:\n\n```js js-live scripts=\"mocha,chai\"\nfunction isPalindrome(str) {\n  str = str.toLowerCase().replaceAll(/[^a-z]/g, \"\")\n  return str === str.split(\"\").reverse().join(\"\")\n}\n\ndescribe('isPalindrome', function() {\n  it('should return a boolean', function() {\n    expect(typeof isPalindrome('banana')).to.eq('boolean')\n  })\n  it('should return true for a palindrome', function() {\n    expect(isPalindrome('radar')).to.be.true\n  })\n  it('should return false for non-palindromes', function() {\n    expect(isPalindrome('banana')).to.be.false\n  })\n  it('should ignore special characters', function() {\n    expect(isPalindrome('radar!')).to.be.true\n  })\n  it('should ignore spaces', function() {\n    expect(isPalindrome('my gym')).to.be.true\n  })\n  it('should ignore letter casing', function() {\n    expect(isPalindrome('Eva, can I see bees in a cave?')).to.be.true\n  })\n})\n\nmocha.run()\n```\n\nThis is a small example in isolation, but imagine your code base has many functions like this that are all interconnected in your project. Assuming your tests are up to date, you can hopefully imagine the peace of mind you get from having tests to double-check your code whenever you need to refactor it in the future.\n\n## Tests can be great documentation\n\nDocumentation is a perennial pain for most developers. It's so difficult to keep improving software as well as keeping its documentation up to date because essentially the two are related but disconnected. What if you had documentation that read itself and told you when your code and docs were out of sync?\n\nGood news! That's basically what well-written tests do. Let's look at the case titles from the previous section:\n\n```\nshould return a boolean\nshould return true for a palindrome\nshould return false for non-palindromes\nshould ignore special characters\nshould ignore spaces\nshould ignore letter casing\n```\n\nWell-written tests can be a great reference for understanding how a piece of code works without having to step through the implementation. Looking at the test cases above, you're able to learn a lot about the function in question without even looking at the function's code.\n\nNot only do these tests tell the developer _exactly_ how the function is supposed to behave, when you run the tests they **enforce** those rules as well. Including automation that runs these tests before deploys provides a pretty powerful system to prevent breaking the project when refactoring or introducing new features.\n\n## Closing thoughts \n\nWriting tests is like writing documentation or learning Git: you don't appreciate it until you need it. Because tests don't directly contribute to the functionality of the product, they're often overlooked by teams looking to iterate quickly. You'd be hard-pressed to find good tutorials on tests or courses that bother to spend time teaching how to write them for the same reason.\n\nHowever, the nature of code is that it's temporary. There will always be revisions, refactors, or rewrites to any code that lives long enough to be deemed legacy. In each of those cases, well-written tests can make a huge difference when revisiting old code.\n\nSadly, I didn't actually encounter testing in a meaningful way until I was already employed as a junior developer. When I tried to submit my first pull request at my first job, I had to go back and write tests not only for the code in my pull request, but for code other engineers had merged and left untested. I can tell you from experience that the last few days of your first sprint are not when you want to be learning how to write tests.\n\nYears later, I found myself writing tests to tame a project that was previously seen as an untenable monster of legacy code. Our team inherited the project and codebase from a prevous contractor, and therefore were behind the curve in understanding how everything worked. Good testing practices showed us how we could keep bugs from reaching production and brought a new level of confidence to our team despite our unfamiliar codebase.\n\nTesting is a big subject, but it's an important one. Give it the head space it deserves in your career. The codebase you save might just be your own.\n","internal":{"contentFilePath":"/home/lee/dev/side_projects/blog/content/blog/why-write-tests/index.md"}},"frontmatter":{"title":"Understanding Unix Permissions, chmod, and ls -la","date":"2020-04-25T12:00:00-0400"}}},"staticQueryHashes":["2836739900","4250957540"],"slicesMap":{}}