<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Strings and Things]]></title><description><![CDATA[A blog that's mostly about code. I talk about front-end web development, give career advice, and sometimes ruminate on life lessons learned with connections to code]]></description><link>https://leewarrick.com/blog</link><generator>RSS for Node</generator><lastBuildDate>Thu, 28 Nov 2019 23:33:27 GMT</lastBuildDate><item><title><![CDATA[The Problem with React's Context API]]></title><description><![CDATA[React‚Äôs context API is awesome. As someone that looked at Redux as a junior developer and instantly felt defeated, learning about context‚Ä¶]]></description><link>https://leewarrick.com/blog/the-problem-with-context/</link><guid isPermaLink="false">https://leewarrick.com/blog/the-problem-with-context/</guid><pubDate>Thu, 28 Nov 2019 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/e32a85ecdd68cc08c7896513261f347b/c35de/gorilla.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;A Gorilla looking thoughtful by Rob Schreckhise&quot; title=&quot;A Gorilla looking thoughtful by Rob Schreckhise&quot; src=&quot;https://leewarrick.com/blog/static/e32a85ecdd68cc08c7896513261f347b/a111b/gorilla.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;React‚Äôs context API is awesome. As someone that looked at Redux as a junior developer and instantly felt defeated, learning about context was a relief. I used it in my apps, quickly forgot about Redux, and never looked back.&lt;/p&gt;
&lt;p&gt;That is, until I heard about the supposed preformance problems with the Context API. Now, the big names in the React community will tell you not to worry about performance unless you start seeing issues. And yet, I keep hearing about context problems from other developers. One fellow even mentioned his boss banning the use of Context on their project.&lt;/p&gt;
&lt;p&gt;Let‚Äôs review the Context API in case you‚Äôre unfamiliar before we talk about its problems.&lt;/p&gt;
&lt;h2&gt;Why use the context API?&lt;/h2&gt;
&lt;p&gt;The Context API is useful for sharing state between components that you can‚Äôt easily share with props. Here‚Äôs an example of a button component that needs to set the state of a distant ancestor:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const { useState } = React

function CountDisplay({ count }) {
  return &amp;lt;h2&amp;gt;The Count is: {count}&amp;lt;/h2&amp;gt;
}

function CountButton({ setCount }) {
  return (
    &amp;lt;button onClick={() =&amp;gt; setCount(count =&amp;gt; count + 1)}&amp;gt;
      Increment
    &amp;lt;/button&amp;gt;
  )
}

const OuterWrapper = ({setCount}) =&amp;gt; &amp;lt;InnerWrapper setCount={setCount}/&amp;gt;
const InnerWrapper = ({setCount}) =&amp;gt; &amp;lt;CountButton setCount={setCount}/&amp;gt;

function App() {
  const [count, setCount] = useState(0)
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;CountDisplay count={count} /&amp;gt;
      &amp;lt;OuterWrapper setCount={setCount}/&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

render(App)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The button component is within a few other components further down the tree, but still needs to access state from higher up in the app. So we have to pass &lt;code&gt;setCount&lt;/code&gt; down to each component to finally get it to our &lt;code&gt;CountButton&lt;/code&gt; component. This is affectionately known as ‚Äúprop-drilling‚Äù, and used to be a huge pain point in React.&lt;/p&gt;
&lt;p&gt;The Context API makes short work of situations like this, thankfully.&lt;/p&gt;
&lt;h2&gt;How to use the Context API&lt;/h2&gt;
&lt;p&gt;Kent C. Dodds has a fantastic &lt;a href=&quot;https://kentcdodds.com/blog/application-state-management-with-react&quot;&gt;blog post&lt;/a&gt; that I refer to whenever I implement the Context API. If you don‚Äôt have time to read that, here‚Äôs the short version: Context is a way to share state between unrelated or distant components. All you have to do is wrap your components in a &lt;code&gt;Context.Provider&lt;/code&gt; and then call &lt;code&gt;useContext(Context)&lt;/code&gt; inside that component to access your state and helper functions.&lt;/p&gt;
&lt;p&gt;Here‚Äôs our counter example with context:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const {useContext, useState, createContext} = React

const AppContext = createContext()

function AppProvider(props) {
  const [count, setCount] = useState(0)
  const value = { count, setCount }
  return (
    &amp;lt;AppContext.Provider value={value}&amp;gt;
      {props.children}
    &amp;lt;/AppContext.Provider&amp;gt;
  )
}

function CountDisplay() {
  const { count } = useContext(AppContext)
  return &amp;lt;h2&amp;gt;The Count is: {count}&amp;lt;/h2&amp;gt;
}

function CountButton() {
  const { setCount } = useContext(AppContext)
  return (
    &amp;lt;button onClick={() =&amp;gt; setCount(count =&amp;gt; count + 1)}&amp;gt;
      Increment
    &amp;lt;/button&amp;gt;
  )
}

const OuterWrapper = () =&amp;gt; &amp;lt;InnerWrapper /&amp;gt;

const InnerWrapper = () =&amp;gt; &amp;lt;CountButton /&amp;gt;

function App() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;AppProvider&amp;gt;
        &amp;lt;CountDisplay/&amp;gt;
        &amp;lt;OuterWrapper/&amp;gt;
      &amp;lt;/AppProvider&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

render(App)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have &lt;code&gt;CountDisplay&lt;/code&gt; and &lt;code&gt;CountButton&lt;/code&gt; components that both need to interact with the higher-level &lt;code&gt;count&lt;/code&gt; state in our context. We start by making a context with &lt;code&gt;createContext&lt;/code&gt;, then a provider component in &lt;code&gt;AppProvider&lt;/code&gt; to wrap our dependent components, and finally call &lt;code&gt;useContext&lt;/code&gt; in each component to pull out the values we need. It doesn‚Äôt matter how far apart the components are as long as they‚Äôre wrapped in a provider.&lt;/p&gt;
&lt;p&gt;Pretty great right?&lt;/p&gt;
&lt;h2&gt;Kent C. Dodd‚Äôs Optimizations üìà&lt;/h2&gt;
&lt;p&gt;We can improve on this a little bit by implementing some stuff that Kent has in his article on state management. Let‚Äôs take a look:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const {useContext, useState, createContext, useMemo} = React
const AppContext = createContext()

// instead of calling useContext directly in our components,
// we make our own hook that throws an error if we try to
// access context outside of the provider
function useAppContext() {
  const context = useContext(AppContext)
  if (!context)
    throw new Error(&apos;AppContext must be used with AppProvider!&apos;)
  return context
}

function AppProvider(props) {
  const [count, setCount] = useState(0)
  // here we use useMemo for... reasons.
  // this says don&apos;t give back a new count/setCount unless count changes
  const value = useMemo(() =&amp;gt; ({ count, setCount }), [count])
  return &amp;lt;AppContext.Provider value={value} {...props} /&amp;gt;
}

function CountDisplay() {
  const { count } = useAppContext()
  return &amp;lt;h2&amp;gt;The Count is: {count}&amp;lt;/h2&amp;gt;
}

function CountButton() {
  const { setCount } = useAppContext()
  return (
    &amp;lt;button onClick={() =&amp;gt; setCount(count =&amp;gt; count + 1)}&amp;gt;
      Increment
    &amp;lt;/button&amp;gt;
  )
}

const OuterWrapper = () =&amp;gt; &amp;lt;InnerWrapper /&amp;gt;

const InnerWrapper = () =&amp;gt; &amp;lt;CountButton /&amp;gt;

function App() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;AppProvider&amp;gt;
        &amp;lt;CountDisplay /&amp;gt;
        &amp;lt;OuterWrapper /&amp;gt;
      &amp;lt;/AppProvider&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

render(App)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing we do is throw an error if we try to access the context outside of our provider. This is a great idea to improve the developer experience of your app (aka: make the console scream at you when you forget how context works).&lt;/p&gt;
&lt;p&gt;The second thing is to memoize our context value to only re-render if the &lt;code&gt;count&lt;/code&gt; changes. Now, &lt;code&gt;useMemo&lt;/code&gt; is a difficult thing to wrap your head around, but the basic gist is that when you memoize something, you‚Äôre saying that you won‚Äôt return that value again unless your specified value changes. Kent has a &lt;a href=&quot;https://kentcdodds.com/blog/usememo-and-usecallback&quot;&gt;great article&lt;/a&gt; on that too if you want to read more.&lt;/p&gt;
&lt;p&gt;I can‚Äôt discern a difference between using &lt;code&gt;useMemo&lt;/code&gt; and not using it, but I would venture that if you‚Äôre doing some heavy lifting in your Context Provider, it might be beneficial to apply memoization. If you read Kent‚Äôs article on &lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useCallback&lt;/code&gt; he cautions against using them unless you start to see performance hits. (Full Disclosure: I‚Äôve never needed to use either one.)&lt;/p&gt;
&lt;p&gt;Kent also spreads his &lt;code&gt;props&lt;/code&gt; on the provider instead of using &lt;code&gt;props.children&lt;/code&gt;, which is a neat trick, so I included that as well.&lt;/p&gt;
&lt;h2&gt;The Context API‚Äôs Dirty Little Secret ü§´&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/c35de/trashman.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Man making the shush gesture with his finger over his lip, laying on a mound of trash. Photo by Jordan Beltran&quot; title=&quot;Man making the shush gesture with his finger over his lip, laying on a mound of trash. Photo by Jordan Beltran&quot; src=&quot;https://leewarrick.com/blog/static/d204d0e47f5b8ef1bb8bcbba4ab82fa3/a111b/trashman.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Boy, the Context API sure is great. It‚Äôs super easy to use compared to Redux and requires a lot less code, so why &lt;em&gt;wouldn‚Äôt&lt;/em&gt; you use it?&lt;/p&gt;
&lt;p&gt;The problem with context is simple: &lt;strong&gt;Everything that consumes a context re-renders everytime that context‚Äôs state changes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That means that if you‚Äôre consuming your context all over the place in your app, or worse, using one context for your entire app‚Äôs state, you‚Äôre causing a ton of re-renders all over the place!&lt;/p&gt;
&lt;p&gt;Let‚Äôs visualize this with a simple app. Let‚Äôs make a context with a counter and a message. The message will never change, but be consumed by three components that display the message in a random color on each render. The count will be consumed by one component, and be the only value that changes.&lt;/p&gt;
&lt;p&gt;That sounds like a middle school math problem, but if you look at this code and the resulting app, the problem becomes blatantly obvious:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const {useContext, useState, createContext} = React
const AppContext = createContext()

function useAppContext() {
  const context = useContext(AppContext)
  if (!context)
    throw new Error(&apos;useAppContext must be used within AppProvider!&apos;)
  return context
}

function AppProvider(props) {
  // the count for our counter component
  const [count, setCount] = useState(0)
  // this message never changes!
  const [message, setMessage] = useState(&apos;Hello from Context!&apos;)
  const value = {
    count,
    setCount,
    message,
    setMessage
  }
  return &amp;lt;AppContext.Provider value={value} {...props}/&amp;gt;
}

function Message() {
  const { message } = useAppContext()
  // the text will render to a random color for
  // each instance of the Message component
  const getColor = () =&amp;gt; (Math.floor(Math.random() * 255))
  const style = {
    color: `rgb(${getColor()},${getColor()},${getColor()})`
  }
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h4 style={style}&amp;gt;{message}&amp;lt;/h4&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

function Count() {
  const {count, setCount} = useAppContext()
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;Current count from context: {count}&amp;lt;/h3&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;Increment&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

function App() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;AppProvider&amp;gt;
        &amp;lt;h2&amp;gt;Re-renders! üò©&amp;lt;/h2&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Count /&amp;gt;
      &amp;lt;/AppProvider&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
render(App)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything re-renders when we click increment üò±.&lt;/p&gt;
&lt;p&gt;The message components don‚Äôt even use the &lt;code&gt;count&lt;/code&gt; from our context, but they re-render anyway. Yikes!&lt;/p&gt;
&lt;h3&gt;What about memoization?&lt;/h3&gt;
&lt;p&gt;Maybe we just forgot to use &lt;code&gt;useMemo&lt;/code&gt; like Kent did in his example. Let‚Äôs memoize our context and see what happens:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const {useContext, useState, createContext, useMemo} = React
const AppContext = createContext()

function useAppContext() {
  const context = useContext(AppContext)
  if (!context) throw new Error(&apos;useAppContext must be used within AppProvider!&apos;)
  return context
}

function AppProvider(props) {
  const [count, setCount] = useState(0)
  const [message, setMessage] = useState(&apos;Hello from Context!&apos;)
  // here we pass our value to useMemo,
  // and tell useMemo to only give us new values
  // when count or message change
  const value = useMemo(() =&amp;gt; ({
    count,
    setCount,
    message,
    setMessage
  }), [count, message])
  return &amp;lt;AppContext.Provider value={value} {...props}/&amp;gt;
}

function Message() {
  const { message } = useAppContext()
  const getColor = () =&amp;gt; (Math.floor(Math.random() * 255))
  const style = {
    color: `rgb(${getColor()},${getColor()},${getColor()})`
  }
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h4 style={style}&amp;gt;{message}&amp;lt;/h4&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

function Count() {
  const {count, setCount} = useAppContext()
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;Current count from context: {count}&amp;lt;/h3&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;Increment&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

function App() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;AppProvider&amp;gt;
        &amp;lt;h2&amp;gt;Re-renders! üò©&amp;lt;/h2&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Count /&amp;gt;
      &amp;lt;/AppProvider&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
render(App)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nope! Memoization with &lt;code&gt;useMemo&lt;/code&gt; doesn‚Äôt help at all!&lt;/p&gt;
&lt;h3&gt;What about components that don‚Äôt consume Context, do they re-render?&lt;/h3&gt;
&lt;p&gt;That‚Äôs an excellent question, let‚Äôs test it with a Message component that doesn‚Äôt consume context:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const {useContext, useState, createContext, useMemo} = React
const AppContext = createContext()

function useAppContext() {
  const context = useContext(AppContext)
  if (!context) throw new Error(&apos;useAppContext must be used within AppProvider!&apos;)
  return context
}

function AppProvider(props) {
  const [count, setCount] = useState(0)
  const [message, setMessage] = useState(&apos;Hello from Context!&apos;)
  const value = useMemo(() =&amp;gt; ({
    count,
    setCount,
    message,
    setMessage
  }), [count, message])
  return &amp;lt;AppContext.Provider value={value} {...props}/&amp;gt;
}

// this component does NOT consume the context
// but is still within the Provider component
function IndependentMessage() {
  const getColor = () =&amp;gt; (Math.floor(Math.random() * 255))
  const style = {
    color: `rgb(${getColor()},${getColor()},${getColor()})`
  }
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h4 style={style}&amp;gt;I&apos;m my own Independent Message!&amp;lt;/h4&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

function Message() {
  const { message } = useAppContext()
  const getColor = () =&amp;gt; (Math.floor(Math.random() * 255))
  const style = {
    color: `rgb(${getColor()},${getColor()},${getColor()})`
  }
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h4 style={style}&amp;gt;{message}&amp;lt;/h4&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

function Count() {
  const {count, setCount} = useAppContext()
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;Current count from context: {count}&amp;lt;/h3&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;Increment&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

function App() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;AppProvider&amp;gt;
        &amp;lt;h2&amp;gt;Re-renders! üò©&amp;lt;/h2&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;IndependentMessage /&amp;gt;
        &amp;lt;Count /&amp;gt;
      &amp;lt;/AppProvider&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
render(App)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, this is the only good news so far. &lt;strong&gt;Only components that call &lt;code&gt;useContext&lt;/code&gt; re-render whenever the context‚Äôs state changes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Still, this is bad news for our app. We don‚Äôt want to trigger a bunch of unnecessary re-renders everywhere we use a context.&lt;/p&gt;
&lt;p&gt;Imagine if those message components were doing a lot of work like calculating animations, or if we had a huge React app with lots of components dependent on our context. That could lead to pretty serious performance issues, right?&lt;/p&gt;
&lt;h2&gt;Should we stop using Context?&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/8c27d995b617560da5b04f46a8069006/c35de/trash.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Sign showing man throwing away trash, photo by Gary Chan&quot; title=&quot;Sign showing man throwing away trash, photo by Gary Chan&quot; src=&quot;https://leewarrick.com/blog/static/8c27d995b617560da5b04f46a8069006/a111b/trash.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôll go ahead and say this now: &lt;strong&gt;no, this isn‚Äôt a reason to stop using context&lt;/strong&gt;. There‚Äôs a ton of apps out there using context and chugging along just fine, including a bunch of my own apps.&lt;/p&gt;
&lt;p&gt;Still, performance is kind of a big deal. I don‚Äôt want to leave you sitting up at night worrying about the Context API‚Äôs dirty little secret. So let‚Äôs talk about some ways to deal with this re-render business.&lt;/p&gt;
&lt;h3&gt;Option 1: Don‚Äôt worry at all. Keep on Context‚Äôn like you do. YOLO ü§™!&lt;/h3&gt;
&lt;p&gt;I‚Äôve basically used Context a whole bunch in a lot of various apps without memoization, at the top level of my app, and consumed by a bunch of components without noticing any performance hits at all. Like I said before, a lot of the React folks say you shouldn‚Äôt even worry about performance optimizations until you see performance impacts.&lt;/p&gt;
&lt;p&gt;Still, this strategy won‚Äôt work for everyone. You may already have performance issues in your app, or if your app processes a lot of logic or animations, you may see performance issues as your app grows and end up doing some serious refactoring down the road.&lt;/p&gt;
&lt;h3&gt;Option 2: Use Redux or Mobx&lt;/h3&gt;
&lt;p&gt;Redux and Mobx both use the context API, so how do they help? The store that‚Äôs shared by these state management libraries with context is a little different from sharing state directly with context. When you‚Äôre using Redux and Mobx, there‚Äôs a diffing algorithm at work that makes sure to only re-render the components that actually need to re-render.&lt;/p&gt;
&lt;p&gt;Still, context was supposed to save us from having to learn Redux and Mobx! There‚Äôs a lot of abtractions and boilerplate involved in using a state management library, making it an unattractive solution to some folks.&lt;/p&gt;
&lt;p&gt;Plus, isn‚Äôt keeping all of our state in global state a bad practice?&lt;/p&gt;
&lt;h3&gt;Option 3: Use Multiple Contexts, and keep state close to its Dependent Components&lt;/h3&gt;
&lt;p&gt;This solution takes the most finesse to pull off, but gives you the best performance without reaching for Redux and Mobx. It relies on being smart about your state management choices, and only passing state up to a context if you need to share it between distant components.&lt;/p&gt;
&lt;p&gt;There‚Äôs a few key tenants to this strategy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Let a component manage its own state if it can.&lt;/strong&gt; This is a good practice to follow regardless of your choice of state management. For example, if you have a modal that needs to keep track of an open/closed state, but no other components need to know if that modal is open, keep that open/closed state in the modal. Don‚Äôt push state into context (or Redux) if you don‚Äôt have to!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If your state is shared between a parent and a few children, just prop it down.&lt;/strong&gt; This is the old school method of sharing state. Just pass it as props to the children components that need it. Passing props or ‚ÄúProp-drilling‚Äù can be miserable with deeply nested components, but if you‚Äôre only passing things down a few levels, you should probably just do it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If the previous two things fail, use context but keep it close to the components that depend on it.&lt;/strong&gt; This means if you need to share some state, like a form for instance with multiple components, go ahead and make a separate context for just the form and wrap the form components in your provider.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That last one deserves an example. Let‚Äôs apply it to our problem app from before. We can fix those re-renders by separating the &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; into their own contexts.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const { useContext, useState, createContext } = React
const CountContext = createContext()

// Now count context only worries about count!
function useCountContext() {
  const context = useContext(CountContext)
  if (!context)
    throw new Error(&apos;useCountContext must be used within CountProvider!&apos;)
  return context
}

function CountProvider(props) {
  const [count, setCount] = useState(0)
  const value = { count, setCount }
  return &amp;lt;CountContext.Provider value={value} {...props}/&amp;gt;
}

// And message context only worries about message!
const MessageContext = createContext()

function useMessageContext() {
  const context = useContext(MessageContext)
  if (!context)
    throw new Error(&apos;useMessageContext must be used within MessageProvider!&apos;)
  return context
}

function MessageProvider(props) {
  const [message, setMessage] = useState(&apos;Hello from Context!&apos;)
  const value = { message, setMessage }
  return &amp;lt;MessageContext.Provider value={value} {...props}/&amp;gt;
}

function Message() {
  const { message } = useMessageContext()
  const getColor = () =&amp;gt; (Math.floor(Math.random() * 255))
  const style = {
    color: `rgb(${getColor()},${getColor()},${getColor()})`
  }
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h4 style={style}&amp;gt;{message}&amp;lt;/h4&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

function Count() {
  const {count, setCount} = useCountContext()
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h3&amp;gt;Current count from context: {count}&amp;lt;/h3&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;Increment&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

function App() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;No Unnecessary Re-renders! üòé&amp;lt;/h2&amp;gt;
      &amp;lt;MessageProvider&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Message /&amp;gt;
        &amp;lt;Message /&amp;gt;
      &amp;lt;/MessageProvider&amp;gt;
      &amp;lt;CountProvider&amp;gt;
        &amp;lt;Count /&amp;gt;
      &amp;lt;/CountProvider&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
render(App)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now our state is only shared with the components that care about that state. When we increment, the colors of our message components stay the same because &lt;code&gt;count&lt;/code&gt; lives outside of &lt;code&gt;messageContext&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Although this article‚Äôs title is a little salacious and the ‚Äúproblem‚Äù with context  may not be the boogie man some might envision it to be, I still think this is worth talking about. React‚Äôs flexibility makes it both a great framework for beginners as well as a devastating footgun for those that don‚Äôt know its inner-workings. I don‚Äôt forsee a lot of people tripping over this particular detail, but if you‚Äôre using context and seeing performance issues, it‚Äôs a good thing to know!&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[What are debounce and throttle functions, and how do you write them in JavaScript and React?]]></title><description><![CDATA[Have you ever heard the story of the QWERTY layout on a keyboard? The popular legend is that it was too easy to type if the letters were‚Ä¶]]></description><link>https://leewarrick.com/blog/how-to-debounce/</link><guid isPermaLink="false">https://leewarrick.com/blog/how-to-debounce/</guid><pubDate>Thu, 17 Oct 2019 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/91985b102e11e1a9b8ac2de71cb5733e/c35de/typewriter.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of Typewriter by Pereanu Sebastian&quot; title=&quot;Photo of Typewriter by Pereanu Sebastian&quot; src=&quot;https://leewarrick.com/blog/static/91985b102e11e1a9b8ac2de71cb5733e/a111b/typewriter.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Have you ever heard the story of the QWERTY layout on a keyboard? The &lt;a href=&quot;https://en.wikipedia.org/wiki/Typewriter#QWERTY&quot;&gt;popular legend&lt;/a&gt; is that it was too easy to type if the letters were arranged alphabetically, and this caused mechanical typewriters to jam. The most common letters were too close together, supposedly. So to fix this, the QWERTY layout was invented, to &lt;em&gt;slow down the typist&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This Dilbertian engineering idea is eerily similar to what a debounce function does.&lt;/p&gt;
&lt;h2&gt;What is a debounce?&lt;/h2&gt;
&lt;p&gt;A debounce function is meant to slow down something in your application, typically a function call. The best way to wrap your head around this is by example.&lt;/p&gt;
&lt;p&gt;Consider this: you have a search input on your site somewhere, and &lt;em&gt;as the user types&lt;/em&gt;, you want to go fetch some search results to try and match what the user is looking for before they finish typing.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Piece of cake!&lt;/em&gt;, you think. With React, you can attach your API call to your input‚Äôs &lt;code&gt;onChange&lt;/code&gt; event like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function SearchForm() {
  const [inputVal, setInputVal] = React.useState(&quot;&quot;)
  const [callCount, setCallCount] = React.useState(0)

  function handleChange(e) {
    setInputVal(e.target.value)
    // let&apos;s say this was an API call
    // to add auto-complete data
    setCallCount(callCount + 1)
  }

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;Type in this Box ‚¨áÔ∏è&amp;lt;/h2&amp;gt;
      &amp;lt;input onChange={handleChange} value={inputVal}/&amp;gt;
      &amp;lt;p&amp;gt;Current Data: {inputVal}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Calls Done: {callCount}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that as you type in the search box, if your API function is attached to your input‚Äôs &lt;code&gt;onChange&lt;/code&gt; event, you‚Äôll make an API call &lt;em&gt;every time the user presses a key&lt;/em&gt; üò±. If you couple this with the small delay it takes to make an API call, you can imagine the traffic jam that this would cause as you have multiple API calls being made and flooding back in.&lt;/p&gt;
&lt;p&gt;This isn‚Äôt what we imagined when we first cooked up this auto-populating search box scheme. What we &lt;em&gt;really&lt;/em&gt; want to do is to make our API call when the user pauses or stops typing.&lt;/p&gt;
&lt;p&gt;This is the purpose of a &lt;strong&gt;debounce&lt;/strong&gt; function, to limit the amount of calls that can happen in a given amount of time.&lt;/p&gt;
&lt;h2&gt;How to debounce a function in JavaScript&lt;/h2&gt;
&lt;p&gt;So we need to fire fewer API calls, but how do we do it?&lt;/p&gt;
&lt;p&gt;Before we jump into React, let‚Äôs give this a shot with regular JavaScript. Let‚Äôs put our fake API call in its own function, then wrap it in our debounce function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let callCount = 0

// this is just a promise that resolves after 300ms
// and console logs a counter
function fakeAPICall() {
  return new Promise(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; {
      callCount++
      console.log(&quot;Calls Made:&quot; + callCount)
      resolve()
    }, 300)
  })
}

fakeAPICall() // 1
fakeAPICall() // 2
fakeAPICall() // 3

function debounce(callback) {
    // each call to debounce creates a new timeoutId
    let timeoutId
    return function() {
      // this inner function keeps a reference to
      // timeoutId from the function outside of it
      clearTimeout(timeoutId)
      timeoutId = setTimeout(callback, 800)
    }
}

// wraps the fakeAPICall function and returns
// a function that calls fakeAPICall
const debouncedFakeApiCall = debounce(fakeAPICall)

// all these calls cancel each other
// Until the last call finally happens after 800 ms
debouncedFakeApiCall()
debouncedFakeApiCall()
debouncedFakeApiCall()
debouncedFakeApiCall()
debouncedFakeApiCall()
debouncedFakeApiCall()
debouncedFakeApiCall() // 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;p&gt;Without a debounce, we get 3 calls, but with a debounce, we only fire an API call &lt;strong&gt;on the last function call&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;How it works&lt;/h3&gt;
&lt;p&gt;The most basic, critical piece of this debounce function is to delay the actual API call, then as more calls come in, cancel and reset the delay for the API call. We do this with &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;clearTimeout&lt;/code&gt; in the JavaScript above.&lt;/p&gt;
&lt;p&gt;If you noticed the debounce function taking a function and returning a another function, that is an example of a closure in JavaScript. When we debounce a function, we pass our original function in, and wrap it in another function that delays calls to the original. In this way our debounce function is reusable throughout our program. We could debounce as many different functions as we want, &lt;strong&gt;because each one has its own &lt;code&gt;timeoutId&lt;/code&gt; variable&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;How to write a debounce function in React&lt;/h2&gt;
&lt;p&gt;React allows us to encapsulate logic in components, so we can skip the fancy JavaScript closures and just use our component to write a debounce function.&lt;/p&gt;
&lt;p&gt;Let‚Äôs take a look:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// just an async helper
function fakeAPICall() {
  return new Promise(resolve =&amp;gt; {
    setTimeout(resolve, 300)
  })
}

function SearchForm() {
  const [inputVal, setInputVal] = React.useState(&quot;&quot;)
  const [query, setQuery] = React.useState(&quot;&quot;)
  const inputRef = React.useRef(&quot;&quot;)
  const [callCount, setCallCount] = React.useState(0)
  const timeoutId = React.useRef()

  function handleChange(e) {
    setInputVal(e.target.value)
    // mimic the value so we can access
    // the latest value in our API call
    inputRef.current = e.target.value
  }

  React.useEffect(() =&amp;gt; {
    // if the user keeps typing, stop the API call!
    clearTimeout(timeoutId.current)
    // don&apos;t make an API call with no data
    if (!inputVal.trim()) return
    // capture the timeoutId so we can
    // stop the call if the user keeps typing
    timeoutId.current = setTimeout(() =&amp;gt; {
      // grab our query, but store it in state so
      // I can show it to you below in the example üòÑ
      setQuery(inputRef.current)
      fakeAPICall()
      // here we pass a callback so we get the current callCount value
      // from the useState hook&apos;s setter function
      // we use a Ref for timeoutId to avoid this same problem
      .then(() =&amp;gt; setCallCount(callCount =&amp;gt; callCount + 1))
    }, 800)
  }, [inputVal])

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;Type in this Box ‚¨áÔ∏è&amp;lt;/h2&amp;gt;
      &amp;lt;input onChange={handleChange} value={inputVal}/&amp;gt;
      &amp;lt;p&amp;gt;Current Data: {inputVal}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Query Sent: {query}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Calls Done: {callCount}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

render(SearchForm)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now as we type, the component won‚Äôt actually make any API calls until the typing stops.&lt;/p&gt;
&lt;p&gt;The only difference here is that instead of writing a closure, we‚Äôre using a React Ref for our &lt;code&gt;timeoutId&lt;/code&gt;. Refs are React‚Äôs version of instance variables, so each SearchForm component that we make should get its own &lt;code&gt;timeoutId&lt;/code&gt;. If you want to learn more about Refs and &lt;code&gt;useEffect&lt;/code&gt;, &lt;a href=&quot;https://leewarrick.com/blog/react-use-effect-explained/&quot;&gt;I wrote another post on that topic&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What is a throttle?&lt;/h2&gt;
&lt;p&gt;This might not be exactly what you imagined when you envisioned this functionality. For example, as you type into Google search, you still get autocomplete suggestions as you type, even if you haven‚Äôt stopped typing.&lt;/p&gt;
&lt;p&gt;So while our previous examples will ensure we do the &lt;em&gt;fewest&lt;/em&gt; API calls possible, we may want to tweak our solution to &lt;strong&gt;make an API call every so often as the user types&lt;/strong&gt;. This would be a &lt;strong&gt;throttle&lt;/strong&gt; function.&lt;/p&gt;
&lt;h2&gt;How to write a throttle in JavaScript&lt;/h2&gt;
&lt;p&gt;Let‚Äôs tweak our JavaScript debounce implementation so that we only make our API call every 800ms.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let callCount = 0

function fakeAPICall() {
  return new Promise(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; {
      callCount++
      console.log(&quot;Calls Made:&quot; + callCount)
      resolve()
    }, 300)
  })
}

function throttle(cb) {
    let makingCall
    return function() {
      // if I&apos;m in progress of making an API call,
      // don&apos;t trigger another one
      if (makingCall) return
      // set up API call to fire
      makingCall = true
      // give the user some time to type by delaying the actual call
      setTimeout(() =&amp;gt; {
        makingCall = false
        cb()
      }, 1000)
    }
}

const throttledFakeApiCall = throttle(fakeAPICall)

// imagine the user starting and stopping typing
// we&apos;ll only make a call every 800ms
throttledFakeApiCall() // 1
throttledFakeApiCall()
throttledFakeApiCall()
setTimeout(() =&amp;gt; {
  throttledFakeApiCall()
  throttledFakeApiCall()
}, 600)
setTimeout(() =&amp;gt; {
  throttledFakeApiCall() // 2
  throttledFakeApiCall()
}, 1200)
setTimeout(() =&amp;gt; {
  throttledFakeApiCall()
  throttledFakeApiCall()
}, 1800)
setTimeout(() =&amp;gt; {
  throttledFakeApiCall() // 3
  throttledFakeApiCall()
}, 2400)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now as our throttle function fires, we are limiting our calls to happen every 800ms.&lt;/p&gt;
&lt;h3&gt;How it works&lt;/h3&gt;
&lt;p&gt;This new version uses a simple &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; value to determine if we should trigger more calls instead of clearing the timeout and cancelling previous calls. Now the first call to the throttled function tees up the call, and the subsequent calls are ignored until the API call is complete.&lt;/p&gt;
&lt;h2&gt;How to write a throttle in React&lt;/h2&gt;
&lt;p&gt;Let‚Äôs apply this same functionality to our previous React example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// just an async helper
function fakeAPICall() {
  return new Promise(resolve =&amp;gt; {
    setTimeout(resolve, 300)
  })
}

function SearchForm() {
  const [inputVal, setInputVal] = React.useState(&quot;&quot;)
  const [query, setQuery] = React.useState(&quot;&quot;)
  const inputRef = React.useRef(&quot;&quot;)
  const [callCount, setCallCount] = React.useState(0)
  const makingCall = React.useRef(false)

  function handleChange(e) {
    setInputVal(e.target.value)
    // mimic the value so we can access
    // the latest value in our API call
    inputRef.current = e.target.value
  }

  React.useEffect(() =&amp;gt; {
    // if there&apos;s no value or we&apos;ve already triggered a call
    // prevent further calls
    if (!inputVal.trim() || makingCall.current) return
    makingCall.current = true
    setTimeout(() =&amp;gt; {
      // again, this setQuery is just so I can
      // render the query below.
      // if this API call were real, we&apos;d probably
      // pass the query into the API call function
      setQuery(inputRef.current)
      fakeAPICall()
      .then(() =&amp;gt; {
        setCallCount(callCount =&amp;gt; callCount + 1)
        makingCall.current = false
      })
    }, 1000)
  }, [inputVal])

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;Type in this Box ‚¨áÔ∏è&amp;lt;/h2&amp;gt;
      &amp;lt;input onChange={handleChange} value={inputVal}/&amp;gt;
      &amp;lt;p&amp;gt;Current Data: {inputVal}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Query Sent: {query}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Calls Done: {callCount}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

render(SearchForm)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Success! Now as the user types, every 800ms we make a call for an autocomplete suggestion. This means &lt;strong&gt;more API calls, but better user experience&lt;/strong&gt;, at least in the case of our search autocomplete example.&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;So there you have it: throttling and debounce functions in JS and React.&lt;/p&gt;
&lt;p&gt;But would you ever implement this yourself in real life?&lt;/p&gt;
&lt;p&gt;Sure! If you just needed simple functionality like this, you could absolutely manage your own debounce logic/helpers in your app. However, there‚Äôs no shame in pulling in Lodash and using the &lt;a href=&quot;https://lodash.com/docs/4.17.15#debounce&quot;&gt;debounce&lt;/a&gt; or &lt;a href=&quot;https://lodash.com/docs/4.17.15#throttle&quot;&gt;throttle&lt;/a&gt; functions that they‚Äôve implemented.&lt;/p&gt;
&lt;p&gt;I find it fun to try and implement my own solutions, and I think it‚Äôs worth the mental gymnastics to give this stuff a shot in your own code every once in a while. But don‚Äôt be fooled, nobody will judge you if you reach for a third-party solution!&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[Front-end Fisticuffs: Angular vs React vs Vue in 2019]]></title><description><![CDATA[Being a front-end developer is a bit like being a cowboy in a rodeo. As a developer, you‚Äôll find yourself wrangling a new framework over and‚Ä¶]]></description><link>https://leewarrick.com/blog/angular-vs-react-vs-vue/</link><guid isPermaLink="false">https://leewarrick.com/blog/angular-vs-react-vs-vue/</guid><pubDate>Sat, 05 Oct 2019 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/5aca234f740d624418ae46972aae98c7/c35de/cowboy.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Cowboy riding horse and kicking up dirt by Lee Pigott&quot; title=&quot;Cowboy riding horse and kicking up dirt by Lee Pigott&quot; src=&quot;https://leewarrick.com/blog/static/5aca234f740d624418ae46972aae98c7/a111b/cowboy.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Being a front-end developer is a bit like being a cowboy in a rodeo. As a developer, you‚Äôll find yourself wrangling a new framework over and over because of the speed at which the front-end landscape evolves. Sure, learning comes with the territory as a developer, but front-end development in particular is becoming quite the skillset to maintain.&lt;/p&gt;
&lt;p&gt;The fact is, you‚Äôre likely going to need to know at least one if you‚Äôre going to become a web developer. Before we talk about choosing one to spend your time on, let‚Äôs first highlight the problems they solve.&lt;/p&gt;
&lt;h2&gt;Why use a framework?&lt;/h2&gt;
&lt;p&gt;Three weeks into a boot camp, I was amazed with the things I could build with HTML/CSS/JS, including &lt;a href=&quot;https://leewarrick.com/rpg&quot;&gt;a dice-roll based RPG for the browser.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôve often wanted to make improvements to that game, but the thought of adding features or refactoring has held me back. The problem is, &lt;a href=&quot;https://github.com/mynar7/rpg/blob/master/assets/script.js&quot;&gt;it‚Äôs written with a thousand lines of spaghetti jQuery.&lt;/a&gt; I can only imagine the challenge of working on a project like a banking application before frameworks came onto the scene.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Front-end frameworks are a response to the challenge of increased complexity and scale in web applications.&lt;/strong&gt; As we began making bigger web applications that do more and more for the user, we had to find a way to wrangle increasing amounts of logic, traffic, and code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frameworks handle the problem of scope by separating code into components&lt;/strong&gt;. A component can be purely visual, functional, or both. For the most part, JavaScript you write in a component is scoped to that component, providing isolation from other parts of the codebase. You don‚Äôt have to worry as much about conflicting code when using components. &lt;strong&gt;Components are also reusable&lt;/strong&gt;, meaning you can accomplish more with less code.&lt;/p&gt;
&lt;p&gt;Frameworks have performance benefits over plain JavaScript or jQuery. Specifically, &lt;strong&gt;frameworks optimize re-rendering&lt;/strong&gt;, or in laymen‚Äôs terms, updating the page‚Äôs HTML. JavaScript‚Äôs DOM API (all the &lt;code&gt;document.getElementById&lt;/code&gt; stuff), is resource intensive for the browser. &lt;strong&gt;Frameworks increase performance by minimizing the actual changes to the HTML&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frameworks also help mitigate large amounts of traffic to a website.&lt;/strong&gt; Instead of having one server build a new HTML file for each user and request, we can simply send the entire app to each user and let the user‚Äôs browser handle re-rendering. This way the server only has to serve HTML/CSS/JS once, and can communicate to the browser with only data after that.&lt;/p&gt;
&lt;h3&gt;But‚Ä¶&lt;/h3&gt;
&lt;p&gt;There‚Äôs a few downsides to frameworks. It‚Äôs more JavaScript for the browser to run, which can be costly in terms of load times when a user first visits your site. It‚Äôs also another layer of complexity for you to deal with as a developer, adding to your growing list of skills to maintain.&lt;/p&gt;
&lt;p&gt;If you‚Äôre building a static site like a business information page, you might not need a framework. But for complex applications like your banking website or the game I mentioned above, a framework can bring a lot to the table, albeit with its own costs.&lt;/p&gt;
&lt;h2&gt;The Big 3: Angular, React, and Vue&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/3d7cb1773b4a5026fa0ee52622d6d1cb/c35de/threehorses.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Three Horses, Photo by Doruk Yemenici&quot; title=&quot;Three Horses, Photo by Doruk Yemenici&quot; src=&quot;https://leewarrick.com/blog/static/3d7cb1773b4a5026fa0ee52622d6d1cb/a111b/threehorses.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Before we talk about picking a framework, let‚Äôs talk about the differences between them. As of 2019, there‚Äôs three big players in the JavaScript front-end framework game: Angular, React and Vue.&lt;/p&gt;
&lt;h3&gt;Angular&lt;/h3&gt;
&lt;p&gt;Angular is a Google invention. It all started with AngularJS, which exploded onto the scene and saw widespread use. Then came React, and the Angular team rewrote the entire framework completely and called it Angular 2 (Then they skipped version 3 and went directly to 4 and we‚Äôre currently on version 7).&lt;/p&gt;
&lt;p&gt;Basically AngularJS and Angular 2+ are completely different beasts, and so a large amount of the AngularJS crowd switched to React when version 2 came out.&lt;/p&gt;
&lt;h4&gt;The Good&lt;/h4&gt;
&lt;p&gt;Angular absolutely rocks for enterprise development. If you want to work for a big company, Angular is a fantastic choice. Angular is &lt;strong&gt;batteries included&lt;/strong&gt;, meaning it comes with its own packages and solutions for the common things you want to do. For example, if you want to make an API call, there‚Äôs a feature for that. Internationalization, Global State Management and other Angular libraries/features are all built and maintained by the Angular team.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Angular is also the most opinionated of the Big 3.&lt;/strong&gt; And because of its opinionated nature, &lt;strong&gt;most Angular projects look the same&lt;/strong&gt;. When I say ‚Äúopinionated‚Äù I mean that Angular has a particular method or way of doing what you want to accomplish. This means that once you learn it, you likely can work on any other Angular codebase with little effort.&lt;/p&gt;
&lt;h4&gt;The Bad&lt;/h4&gt;
&lt;p&gt;Being opinionated is a double-edged sword. Yes, it means that everyone is probably doing something the same way, but remember that Angular was written by Google Engineers. So the ‚ÄúAngular Way‚Äù does not necessarily mean the easy way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TypeScript is mandatory&lt;/strong&gt; in Angular, and &lt;strong&gt;the Angular team loves RxJS&lt;/strong&gt;, so that‚Äôs also rolled into the framework. NGRX, Angular‚Äôs state management library, makes Redux look lightweight by comparison. All this adds up to a &lt;strong&gt;fairly steep learning curve for the novice developer.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Angular also wraps its components in HTML elements in such a way that CSS is scoped by default. There‚Äôs no way to turn it off either. Because of this, it can be incredibly difficult to override a component‚Äôs CSS when you need to.&lt;/p&gt;
&lt;h4&gt;The Ugly&lt;/h4&gt;
&lt;p&gt;Working with the module pattern in Angular is frustrating for beginners. Every component comes with an HTML, CSS, TypeScript, and Test file by default. You then have to register that component in a higher level module that tells Angular and TypeScript where it can find everything. The CLI has commands to generate a new component and auto-register it in a module because of how laborious it can be to do manually.&lt;/p&gt;
&lt;p&gt;If you‚Äôre still learning front-end development and you‚Äôre new to frameworks, &lt;strong&gt;Angular can feel like building a rocket launcher to swat a fly.&lt;/strong&gt; It‚Äôs honestly overkill for a small application, the type of which you need to build a lot of when learning.&lt;/p&gt;
&lt;p&gt;To boot, the documentation is not great, and the community is not as prolific as React or Vue‚Äôs. This means it‚Äôs harder to find solutions for your problems via Google, and there‚Äôs not many tutorials out there for you to learn from.&lt;/p&gt;
&lt;p&gt;That said, I recommend &lt;a href=&quot;https://ultimatecourses.com/author/toddmotto&quot;&gt;Todd Motto‚Äôs courses&lt;/a&gt; and the &lt;a href=&quot;https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA&quot;&gt;Angular Firebase fellow on YouTube&lt;/a&gt; if you‚Äôre hoping to learn Angular.&lt;/p&gt;
&lt;h3&gt;React&lt;/h3&gt;
&lt;p&gt;React, created by Facebook, launched after AngularJS and quickly became the most popular front-end framework.&lt;/p&gt;
&lt;p&gt;If I had to put the React philosophy into words, I might say that &lt;strong&gt;React wants to be as unobstrusive as possible and make you feel like you‚Äôre just working with JavaScript&lt;/strong&gt;. React also highly values immutabililty and one-way data flow.&lt;/p&gt;
&lt;h4&gt;The Good&lt;/h4&gt;
&lt;p&gt;Because of its popularity, &lt;strong&gt;there are an absolute ton of resources to learn React.&lt;/strong&gt; You can hop onto Google or YouTube and easily find entire free courses for React. Any questions you may have about React have likely been answered and posted to Stack Overflow or some other forum.&lt;/p&gt;
&lt;p&gt;React‚Äôs popularity also means there is &lt;strong&gt;plenty of 3rd party support&lt;/strong&gt;. If you need any kind of pre-built solution for any aspect of a React project, someone has undoubtedly already built it and published it to NPM.&lt;/p&gt;
&lt;p&gt;React‚Äôs API is also very small, meaning there‚Äôs just not that much to it. &lt;strong&gt;Writing React is a lot like writing JavaScript&lt;/strong&gt;, particularly with the new hooks API which emphasizes a &lt;strong&gt;functional approach&lt;/strong&gt; to writing components. &lt;strong&gt;This makes learning React beginner-friendly&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The popularity of React also makes it a great skill for finding a job. Plenty of companies use React.&lt;/p&gt;
&lt;h4&gt;The Bad&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Because React is so small and un-opinionated, you‚Äôre going to have to bring in your own solutions for everything.&lt;/strong&gt; This means you may be using lots of 3rd party libraries to accomplish things that might come standard in Angular or Vue. For example, if you want to make an API call, you‚Äôll probably use Axios or JS‚Äôs fetch. If you want global state management, you‚Äôre going to use Redux or some other solution, where Angular has NGRX and Vue has Vuex.&lt;/p&gt;
&lt;p&gt;Being a ‚Äúbring your own everything‚Äù framework, &lt;strong&gt;one React project may look wildly different from another.&lt;/strong&gt; So just because you have worked with React at one company for a length of time, you might change jobs to another React-based team and find yourself on a strange and foreign codebase that you have to learn.&lt;/p&gt;
&lt;h4&gt;The Ugly&lt;/h4&gt;
&lt;p&gt;Because it‚Äôs ‚Äújust JavaScript‚Äù, &lt;strong&gt;React will let you write a bunch of JavaScript and logic in your template.&lt;/strong&gt; This can make your code confusing and obtuse to other developers, and even yourself on a second pass. &lt;strong&gt;It can be incredibly difficult to write JSX in a way that‚Äôs readable.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;React is un-opinionated, so you can absolutely turn it into a footgun and begin writing code that‚Äôs not performant and full of bugs. &lt;strong&gt;It‚Äôs incredibly easy to write bad React code.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Vue&lt;/h3&gt;
&lt;p&gt;Vue is the underdog, and everyone loves a good underdog. It‚Äôs written by Evan You, a former AngularJS team member. This the only one of the Big 3 not backed by a huge company in Silicon Valley.&lt;/p&gt;
&lt;h4&gt;The Good&lt;/h4&gt;
&lt;p&gt;Vue‚Äôs API is &lt;strong&gt;incredibly easy to learn&lt;/strong&gt;. There‚Äôs plenty of stories of designers and developers that were turned-off or confused by Angular/React that gravitated towards Vue and loved it.&lt;/p&gt;
&lt;p&gt;Vue provides just enough opinion to keep your code readable and sane without making you feel like you‚Äôre jumping through hoops to use it. It also provides some excellent built-in solutions for common framework problems. For instance, state management is greatly simplifed through Vuex, Vue‚Äôs version of Redux/NGRX.&lt;/p&gt;
&lt;p&gt;There‚Äôs also a &lt;strong&gt;good amount of community support&lt;/strong&gt;; there‚Äôs plenty of third party libraries and packages for Vue. There‚Äôs also plenty of tutorials and info to be found on Google for Vue. &lt;strong&gt;And the official documentation is excellent.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you‚Äôre worried about jobs with Vue, it‚Äôs a valid concern. You‚Äôre probably not as likely to find a Vue job in the states as an Angular or React job. However, the PHP community loves Vue. &lt;strong&gt;Laravel ships with Vue, and so if you find a company writing PHP, you‚Äôre likely to also find them using Vue.&lt;/strong&gt; Vue is also huge in Asia likely because the documentation has been translated to Asian languages.&lt;/p&gt;
&lt;h4&gt;The Bad&lt;/h4&gt;
&lt;p&gt;Sharing logic between components with Vue is currently a bit of a mess. ‚ÄúMixins‚Äù let you write logic that can be shared between components. They‚Äôre easy enough to use, but it can be devilish trying to figure out how mixins interact with a components logic. &lt;strong&gt;Mixins are terrible.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue also doesn‚Äôt really play well with TypeScript currently, which is a concern for big codebases that could benefit from it.&lt;/p&gt;
&lt;p&gt;And as I noted above, you &lt;em&gt;might&lt;/em&gt; have a harder time finding work in the West as a Vue dev than you would if you had learned React/Angular.&lt;/p&gt;
&lt;h4&gt;The ‚Ä¶Uncertain&lt;/h4&gt;
&lt;p&gt;Vue isn‚Äôt ugly. It‚Äôs &lt;em&gt;vuetiful&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That said, Version 3 of Vue is coming, and it‚Äôs bringing a different API with it that mimics React hooks.&lt;/p&gt;
&lt;p&gt;Now, React hooks are &lt;strong&gt;excellent&lt;/strong&gt;, but it remains to be seen how well Vue hooks (or the Composition API) will be embraced by the community. Regardless, Vue 3 will be backwards compatible, so hooks will be opt-in.&lt;/p&gt;
&lt;p&gt;Having used React hooks, and having seen what Vue hooks are bringing to the table, I am excited to give them a try.&lt;/p&gt;
&lt;h3&gt;What about Ember, Svelte, Backbone, etc?&lt;/h3&gt;
&lt;p&gt;There‚Äôs a lot of front-end frameworks out there that aren‚Äôt the big 3. Someone probably published a new one while you were reading this article. Here‚Äôs a few I didn‚Äôt mention:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ember&lt;/strong&gt; is another highly-opinionated framework, and while it‚Äôs not as popular, there are teams out there using it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Svelte&lt;/strong&gt; is so new that nobody is using it yet. The creator is brilliant, and this may blow up, so who knows?&lt;/li&gt;
&lt;li&gt;Nobody uses &lt;strong&gt;backbone&lt;/strong&gt;. Sorry backbone.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lit-HTML/Polymer&lt;/strong&gt; is an ultra-lightweight framework (like 30 lines of JS small or something). I don‚Äôt know of anyone using it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Choosing a Framework&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/ab0c4eb0f448243f0b817b9453ad1bd8/c35de/lanternrider.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Man riding a horse, lighting his path with a lanterm by Priscilla De Preez&quot; title=&quot;Man riding a horse, lighting his path with a lanterm by Priscilla De Preez&quot; src=&quot;https://leewarrick.com/blog/static/ab0c4eb0f448243f0b817b9453ad1bd8/a111b/lanternrider.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now that we‚Äôve talked about the big 3, how do you pick one to learn?&lt;/p&gt;
&lt;p&gt;You‚Äôll probably spend most of your time using one framework. A codebase is unlikely to pull in multiple frameworks, and as a developer you likely only have time to specialize in one framework at a time.&lt;/p&gt;
&lt;p&gt;The truth is: &lt;strong&gt;it doesn‚Äôt really matter which framework you know, as long as you know one&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;All of these frameworks do the same thing. You write a template, variables and logic and they re-render the template based on those variables and logic.&lt;/p&gt;
&lt;p&gt;They all use webpack and babel, they all have build-steps and CLIs, and you can get the same apps written using all of them. &lt;strong&gt;They‚Äôre all just HTML, CSS and JavaScript at the end of the day.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your skills in one will transfer to another, because you‚Äôre really learning web development before you‚Äôre learning Angular or React development.&lt;/p&gt;
&lt;p&gt;With that said, &lt;strong&gt;choose the framework that aligns with your goals and preferences&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you want to move to Asia and work as a developer, Vue is a solid choice. Are you a Java developer or want to work at a big corporation? Angular might be best for you. Are you self-taught? Maybe React is the best choice simply for the amount of free tutorials that are available.&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;Learning the conventions and basics of a front-end framework is the hard part. &lt;strong&gt;Once you learn one, it becomes trivial to switch to another.&lt;/strong&gt; I learned React in a boot camp, got hired at a big company that used Angular, and then changed jobs to another that used Vue.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you‚Äôre curious about how web development evolved from Geocities to React, I did &lt;a href=&quot;https://www.youtube.com/watch?v=-W2hZadx8fE&quot;&gt;a brief talk on the history of web development and its current landscape.&lt;/a&gt;&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[How to make menus with CSS‚Äîno JavaScript or Bootstrap required!]]></title><description><![CDATA[I think a lot of new developers, myself included, are really excited about CSS until it comes time to start building more modern website‚Ä¶]]></description><link>https://leewarrick.com/blog/css-only-menus/</link><guid isPermaLink="false">https://leewarrick.com/blog/css-only-menus/</guid><pubDate>Fri, 27 Sep 2019 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I think a lot of new developers, myself included, are really excited about CSS until it comes time to start building more modern website features like menus.&lt;/p&gt;
&lt;p&gt;I remember building my first site, feeling empowered by CSS to do my own styles, and feeling really proud of myself ‚Ä¶until I needed a navigation menu.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/c0e4e4ede21d6cb9df4bc9393be8e428/c35de/ugh.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Pouring coffee into a mug marked &amp;quot;UGH&amp;quot;. Photo by Nathan Dumlao&quot; title=&quot;Pouring coffee into a mug marked &amp;quot;UGH&amp;quot;. Photo by Nathan Dumlao&quot; src=&quot;https://leewarrick.com/blog/static/c0e4e4ede21d6cb9df4bc9393be8e428/a111b/ugh.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As soon as I added a few links to my header, I began to run out of room on smaller screens. My site had to look good on mobile, so I was left with a choice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use Bootstrap menus and include a bunch of JavaScript/jQuery on the page, or&lt;/li&gt;
&lt;li&gt;Use fewer links&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I‚Äôve made that choice many times since then, assuming that those were the only options when building navigation menus.&lt;/p&gt;
&lt;h2&gt;Creativity through Constraint&lt;/h2&gt;
&lt;p&gt;It wasn‚Äôt until I had to do a coding challenge for a developer job that I had to reckon with the real power of CSS.&lt;/p&gt;
&lt;p&gt;I was presented a set of mock-ups of a modern website and told to create the website as close to the provided assets as possible. That‚Äôs a pretty typical request, except there was one catch: &lt;strong&gt;no JavaScript allowed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I thought, &lt;em&gt;‚ÄúNo way! There‚Äôs menus everywhere! How can I pull that off without JS?‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There were &lt;strong&gt;dropdown menus&lt;/strong&gt;, &lt;strong&gt;drawers&lt;/strong&gt;, and even a Bootstrap-esque &lt;strong&gt;mobile hamburger menu&lt;/strong&gt; on one of the mocks.&lt;/p&gt;
&lt;p&gt;Being the intrepid developer that I am, I saw this as a fun challenge. I hopped on Codepen and began searching for CSS-only versions of these common UI components.&lt;/p&gt;
&lt;p&gt;After a little digging, I found examples for all of them! While there were some tricks involved that I would have never thought of, the tricks themselves were simple.&lt;/p&gt;
&lt;p&gt;I took those new tricks and used them to finish the coding challenge. And yes, I got the job!&lt;/p&gt;
&lt;p&gt;I had always been told that CSS was super powerful, but I don‚Äôt think I believed it until that point.&lt;/p&gt;
&lt;p&gt;So without further adieu, here‚Äôs how I managed to recreate all of those menus with CSS alone.&lt;/p&gt;
&lt;h2&gt;The Classic Dropdown Menu&lt;/h2&gt;
&lt;p&gt;The first menu I want to talk about is the dropdown menu. You‚Äôve probably seen this on any e-commerce site or anything with lots of categories and navigation. There‚Äôs a header up top with a list of categories, and when you mouse over one, a new menu appears with more related items.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.dropdown__header * {
  padding: 0;
  margin: 0;
}
.dropdown__header {
  display: flex;
  align-items: center;
  background: lightblue;
}

.dropdown__header strong {
  margin-left: 5px;
  margin-right: auto;
  font-size: 1.6rem;
}

.dropdown__header .dropdown__categories,
.dropdown__header .dropdown__menu {
  display: flex;
  list-style: none;
  padding: 0;
  margin: 0;
}

.dropdown__header li {
  padding: 10px;
  position: relative;
}

.dropdown__header li:hover {
  background: #d2f2fc;
}

.dropdown__header .dropdown__category .dropdown__menu {
  display: none;
  position: absolute;
  background: #ebfaff;
  width: 200px;
  top: 50px;
  right: 0;
}

.dropdown__header .dropdown__category:hover .dropdown__menu {
  display: block;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&quot;dropdown__header&quot;&amp;gt;
  &amp;lt;strong&amp;gt;Logo&amp;lt;/strong&amp;gt;
  &amp;lt;ul class=&quot;dropdown__categories&quot;&amp;gt;
    &amp;lt;li class=&quot;dropdown__category&quot;&amp;gt;
      &amp;lt;span&amp;gt;Cat 1&amp;lt;/span&amp;gt;
      &amp;lt;ul class=&quot;dropdown__menu&quot;&amp;gt;
        &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;li class=&quot;dropdown__category&quot;&amp;gt;
      &amp;lt;span&amp;gt;Cat 2&amp;lt;/span&amp;gt;
      &amp;lt;ul class=&quot;dropdown__menu&quot;&amp;gt;
        &amp;lt;li&amp;gt;Cat 2 Thing&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Cat 2 Thing&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Cat 2 Thing&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Cat 2 Thing&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;h3&amp;gt;CSS Only Dropdown!&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Hover over the Categories above&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Pretty cool, right?&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;What makes this work?&lt;/h3&gt;
&lt;p&gt;There‚Äôs three main concepts here that make this possible: &lt;strong&gt;Showing/Hiding with Psuedoselectors&lt;/strong&gt;, &lt;strong&gt;absolute positioning&lt;/strong&gt;, and &lt;strong&gt;mindful HTML structure&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Showing/Hiding with Pseudoselectors&lt;/h4&gt;
&lt;p&gt;I think most people are comfortable showing/hiding things with &lt;code&gt;display: none&lt;/code&gt; and &lt;code&gt;display: block&lt;/code&gt;. The real trick here is the selectors.&lt;/p&gt;
&lt;p&gt;We‚Äôre targetting &lt;code&gt;.dropdown__menu&lt;/code&gt;, but notice the nesting structure. We‚Äôre looking for a &lt;code&gt;.dropdown__menu&lt;/code&gt; class that‚Äôs within a &lt;code&gt;.dropdown__category&lt;/code&gt; class. Then we can apply the &lt;code&gt;:hover&lt;/code&gt; pseudoselector to the parent, which means we‚Äôre targetting the menu based on a hover over the parent.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.dropdown__header .dropdown__category .dropdown__menu {
  display: none;
}

.dropdown__header .dropdown__category:hover .dropdown__menu {
  display: block;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Mindful HTML Structure&lt;/h4&gt;
&lt;p&gt;Are you wondering why our menu stays open even when you move your mouse into the menu?&lt;/p&gt;
&lt;p&gt;Going along with our nesting explanation above, note that our &lt;code&gt;.dropdown__menu&lt;/code&gt; is contained within &lt;code&gt;.dropdown__category&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;li class=&quot;dropdown__category&quot;&amp;gt;
  &amp;lt;span&amp;gt;Cat 1&amp;lt;/span&amp;gt;
  &amp;lt;ul class=&quot;dropdown__menu&quot;&amp;gt;
    &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that although we‚Äôre no longer over the words ‚ÄúCat 1‚Äù, the mouse is still within the &lt;code&gt;.dropdown__category&lt;/code&gt; list item, keeping the &lt;code&gt;:hover&lt;/code&gt; selector trigger active.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The menu and category elements must be adjacent to each other so that your mouse stays within one or the other‚Äîyou can‚Äôt position the menu off by itself somewhere and be able to mouse into it. More on that when we get to positioning.&lt;/p&gt;
&lt;h4&gt;Absolute Positioning&lt;/h4&gt;
&lt;p&gt;We position the hovered menu next to the category in the header using &lt;code&gt;position: absolute;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;W3 Schools has a &lt;a href=&quot;https://www.w3schools.com/css/css_positioning.asp&quot;&gt;great breakdown&lt;/a&gt; of CSS positioning, but here‚Äôs the short version:&lt;/p&gt;
&lt;p&gt;When you set positioning, items can be moved around with &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; options.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Static&lt;/strong&gt;: The default. The element behaves normally, and is unaffected by top/bottom/left/right.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fixed&lt;/strong&gt;: The element is positioned relative to the viewport. Eg: &lt;code&gt;top: 0;&lt;/code&gt; would be the top of the viewer‚Äôs screen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relative&lt;/strong&gt;: The element is positioned based on where it would be normally. So &lt;code&gt;top: 0&lt;/code&gt; wouldn‚Äôt move it at all, and &lt;code&gt;top: 10px&lt;/code&gt; would push it down 10 pixels.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sticky&lt;/strong&gt;: This is a newer, trickier positioning. The element stays where it is, but when the user scrolls the page, before the element moves out of view, it will still stick to whatever top/bottom/left/right position is set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And lastly, there‚Äôs &lt;strong&gt;Absolute&lt;/strong&gt; positioning. This is the most complicated. The behavior depends on whether this element is within an element that has some kind of positioning set. &lt;strong&gt;If it has a positioned ancestor, it positions relative to that ancestor element. If not, it is positioned relative to the whole page.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the case of our dropdown menus, we make the &lt;code&gt;li&lt;/code&gt; tag that contains the menu &lt;code&gt;relative&lt;/code&gt;. Then within it we can use &lt;code&gt;position: absolute;&lt;/code&gt; to position the expanded menu around our category title.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.dropdown__header li {
  position: relative;
}

.dropdown__header .dropdown__category .dropdown__menu {
  position: absolute;
  top: 50px;
  right: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we right-align the menu, and bump it down just far enough so that it‚Äôs at the bottom of ‚ÄúCat 1‚Äù under our mouse.&lt;/p&gt;
&lt;h2&gt;Nested Dropdown Menus&lt;/h2&gt;
&lt;p&gt;Using the same techniques, we can create a more complicated dropdown menu:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.nested-dropdown__header * {
  padding: 0;
  margin: 0;
}
.nested-dropdown__header {
  display: flex;
  align-items: center;
  background: lightblue;
}

.nested-dropdown__header strong {
  margin-left: 5px;
  margin-right: auto;
  font-size: 1.6rem;
}

.nested-dropdown__header ul {
  display: flex;
  list-style: none;
  padding: 0;
  margin: 0;
}

.nested-dropdown__header li {
  padding: 10px;
  position: relative;
}

.nested-dropdown__header li:hover {
  background: #d2f2fc;
}

.nested-dropdown__header .nested-dropdown__menu,
.nested-dropdown__header .nested-dropdown__submenu {
  display: none;
  position: absolute;
  background: #ebfaff;
  width: 150px;
  top: 50px;
  right: 0;
}

.nested-dropdown__header .nested-dropdown__category:hover .nested-dropdown__menu,
.nested-dropdown__header .nested-dropdown__subcategory:hover .nested-dropdown__submenu {
  display: block;
}

.nested-dropdown__header .nested-dropdown__submenu {
  top: 0;
  right: 100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&quot;nested-dropdown__header&quot;&amp;gt;
  &amp;lt;strong&amp;gt;Logo&amp;lt;/strong&amp;gt;
  &amp;lt;ul class=&quot;nested-dropdown__categories&quot;&amp;gt;
    &amp;lt;li class=&quot;nested-dropdown__category&quot;&amp;gt;
      &amp;lt;span&amp;gt;Cat 1&amp;lt;/span&amp;gt;
      &amp;lt;ul class=&quot;nested-dropdown__menu&quot;&amp;gt;
        &amp;lt;li class=&quot;nested-dropdown__subcategory&quot;&amp;gt;
          &amp;lt;span&amp;gt;Sub Cat 1&amp;lt;/span&amp;gt;
          &amp;lt;ul class=&quot;nested-dropdown__submenu&quot;&amp;gt;
            &amp;lt;li&amp;gt;Sub Cat 1 Thing&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Sub Cat 1 Thing&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Sub Cat 1 Thing&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Sub Cat 1 Thing&amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li class=&quot;nested-dropdown__subcategory&quot;&amp;gt;
          &amp;lt;span&amp;gt;Sub Cat 2&amp;lt;/span&amp;gt;
          &amp;lt;ul class=&quot;nested-dropdown__submenu&quot;&amp;gt;
            &amp;lt;li&amp;gt;Sub Cat 2 Thing&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Sub Cat 2 Thing&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;Sub Cat 2 Thing&amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Cat 1 Thing&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;h3&amp;gt;CSS Only NESTED Dropdown!&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Hover over &apos;Cat 1&apos; above,&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Then check out the Sub Categories!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There‚Äôs only two caveats to this nested menu.&lt;/p&gt;
&lt;p&gt;The first is that it doesn‚Äôt work well on mobile devices. This type of menu requires a lot of real-estate and hovers don‚Äôt translate to touchscreens very well. This isn‚Äôt a fault of CSS, though. Most sites will switch to a different style of menu on smaller devices, regardless of CSS vs JS.&lt;/p&gt;
&lt;p&gt;The second is that if your user wants to jump from a menu to a nested menu, she may take the shortest path and unintentionally move her mouse cursor out of the current element. Deeply nested menus are a little perilous for the user, so use with caution.&lt;/p&gt;
&lt;h2&gt;Content Drawers&lt;/h2&gt;
&lt;p&gt;Creating drawers with CSS alone seemed impossible. Hover effects don‚Äôt work, because when you open a drawer, you expect it to stay open. However, I learned that it &lt;em&gt;is&lt;/em&gt; possible with some very clever uses of HTML input elements and CSS selectors.&lt;/p&gt;
&lt;p&gt;This example has quite a bit of CSS, but don‚Äôt fret, I promise to explain the important bits:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.drawer {
  position: relative;
  box-sizing: border-box;
  width: 300px;
}
.drawer input {
  width: 100%;
  height: 60px;
  position: absolute;
  opacity: 0;
  top: 0;
  left: 0;
  margin: 0;
  z-index: 3;
  cursor: pointer;
}
.drawer__name {
  display: flex;
  justify-content: space-between;
  border: 1px solid black;
  padding: 10px;
  background: lightblue;
}
.drawer__content {
  border: 1px solid black;
  box-sizing: border-box;
  width: 100%;
  margin: 0;
  height: 0;
  opacity: 0;
  pointer-events: none;
  list-style: none;
  transition: padding 0.2s;
}
.drawer input:checked ~ .drawer__content {
  height: 100%;
  opacity: 1;
  pointer-events: initial;
  padding: 10px 0;
}
.drawer__arrow {
  font-weight: 900;
  font-size: 1.2rem;
  transition: transform 0.2s;
}
.drawer input:checked ~ .drawer__name &amp;gt; .drawer__arrow {
  transform: rotateZ(90deg);
}
.drawer__content li {
  padding: 10px;
  cursor: pointer;
}
.drawer__content li:hover {
  color: rebeccapurple;
  text-decoration: underline;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;drawer&quot;&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot;&amp;gt;
  &amp;lt;span class=&quot;drawer__name&quot;&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;Bananas&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&quot;drawer__arrow&quot;&amp;gt;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;ul class=&quot;drawer__content&quot;&amp;gt;
    &amp;lt;li&amp;gt;Bruised&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Green&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Perfect&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;drawer&quot;&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot;&amp;gt;
  &amp;lt;span class=&quot;drawer__name&quot;&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;Apples&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&quot;drawer__arrow&quot;&amp;gt;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;ul class=&quot;drawer__content&quot;&amp;gt;
    &amp;lt;li&amp;gt;Mealy&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Crisp&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Green&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;drawer&quot;&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot;&amp;gt;
  &amp;lt;span class=&quot;drawer__name&quot;&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;Oranges&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&quot;drawer__arrow&quot;&amp;gt;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;ul class=&quot;drawer__content&quot;&amp;gt;
    &amp;lt;li&amp;gt;Bitter&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Sour&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Sweet&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ta-da! ‚ú® Pure CSS drawers!&lt;/p&gt;
&lt;p&gt;It seems like a lot of code is required to make this happen, but there‚Äôs just a few key pieces to this puzzle that make it possible.&lt;/p&gt;
&lt;h3&gt;What makes this work?&lt;/h3&gt;
&lt;p&gt;The main trick here really did blow my mind. The secret is &lt;strong&gt;HTML checkbox elements&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I would have never thought of this in a million years. When I saw an example of this on Codepen I experienced the same feelings I had when seeing an awesome magic trick explained; I felt amazement of the ingenuity involved, and also anger at being duped by such a simple trick that I should have been able to figure out for myself.&lt;/p&gt;
&lt;p&gt;If we position the checkbox over the drawer and stretch it to the same size as the drawer, then target siblings on a &lt;code&gt;:checked&lt;/code&gt; state, we can eliminate the need for JavaScript to trigger the open/close events. The CSS sibling selector is &lt;code&gt;~&lt;/code&gt;, meaning target any neighbor elements coming after this element.&lt;/p&gt;
&lt;p&gt;It‚Äôs important to note that the &lt;strong&gt;checkbox must come first in the HTML&lt;/strong&gt;. You can select sibling/neighbor elements that come after, but not before. We also use &lt;code&gt;~&lt;/code&gt; and not &lt;code&gt;+&lt;/code&gt; because &lt;code&gt;+&lt;/code&gt; targets only the first adjacent sibling element, whereas &lt;code&gt;~&lt;/code&gt; will give you any following sibling.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ex2-drawer {
  position: relative;
  box-sizing: border-box;
  width: 300px;
}
.ex2-drawer input {
  width: 100%;
  height: 60px;
  outline: 2px solid red;
  position: absolute;
  /* opacity: 0; */
  top: 0;
  left: 0;
  margin: 0;
  z-index: 3;
  cursor: pointer;
}
.ex2-drawer__name {
  display: flex;
  justify-content: space-between;
  border: 1px solid black;
  padding: 10px;
  background: lightblue;
}
.ex2-drawer__content {
  border: 1px solid black;
  box-sizing: border-box;
  width: 100%;
  margin: 0;
  height: 0;
  opacity: 0;
  pointer-events: none;
  list-style: none;
  transition: padding 0.2s;
}
.ex2-drawer input:checked ~ .ex2-drawer__content {
  height: 100%;
  opacity: 1;
  pointer-events: initial;
  padding: 10px 0;
}
.ex2-drawer__arrow {
  font-weight: 900;
  font-size: 1.2rem;
  transition: transform 0.2s;
}
.ex2-drawer input:checked ~ .ex2-drawer__name &amp;gt; .ex2-drawer__arrow {
  transform: rotateZ(90deg);
}
.ex2-drawer__content li {
  padding: 10px;
  cursor: pointer;
}
.ex2-drawer__content li:hover {
  color: rebeccapurple;
  text-decoration: underline;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;ex2-drawer&quot;&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot;&amp;gt;
  &amp;lt;span class=&quot;ex2-drawer__name&quot;&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;Bananas&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&quot;ex2-drawer__arrow&quot;&amp;gt;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;ul class=&quot;ex2-drawer__content&quot;&amp;gt;
    &amp;lt;li&amp;gt;Bruised&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Green&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Perfect&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;ex2-drawer&quot;&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot;&amp;gt;
  &amp;lt;span class=&quot;ex2-drawer__name&quot;&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;Apples&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&quot;ex2-drawer__arrow&quot;&amp;gt;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;ul class=&quot;ex2-drawer__content&quot;&amp;gt;
    &amp;lt;li&amp;gt;Mealy&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Crisp&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Green&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;ex2-drawer&quot;&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot;&amp;gt;
  &amp;lt;span class=&quot;ex2-drawer__name&quot;&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;Oranges&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&quot;ex2-drawer__arrow&quot;&amp;gt;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;ul class=&quot;ex2-drawer__content&quot;&amp;gt;
    &amp;lt;li&amp;gt;Bitter&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Sour&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Sweet&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other important piece to this puzzle is the transition. Notice we didn‚Äôt use &lt;code&gt;display&lt;/code&gt; here to show and hide the drawer. If you do, you won‚Äôt be able to use CSS transitions to animate. &lt;strong&gt;You can‚Äôt animate an element that‚Äôs hidden with &lt;code&gt;display: none&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instead, we use a combo of &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;opacity&lt;/code&gt;, and &lt;code&gt;pointer-events&lt;/code&gt;. (That seems like a lot, but hear me out).&lt;/p&gt;
&lt;p&gt;Here‚Äôs the main code that makes this possible for reference:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.drawer {
  position: relative;
}
.drawer input {
  width: 100%;
  height: 60px;
  position: absolute;
  opacity: 0;
  top: 0;
  left: 0;
  z-index: 3;
  cursor: pointer;
}
.drawer__content {
  height: 0;
  opacity: 0;
  pointer-events: none;
  transition: padding 0.2s;
}
.drawer input:checked ~ .drawer__content {
  height: 100%;
  opacity: 1;
  pointer-events: initial;
  padding: 10px 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;drawer&quot;&amp;gt;
  &amp;lt;input type=&quot;checkbox&quot;&amp;gt;
  &amp;lt;span class=&quot;drawer__name&quot;&amp;gt;
    &amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;Oranges&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class=&quot;drawer__arrow&quot;&amp;gt;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;ul class=&quot;drawer__content&quot;&amp;gt;
    &amp;lt;li&amp;gt;Bitter&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Sour&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Sweet&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First we squash the &lt;code&gt;.drawer__content&lt;/code&gt; with &lt;code&gt;height: 0&lt;/code&gt;, and hide it with &lt;code&gt;opacity: 0&lt;/code&gt;. However, because it‚Äôs still on the page, the user would be able to click the things within, even though the content isn‚Äôt visible. The solution is to disable mouse interaction with &lt;code&gt;pointer-events: none&lt;/code&gt;. This allows us to animate the content while not letting the use see or interact with it.&lt;/p&gt;
&lt;p&gt;Finally, we use &lt;code&gt;padding&lt;/code&gt; as our animation. Animating the &lt;code&gt;height&lt;/code&gt; causes some weird behavior, but animating the padding allows some for some subtle animation while keeping the drawer itself very responsive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It‚Äôs possible to make drawers with just HTML alone using the &lt;code&gt;details&lt;/code&gt; element. You lose out on the ability to animate with CSS, though.&lt;/p&gt;
&lt;p&gt;Here‚Äôs a quick example. None of the CSS is necessary for the drawer behavior:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;details {
  background: rebeccapurple;
  color: #ddd;
  width: 300px;
  border-radius: 4px;
  margin-bottom: 5px;
}
summary {
  padding: 10px;
}
summary:focus {
  outline: none;
}
details ul {
  background: #ddd;
  margin: 0;
  color: black;
  padding: 10px;
  border-radius: 0 0 4px 4px;
}

details li {
  margin-left: 30px;
  margin-top: 10px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;details open&amp;gt;
  &amp;lt;summary&amp;gt;Drawer 1&amp;lt;/summary&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Thing 1&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Thing 2&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Thing 3&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Thing 4&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/details&amp;gt;
&amp;lt;details&amp;gt;
  &amp;lt;summary&amp;gt;Drawer 2&amp;lt;/summary&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Thing 1&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Thing 2&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Thing 3&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Thing 4&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;CSS Only Hamburger Menus&lt;/h2&gt;
&lt;p&gt;Now for the coup de gr√¢ce, CSS-only Hamburger menus!&lt;/p&gt;
&lt;p&gt;What‚Äôs a hamburger menu? It gets its name from the three stacked dashes that indicate ‚Äúhey this is a menu‚Äù. I guess someone was awful hungry for three lines to look like a hamburger, but I digress.&lt;/p&gt;
&lt;p&gt;You may have some ideas on how to pull this off in your head after seeing the previous examples. Let‚Äôs take a look (Warning, incoming a ton of CSS):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.hamburger-menu__wrapper {
  min-height: 400px;
  position: relative;
  text-align: center;
}
.hamburger-menu {
  height: 100%;
  width: 300px;
  position: absolute;
  top: 0;
  left: 0;
}
.hamburger-menu__button {
  width: 40px;
  height: 40px;
  border: 2px solid #777;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  position: relative;
  z-index: 3;
}

.hamburger-menu__button span {
  line-height: 8px;
  text-align: center;
  font-size: 1.6rem;
  font-weight: 400;
}

.hamburger-menu__button span:last-child {
  padding-bottom: 5px;
}
.hamburger-menu__wrapper {
  position: relative;
  height: 100%;
  overflow: hidden;
}
.hamburger-menu__wrapper input[type=&apos;checkbox&apos;] {
  width: 40px;
  height: 40px;
  outline: 3px solid red;
  opacity: 0;
  position: absolute;
  top: 6px;
  left: 6px;
  z-index: 4;
  cursor: pointer;
}

.hamburger-menu__wrapper input:checked ~ .hamburger-menu__button {
  background: #d2f2fc;
}

.hamburger-menu__wrapper input:checked ~ .hamburger-menu__slider {
  transform: none;
}

.hamburger-menu__slider {
  position: absolute;
  top: 0;
  left: 0;
  width: 300px;
  height: 100%;
  background-color: lightblue;
  z-index: 2;
  transform: translateX(-310px);
  transition: transform 0.3s;
  text-align: left;
}

.hamburger-menu__item {
  padding: 10px 0 10px 10px;
}

.hamburger-menu__item:hover {
  background-color: #d2f2fc;
}

.hamburger-menu__item:first-of-type {
  margin-top: 60px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;hamburger-menu__wrapper&quot;&amp;gt;
  &amp;lt;div class=&quot;hamburger-menu&quot;&amp;gt;
    &amp;lt;div class=&quot;hamburger-menu__wrapper&quot;&amp;gt;
      &amp;lt;input type=&quot;checkbox&quot; /&amp;gt;
      &amp;lt;div class=&quot;hamburger-menu__button&quot;&amp;gt;
        &amp;lt;span&amp;gt;&amp;amp;mdash;&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;&amp;amp;mdash;&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;&amp;amp;mdash;&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;hamburger-menu__slider&quot;&amp;gt;
        &amp;lt;div class=&quot;hamburger-menu__item&quot;&amp;gt;Thing 1&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;hamburger-menu__item&quot;&amp;gt;Thing 2&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;hamburger-menu__item&quot;&amp;gt;Thing 3&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;hamburger-menu__item&quot;&amp;gt;Thing 4&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;h2&amp;gt;Hamburger!!&amp;lt;/h2&amp;gt;
  &amp;lt;p&amp;gt;Click the Button to toggle the menu&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take &lt;strong&gt;&lt;em&gt;that&lt;/em&gt;&lt;/strong&gt;, bootstrap. ü§†&lt;/p&gt;
&lt;h3&gt;What makes it work?&lt;/h3&gt;
&lt;p&gt;A lot of the CSS above is for creating that silly hamburger style button. I literally stacked dashes and put a border around them, but you can use an icon if you like.&lt;/p&gt;
&lt;p&gt;As for the menu, it uses &lt;strong&gt;absolute positioning&lt;/strong&gt;, the &lt;strong&gt;input checkbox trick&lt;/strong&gt;, as well as a new trick, which is using &lt;strong&gt;transform&lt;/strong&gt; to slide the drawer in and out.&lt;/p&gt;
&lt;p&gt;Here‚Äôs the code that makes the menu slide:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.hamburger-menu__wrapper {
  position: relative;
  height: 100%;
  overflow: hidden;
}

.hamburger-menu__wrapper input:checked ~ .hamburger-menu__slider {
  transform: none;
}

.hamburger-menu__slider {
  position: absolute;
  top: 0;
  left: 0;
  width: 300px;
  height: 100%;
  z-index: 2;
  transform: translateX(-310px);
  transition: transform 0.3s;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We style the menu to sit on top of the page, then add in &lt;code&gt;transform: translateX(-310px)&lt;/code&gt; to pull the menu to the left so it‚Äôs no longer visible. When the &lt;code&gt;input&lt;/code&gt; is checked, we remove that &lt;code&gt;transform&lt;/code&gt; and the transition animates the drawer sliding into view.&lt;/p&gt;
&lt;p&gt;There‚Äôs a ton of other neat things you can do with the &lt;code&gt;transform&lt;/code&gt; property. We used it above on our drawers to turn our arrow to point downward when the drawer is open, for example.&lt;/p&gt;
&lt;p&gt;We also use &lt;code&gt;overflow: hidden&lt;/code&gt; on the wrapper to make sure our menu isn‚Äôt visible when the menu is closed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We also use &lt;code&gt;z-index&lt;/code&gt; here to make sure things stack on top of each other. Absolute positioning breaks items out of normal HTML flow, so making sure the menu is on top is crucial. Even more critical, we apply a higher z-index to the checkbox to make sure the user can always open and close the menu. We applied &lt;code&gt;z-index&lt;/code&gt; to our drawer checkboxes as well above.&lt;/p&gt;
&lt;h2&gt;But about JavaScript?&lt;/h2&gt;
&lt;p&gt;So yes, the point of this click-baity article title was that these things are possible &lt;em&gt;without&lt;/em&gt; JavaScript. But does that make sense?&lt;/p&gt;
&lt;p&gt;CSS is incredibly performant in general compared to using JavaScript. So it‚Äôs a good rule of thumb to use CSS instead of JS for most things.&lt;/p&gt;
&lt;p&gt;That said, some of these examples could be improved with JavaScript. Certainly toggling open/closed states would be much simpler using JS. Also, our hamburger example could benefit from being able to click outside of the menu to close the drawer. For the drawers, you might want to only have one of the drawers open above at a time. And for the dropdown menus you might want to slow the closing of the menus when the mouse cursor moves outside of the menu.&lt;/p&gt;
&lt;p&gt;If you‚Äôre already using an SPA like React, you may as well use a touch of JavaScript with your CSS to build the menus.&lt;/p&gt;
&lt;p&gt;The point here is that &lt;strong&gt;for a simple site, you don‚Äôt need to reach for CSS frameworks or JS frameworks.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;CSS is powerful, and we could all use more excuses to practice and learn more and do more with it. HTML deserves a shout-out here as well. You can build a lot with HTML and CSS alone. Certainly more than I thought was possible when I started out.&lt;/p&gt;
&lt;p&gt;JavaScript may rule the world, but CSS and HTML deserve your attention as a front-end developer as well.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[Bridging the Gap between React's useState, useReducer, and Redux]]></title><description><![CDATA[Redux is one of those technologies that I consider a ‚Äúpersonal Everest‚Äù. Everytime I look at it, I feel like there‚Äôs no end to the‚Ä¶]]></description><link>https://leewarrick.com/blog/a-guide-to-usestate-and-usereducer/</link><guid isPermaLink="false">https://leewarrick.com/blog/a-guide-to-usestate-and-usereducer/</guid><pubDate>Thu, 12 Sep 2019 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/ba29f3c8bad89c521880863a2ddfe9a2/c35de/mindthegap.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of a man carelessly leaping over a very deep chasm by Alex Radelich&quot; title=&quot;Photo of a man carelessly leaping over a very deep chasm by Alex Radelich&quot; src=&quot;https://leewarrick.com/blog/static/ba29f3c8bad89c521880863a2ddfe9a2/a111b/mindthegap.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Redux is one of those technologies that I consider a ‚Äúpersonal Everest‚Äù. Everytime I look at it, I feel like there‚Äôs no end to the boilerplate and patterns to memorize.&lt;/p&gt;
&lt;p&gt;At my first job and the first codebase I worked on, we had to use NGRX (Angular‚Äôs version of Redux). It was incredibly challenging; I spent hours reading docs and watching tutorials trying to understand NGRX. I even tried learning Redux in a desperate attempt to understand NGRX. I constantly complained to my boss about all the boilerplate, files, and patterns to memorize.&lt;/p&gt;
&lt;p&gt;He told me, &lt;em&gt;‚ÄúIf you were to use your own solution instead, you‚Äôd probably end up repeating those same patterns anyway‚Äù.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I finally concede. After managing React state with everything &lt;em&gt;except&lt;/em&gt; Redux, I‚Äôve found myself appreciating why it works the way it does and requires so much boilerplate. After learning React‚Äôs Context API, &lt;code&gt;useReducer&lt;/code&gt; and a lot more about managing state, I finally appreciate Redux.&lt;/p&gt;
&lt;p&gt;It‚Äôs not easy getting from A to B though. There‚Äôs a lot of ground to cover between learning &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt;, and even more when you get into Redux and managing complicated states.&lt;/p&gt;
&lt;h2&gt;The ‚ÄòuseState‚Äô Hook&lt;/h2&gt;
&lt;p&gt;React‚Äôs &lt;code&gt;useState&lt;/code&gt; is a pleasure to use. Give it an initial value, and it gives you a reference to the reactive value and a setter function to update that value.&lt;/p&gt;
&lt;p&gt;Here‚Äôs the classic counter example with &lt;code&gt;useState&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Counter() {
    const [count, setCount] = React.useState(0)
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;Count: {count}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;
                Increment
            &amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple enough! There‚Äôs only two quirks:&lt;/p&gt;
&lt;p&gt;The first is that you must provide a new state value to the &lt;code&gt;setCount&lt;/code&gt; function (&lt;code&gt;setCount(count++)&lt;/code&gt; and &lt;code&gt;count++&lt;/code&gt; won‚Äôt work). React is steeped in immutability, meaning you should always return a new value instead of changing the current value.&lt;/p&gt;
&lt;p&gt;The other quirk is the returned array, but almost all hooks follow this pattern. It‚Äôs a small price to pay considering how easy it is to write functional hook components compared to class components.&lt;/p&gt;
&lt;p&gt;So while &lt;code&gt;useState&lt;/code&gt; seems simple enough, what happens when you need more than a single state value? What if you have a form with multiple fields?&lt;/p&gt;
&lt;p&gt;Luckily, with hooks we can use &lt;code&gt;useState&lt;/code&gt; multiple times:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function FormExample() {
  const [email, setEmail] = React.useState(&apos;&apos;)
  const [name, setName] = React.useState(&apos;&apos;)

  const columnStyle = {
    display: &apos;flex&apos;,
    flexDirection: &apos;column&apos;,
  }
  return (
    &amp;lt;form style={{ ...columnStyle, width: &apos;300px&apos; }}&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;Name:&amp;lt;/span&amp;gt;
        &amp;lt;input
          onChange={e =&amp;gt; setName(e.target.value)}
          value={name}
          type=&quot;text&quot;
        /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;Email:&amp;lt;/span&amp;gt;
        &amp;lt;input
          onChange={e =&amp;gt; setEmail(e.target.value)}
          value={email}
          type=&quot;text&quot;
        /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;pre&amp;gt;{JSON.stringify({name, email}, null, 2)}&amp;lt;/pre&amp;gt;
    &amp;lt;/form&amp;gt;
  )
}
render(FormExample)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! But how much is too much with &lt;code&gt;useState&lt;/code&gt;? Is there a sensible limit? Should we keep it to 5 or less?&lt;/p&gt;
&lt;p&gt;And what if you need to manage more complicated data structures or perform side effects?&lt;/p&gt;
&lt;h2&gt;The ‚ÄòuseReducer‚Äô Hook&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/1a1acb148e3f2c1505bb60e360fc0d10/c35de/cooking.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of a man stirring a campfire cooking pot by Gary Sandoz&quot; title=&quot;Photo of a man stirring a campfire cooking pot by Gary Sandoz&quot; src=&quot;https://leewarrick.com/blog/static/1a1acb148e3f2c1505bb60e360fc0d10/a111b/cooking.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now we‚Äôve entered &lt;code&gt;useReducer&lt;/code&gt; territory. The reducer in ‚ÄòuseReducer‚Äô comes from Redux, which in turn borrowed it from JavaScript‚Äôs &lt;code&gt;Array.reduce()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what does it mean to ‚Äúreduce‚Äù something? Think of simmering balsamic vinegar so the vinegar evaporates and you‚Äôre left with a sweet, delicious glaze. That‚Äôs called a ‚Äúbalsamic reduction‚Äù. Think of reducers as taking arguments and cooking them down until they‚Äôre more pallatable.&lt;/p&gt;
&lt;p&gt;In the context of React, here‚Äôs the typical pattern used with &lt;code&gt;useReducer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const reducer = function (currentState, action) {
  // Make a new state based on the current state and action
  // Note: There&apos;s usually a big switch statement here
  return newState
}
const [state, dispatch] = useReducer(reducer, initialValue)

// example usage:
dispatch({type: &quot;THING_HAPPENED&quot;})
// Or with an optional &quot;payload&quot;:
dispatch({type: &quot;THING_HAPPENED&quot;, payload: newData})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before we dig into the classic reducer pattern, I want to boil &lt;code&gt;useReducer&lt;/code&gt; down to its basic functionality. Simply put: &lt;code&gt;useReducer&lt;/code&gt; is almost identical to &lt;code&gt;useState&lt;/code&gt;, except &lt;code&gt;useReducer&lt;/code&gt; lets you define exactly how to update it‚Äôs state value by passing it a function.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at our counter example from before. Here we‚Äôll implement our own &lt;code&gt;useState&lt;/code&gt; with &lt;code&gt;useReducer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Counter() {
    const [count, setCount] = React.useReducer((currentCount, newCount) =&amp;gt; newCount, 0)
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;Count: {count}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;
                Increment
            &amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is extra work with no benefit, though. Why pass a function to &lt;code&gt;useReducer&lt;/code&gt;, only to pass another to &lt;code&gt;onClick&lt;/code&gt;? Also, our counter logic is living in our JSX button element, which isn‚Äôt great.&lt;/p&gt;
&lt;p&gt;Let‚Äôs cut out the extra function and move our logic out of the JSX:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Counter() {
    const [count, increment] = React.useReducer(currentCount =&amp;gt; currentCount + 1, 0)
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;Count: {count}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={increment}&amp;gt;
                Increment
            &amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you take nothing else away from this article, remember this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The power of &lt;code&gt;useReducer&lt;/code&gt; is that it allows us to define how we update our state value.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That said, before we dive further into reducers and patterns, I want to take a minute to define ‚Äústate‚Äù.&lt;/p&gt;
&lt;h2&gt;The Problem with ‚ÄúState‚Äù in React&lt;/h2&gt;
&lt;p&gt;There are some major misconceptions about ‚Äústate‚Äù in React. I think when Vue named it‚Äôs version of state ‚Äúdata‚Äù, they made it easier to think about Vue code.&lt;/p&gt;
&lt;p&gt;What React defines as state is really just data that we would normally store in variables. However, React needs to, well, &lt;em&gt;react&lt;/em&gt; to changes in that data. So under the hood, when you store things in state, React attaches methods and properties to that object so it knows when to trigger re-renders.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;React ‚Äústate‚Äù is just an object that React watches for updates.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So if React‚Äôs ‚Äústate‚Äù isn‚Äôt really state, what is? The concept of ‚Äústate‚Äù actually pre-dates React by &lt;a href=&quot;https://en.wikipedia.org/wiki/State_(computer_science)&quot;&gt;decades&lt;/a&gt;. In computer science terms, &lt;strong&gt;the state of an application describes its current status and the previous events and user interactions that resulted in that status.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This type of state is notoriously difficult to deal with in programming. This is why every technical support agent defaults to ‚Äúturn it off and on again‚Äù when you call for help. Your device entered a bad state somehow, and sometimes the easiest way to get out of a bad state is to reboot the system into a new state.&lt;/p&gt;
&lt;p&gt;When we write React code, the problem is that we have a tendency to conflate the state of the program with the data React is watching for renders. For example, you might have data in your component that describes what the user typed in an input field, but also data that tells you if the form is valid or not. The combination of that current data and how it changed in response to the user is the actual state of your component.&lt;/p&gt;
&lt;p&gt;We typically only worry about storing and updating data in our components, and avoid thinking about it‚Äôs actual state until we start to find bugs.&lt;/p&gt;
&lt;h2&gt;Reducers and Redux&lt;/h2&gt;
&lt;p&gt;The reducer pattern is an attempt to tame the flow of updating complex state. While not foolproof or easy, it can help us define and manages state changes in our application and components.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at a simple version of the reducer pattern in the context of a form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const reducer = function (currentState, action) {
    switch(action.type) {
        case &apos;NAME_CHANGED&apos;:
            return {...currentState, name: action.payload}
        case &apos;EMAIL_CHANGED&apos;:
            return {...currentState, email: action.payload}
        default:
            return state
    }
}
const [state, dispatch] = useReducer(reducer, {name: &apos;&apos;, email:&apos;&apos;})

// example usage:
dispatch({type: &apos;NAME_CHANGED&apos;})
// or with a payload:
dispatch({type: &apos;NAME_CHANGED&apos;, payload: &apos;Suzy&apos;})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Think about this as an event signaling system. When we call &lt;code&gt;dispatch&lt;/code&gt;, we pass in an object that tells us what happened, and then our reducer takes that information and processes it to create a new state.&lt;/p&gt;
&lt;p&gt;So why call it dispatch and action? Why the switch statement?&lt;/p&gt;
&lt;h3&gt;Dispatchers&lt;/h3&gt;
&lt;p&gt;I like to picture &lt;code&gt;dispatch&lt;/code&gt; as a dispatcher of an old switchboard telephone system. The dispatcher packages the info with the main message (type) and any additional info (payload) and plugs it into the switchboard, our reducer (which coincidentally contains a &lt;code&gt;switch&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/magnetis-backstage/why-action-is-a-bad-name-for-a-redux-action-68bec375539e&quot;&gt;They really should have called them ‚Äúevents‚Äù instead of ‚Äúactions‚Äù.&lt;/a&gt; Actions describe events that have happened in your application. So when naming action types, it‚Äôs better to use the past tense ie &lt;code&gt;&quot;NAME_CHANGED&quot;&lt;/code&gt;, than the present, ie &lt;code&gt;&quot;CHANGE_NAME&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While this may seem like irrelevant semantics, it makes a big difference in understanding the redux pattern. It‚Äôs important to remember that your reducer is responding to events to decide on a new state. When you say &lt;code&gt;&quot;CHANGE_NAME&quot;&lt;/code&gt;, you‚Äôre implying that your reducer &lt;em&gt;will&lt;/em&gt; change the name, as opposed to letting it decide &lt;em&gt;if&lt;/em&gt; it will change it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While I would much rather refer to these as events, we‚Äôll stick with ‚Äúaction‚Äù for sake of convention. Just remember to use the past tense in your action types.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another Note:&lt;/strong&gt; We also use &lt;a href=&quot;https://en.wikipedia.org/wiki/Snake_case&quot;&gt;SCREAMING&lt;em&gt;SNAKE&lt;/em&gt;CASE&lt;/a&gt; for our action types. This is to denote that the strings are a constant value and to also implore you not to mutate or change them. (‚ÄúScreaming Snake Case‚Äù is an excellent name for a metal band, btw.)&lt;/p&gt;
&lt;h3&gt;The Switch Statement&lt;/h3&gt;
&lt;p&gt;The choice of a switch statement over a long &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else if&lt;/code&gt; chain is mainly about readability.&lt;/p&gt;
&lt;p&gt;You may also notice that there‚Äôs no &lt;code&gt;break&lt;/code&gt; statements and lots of spread operators in our switch statement. We‚Äôre using &lt;code&gt;return&lt;/code&gt; in lieu of break, which prevents the switch waterfall effect (more on that later). As for the spread operators, remember that React is built on immutability, so the creation of new objects is necessary. By spreading first and passing in our changes second, we can overwrite only the properties in state that we need to without affecting the rest:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const state = {
  name: &quot;Robert&quot;,
  email: &quot;SuperBobby74@aol.com&quot;
}
const newState = {...state, name: &quot;Bobby&quot;}
console.log(newState)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs apply the reducer pattern and &lt;code&gt;useReducer&lt;/code&gt; to our form from earlier:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function FormExample() {
  function formReducer(state, action) {
    switch (action.type) {
      case &apos;NAME_CHANGED&apos;:
        return { ...state, name: action.payload }
      case &apos;EMAIL_CHANGED&apos;:
        return { ...state, email: action.payload }
      default:
        return state
    }
  }

  const [state, dispatch] = React.useReducer(formReducer, {
    name: &apos;&apos;,
    email: &apos;&apos;,
  })

  const columnStyle = {
    display: &apos;flex&apos;,
    flexDirection: &apos;column&apos;,
  }

  return (
    &amp;lt;form style={{ ...columnStyle, width: &apos;300px&apos; }}&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;Name:&amp;lt;/span&amp;gt;
        &amp;lt;input
          onChange={e =&amp;gt;
            dispatch({ type: &apos;NAME_CHANGED&apos;, payload: e.target.value })
          }
          value={state.name}
          type=&quot;text&quot;
        /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;Email:&amp;lt;/span&amp;gt;
        &amp;lt;input
          onChange={e =&amp;gt;
            dispatch({ type: &apos;EMAIL_CHANGED&apos;, payload: e.target.value })
          }
          value={state.email}
          type=&quot;text&quot;
        /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;pre&amp;gt;{JSON.stringify(state, null, 2)}&amp;lt;/pre&amp;gt;
    &amp;lt;/form&amp;gt;
  )
}

render(FormExample)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works great, but we can make some improvements.&lt;/p&gt;
&lt;p&gt;First let‚Äôs pull our action types out and make them into an object like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const actions = {
  nameChanged: &apos;NAME_CHANGED&apos;,
  emailChanged: &apos;EMAIL_CHANGED&apos;,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will save you from errors down the line. If you use &lt;code&gt;actions.nameChanged&lt;/code&gt; in your switch and dispatch, your IDE may help prevent errors from typos in your action types. (You might see this same pattern with enums if the codebase is using TypeScript.)&lt;/p&gt;
&lt;p&gt;We can also pull out our initial state into it‚Äôs own object, and move it outside of our component along with our reducer and our actions.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const actions = {
  nameChanged: &apos;NAME_CHANGED&apos;,
  emailChanged: &apos;EMAIL_CHANGED&apos;,
}

const initialState = {
  name: &apos;&apos;,
  email: &apos;&apos;,
}

function formReducer(state, action) {
  switch (action.type) {
    case actions.nameChanged:
      return { ...state, name: action.payload }
    case actions.emailChanged:
      return { ...state, email: action.payload }
    default:
      return state
  }
}

function FormExample() {
  const [state, dispatch] = React.useReducer(formReducer, initialState)

  const columnStyle = {
    display: &apos;flex&apos;,
    flexDirection: &apos;column&apos;,
  }
  return (
    &amp;lt;form style={{ ...columnStyle, width: &apos;300px&apos; }}&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;Name:&amp;lt;/span&amp;gt;
        &amp;lt;input
          onChange={e =&amp;gt;
            dispatch({ type: actions.nameChanged, payload: e.target.value })
          }
          value={state.name}
          type=&quot;text&quot;
        /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;Email:&amp;lt;/span&amp;gt;
        &amp;lt;input
          onChange={e =&amp;gt;
            dispatch({ type: actions.emailChanged, payload: e.target.value })
          }
          value={state.email}
          type=&quot;text&quot;
        /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;pre&amp;gt;{JSON.stringify(state, null, 2)}&amp;lt;/pre&amp;gt;
    &amp;lt;/form&amp;gt;
  )
}
render(FormExample)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Handling Business Logic using Reducers&lt;/h3&gt;
&lt;p&gt;You might be wondering why exactly we‚Äôve taken our &lt;code&gt;useState&lt;/code&gt; example and made it so complicated. It seems like all we‚Äôve done is add code to duplicate the same functionality we had before.&lt;/p&gt;
&lt;p&gt;Reducers really start to shine when we add a submit button to the form. Forms are devilishly complex things to reason about (lots of state to manage), which is why there are so many form libraries out there. You need to account for validation, plus keep track of what fields are filled out, what happens when the form is submitted, etc.&lt;/p&gt;
&lt;p&gt;If you were going to manage that logic with &lt;code&gt;useState&lt;/code&gt;, you‚Äôd find yourself wrapping your submit in a lot of code, adding more &lt;code&gt;useState&lt;/code&gt; hooks, and possibly wrapping your setter functions in validation functions that might update &lt;em&gt;other&lt;/em&gt; state values. This would get messy quickly.&lt;/p&gt;
&lt;p&gt;Unlike &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useReducer&lt;/code&gt; provides a great infrastructure to handle all of the logic that surrounds validation and submission:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const actions = {
  nameChanged: &apos;NAME_CHANGED&apos;,
  emailChanged: &apos;EMAIL_CHANGED&apos;,
  formSubmitted: &apos;FORM_SUBMITTED&apos;,
}

const initialState = {
  name: &apos;&apos;,
  email: &apos;&apos;,
  nameError: null,
  emailError: null,
  formCompleted: false,
  formSubmitted: false,
}

function formReducer(state, action) {
  let error
  switch (action.type) {
    case actions.nameChanged:
      error = validate(&apos;name&apos;, action.payload)
      return { ...state, name: action.payload, nameError: error }
    case actions.emailChanged:
      error = validate(&apos;email&apos;, action.payload)
      return { ...state, email: action.payload, emailError: error }
    case actions.formSubmitted:
      // if the form has been successfully submitted,
      // stop here to prevent rage clicks and re-submissions
      if (state.formCompleted) return state
      let formValid = true
      // invalidate the form if values are missing or in error
      if (state.nameError || !state.name || state.emailError || !state.email) {
        formValid = false
      }
      // if the user has attempted to submit before, stop here
      if (state.formSubmitted) return { ...state, formCompleted: formValid }
      // if this is the first submit, we need to validate in case the user
      // clicked submit without typing anything
      let nameError = validate(&apos;name&apos;, state.name)
      let emailError = validate(&apos;email&apos;, state.email)
      return {
        ...state,
        nameError,
        emailError,
        formSubmitted: true,
        formCompleted: formValid,
      }
    default:
      return state
  }
}

// this helper function validates the name and email inputs
// if there&apos;s an error, it returns an error message describing the problem
// if there are no errors, it returns null
// it&apos;s outside our reducer to make things more readable and DRY
function validate(name, value) {
  if (typeof value === &apos;string&apos;) value = value.trim()
  switch (name) {
    case &apos;name&apos;:
      if (value.length === 0) {
        return &apos;Must enter name&apos;
      } else if (value.split(&apos; &apos;).length &amp;lt; 2) {
        return &apos;Must enter first and last name&apos;
      } else {
        return null
      }
      break
    case &apos;email&apos;:
      if (value.length === 0) {
        return &apos;Must enter email&apos;
      } else if (
        !value.includes(&apos;@&apos;) ||
        !value.includes(&apos;.&apos;) ||
        value.split(&apos;.&apos;)[1].length &amp;lt; 2
      ) {
        return &apos;Must enter valid email&apos;
      } else {
        return null
      }
      break
  }
}

function FormExample() {
  const [state, dispatch] = React.useReducer(formReducer, initialState)

  // extract our dispatch to a change handler to DRY the code up
  function handleChange(e) {
    dispatch({ type: actions[e.target.name + &apos;Changed&apos;], payload: e.target.value })
  }

  // this is attached to the form, not the submit button so that
  // the user can click OR press &apos;enter&apos; to submit
  // we don&apos;t need a payload, the input values are already in state
  function handleSubmit(e) {
    e.preventDefault()
    dispatch({ type: actions.formSubmitted })
  }

  const columnStyle = {
    display: &apos;flex&apos;,
    flexDirection: &apos;column&apos;,
  }
  // this adds a red outline to the input if the field isn&apos;t filled out correctly,
  // but only if the user has attempted to submit
  const inputStyle = hasError =&amp;gt; {
    return {
      outline: hasError &amp;amp;&amp;amp; state.formSubmitted ? &apos;2px solid red&apos; : &apos;none&apos;,
    }
  }
  return (
    &amp;lt;form style={{ ...columnStyle, width: &apos;300px&apos; }} onSubmit={handleSubmit}&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;Name:&amp;lt;/span&amp;gt;
        &amp;lt;input
          style={inputStyle(state.nameError)}
          onChange={handleChange}
          name=&quot;name&quot;
          value={state.name}
          type=&quot;text&quot;
        /&amp;gt;
        &amp;lt;span&amp;gt;{state.formSubmitted &amp;amp;&amp;amp; state.nameError}&amp;lt;/span&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;email:&amp;lt;/span&amp;gt;
        &amp;lt;input
          style={inputStyle(state.emailError)}
          onChange={handleChange}
          name=&quot;email&quot;
          value={state.email}
          type=&quot;text&quot;
        /&amp;gt;
        &amp;lt;span&amp;gt;{state.formSubmitted &amp;amp;&amp;amp; state.emailError}&amp;lt;/span&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;p&amp;gt;{state.formCompleted &amp;amp;&amp;amp; &apos;Form Submitted Successfully!&apos;}&amp;lt;/p&amp;gt;
      &amp;lt;button type=&quot;submit&quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;pre&amp;gt;{JSON.stringify(state, null, 2)}&amp;lt;/pre&amp;gt;
    &amp;lt;/form&amp;gt;
  )
}

render(FormExample)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how our reducer function swelled with business logic. That‚Äôs OK! In fact, it‚Äôs a good rule of thumb to keep your reducers fat and event handlers skinny.&lt;/p&gt;
&lt;p&gt;The functionality has changed as well. As our values change, the reducer handles validation and adds error messages to our state if necessary. If the form hasn‚Äôt been submitted, we can hold off on annoying the user with red boxes and error messages until they submit. If errors are present on submission, we can change the messages as they type to guide them to enter the correct information. Lastly, we can prevent rage clicks and repeat submissions with a &lt;code&gt;formCompleted&lt;/code&gt; flag in our submission case.&lt;/p&gt;
&lt;p&gt;This provides a great experience for the user, and a good organizational model for all these complex UI interactions.&lt;/p&gt;
&lt;h2&gt;Welcome to Redux&lt;/h2&gt;
&lt;p&gt;Believe it or not, &lt;strong&gt;We‚Äôve now implemented all the major components of Redux&lt;/strong&gt;. Redux itself is really just a helper library to assist in doing the same things we‚Äôve done in this article.&lt;/p&gt;
&lt;p&gt;In a typical Redux application, we lift the &lt;strong&gt;actions&lt;/strong&gt;, &lt;strong&gt;reducers&lt;/strong&gt;, and &lt;strong&gt;state&lt;/strong&gt; into their own files in the project. To manage multiple state objects, we can group sets of actions/reducers/state into different &lt;strong&gt;stores&lt;/strong&gt; that then become part of a &lt;strong&gt;global store&lt;/strong&gt; with a &lt;strong&gt;root reducer&lt;/strong&gt;. The root reducer‚Äôs job is to compose the state of each store into a single, global state object.&lt;/p&gt;
&lt;p&gt;Then we import whatever store, dispatcher, and actions we need into our components to access state and signal events to the global store. Redux provides some utility to assist in composing this global state management system, but for the most part, you‚Äôre going to write all the actions, reducers, and states yourself, just like we did in this article.&lt;/p&gt;
&lt;p&gt;So if you made it this far, you‚Äôre ready to use Redux! The real question is, should you?&lt;/p&gt;
&lt;h3&gt;Is Redux Dead ‚ò†?&lt;/h3&gt;
&lt;p&gt;You can certainly do a lot without Redux nowadays with the Context API and the information learned here. Think of a Context as a Redux Store that you can position anywhere in your app. Any components that are wrapped in a Context Provider get access to the values you share from it. Context can be at the top level in your application, providing state to everything, or further down and only sharing its state with a handful of components.&lt;/p&gt;
&lt;p&gt;Kent C Dodds has an &lt;strong&gt;excellent&lt;/strong&gt; &lt;a href=&quot;https://kentcdodds.com/blog/application-state-management-with-react&quot;&gt;article&lt;/a&gt; on using Context for state management in React.&lt;/p&gt;
&lt;p&gt;That said, &lt;strong&gt;Redux is not dead&lt;/strong&gt;. There are plenty of codebases out there using it, and if you‚Äôre going to write React professionally, it‚Äôs not a bad idea to learn it.&lt;/p&gt;
&lt;h2&gt;Beyond Redux üòµ&lt;/h2&gt;
&lt;p&gt;We‚Äôre going to get into some slightly advanced topics now, so buckle up.&lt;/p&gt;
&lt;p&gt;The most astute tester might have noticed the &lt;strong&gt;bug in the last example.&lt;/strong&gt; Scroll up and see if you can‚Äôt find the edge case we missed.&lt;/p&gt;
&lt;p&gt;Give up?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can edit the form after a successful submit!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How can we fix this? Your first instinct might be to start sprinkling the &lt;code&gt;formSubmitted&lt;/code&gt; flag throughout our reducer to prevent further changes to the form, sort of how we did at the beginning of our submit case.&lt;/p&gt;
&lt;p&gt;This would work, but it‚Äôs hard to read and reason about. I‚Äôd argue that the submission case is already a bit of a mess, and adding more logic to the other cases is only going to make things worse.&lt;/p&gt;
&lt;p&gt;More importantly, how did we miss this in the first place? We learned all of this complicated JavaScript to prevent bugs, but we found some anyway!&lt;/p&gt;
&lt;h2&gt;Implicit vs Explicit States&lt;/h2&gt;
&lt;p&gt;In my tangent on state, I mentioned that we sometimes end up describing state with booleans or flags in our code. We‚Äôve done that in our form with &lt;code&gt;formCompleted&lt;/code&gt; and &lt;code&gt;formSubmitted&lt;/code&gt;. The problem is that we‚Äôve implicitly described the state of our form instead of explicitly.&lt;/p&gt;
&lt;p&gt;That means that we‚Äôre relying on some combination of those booleans to describe the state of our form. For example, if the user hasn‚Äôt entered anything and hasn‚Äôt pressed submit, we might write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (!formSubmitted &amp;amp;&amp;amp; !name &amp;amp;&amp;amp; !email &amp;amp;&amp;amp; !emailError &amp;amp;&amp;amp; !nameError) {
  // behave as if user hasn&apos;t done anything yet
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is messy and hard to understand. When you come back to this code later you might even forget how it works and be hesitant to change it. It‚Äôs much better to explicitly describe the state of the form, and then ensure that the form can only exist in one of those states at any point in time.&lt;/p&gt;
&lt;p&gt;We could describe our form states as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clean&lt;/strong&gt; - User hasn‚Äôt entered anything or pressed submit&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dirty&lt;/strong&gt; - User has started to enter info, but hasn‚Äôt successfully finished and submitted&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Completed&lt;/strong&gt; - Form has been filled out correctly and submitted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also want to handle the transitions between these states as well as the possible actions that can happen in each state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clean&lt;/strong&gt; - User hasn‚Äôt entered anything or pressed submit&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Possible Transitions: Dirty&lt;/li&gt;
&lt;li&gt;Allowed Actions: editing and submitting, but submitting does not trigger errors, just a message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dirty&lt;/strong&gt; - User has started to enter info, but hasn‚Äôt successfully finished and submitted&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Possible Transitions: Completed&lt;/li&gt;
&lt;li&gt;Allowed Actions: editing and submitting, but submitting triggers error messages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Completed&lt;/strong&gt; - Form has been filled out correctly and submitted&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Possible Transitions: None!&lt;/li&gt;
&lt;li&gt;Allowed Actions: None!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Finite State Machines&lt;/h2&gt;
&lt;p&gt;The mental model we just created is a state machine or finite state machine (FSM). &lt;strong&gt;Finite&lt;/strong&gt; meaning there‚Äôs a limited amount of states that the form can exist in, &lt;strong&gt;state&lt;/strong&gt; describing the status of the form, and &lt;strong&gt;machine&lt;/strong&gt; referring to the mechanism of how we transition to and from different states.&lt;/p&gt;
&lt;p&gt;I‚Äôm not a state machine expert, so I highly recommend reading &lt;a href=&quot;https://medium.com/@DavidKPiano/the-facetime-bug-and-the-dangers-of-implicit-state-machines-a5f0f61bdaa2&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://24ways.org/2018/state-machines-in-user-interfaces/&quot;&gt;articles&lt;/a&gt; by David Khourshid for a deeper dive into FSMs.&lt;/p&gt;
&lt;p&gt;There are two options for applying this model to our code.&lt;/p&gt;
&lt;p&gt;First, there‚Äôs library that‚Äôs tailor-made for FSMs called &lt;a href=&quot;https://xstate.js.org/docs/&quot;&gt;XState&lt;/a&gt;, written by the same David mentioned above. Here‚Äôs a great &lt;a href=&quot;https://gedd.ski/post/state-machines-in-react/&quot;&gt;tutorial&lt;/a&gt; by Dave Geddes on using xstate in React if you‚Äôre interested.&lt;/p&gt;
&lt;p&gt;The other option is to implement the logic ourselves in our reducer. This is a bit of a tall order, but if you read the FSM articles I linked, you might have seen an example of a FSM implemented with a &lt;strong&gt;nested switch&lt;/strong&gt; statement. Let‚Äôs apply that to our form.&lt;/p&gt;
&lt;h3&gt;Advanced Switch Statements&lt;/h3&gt;
&lt;p&gt;Before we get to our final example, let‚Äôs briefly review JavaScript‚Äôs &lt;code&gt;switch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What we‚Äôre about to use is the ‚Äúfall-through‚Äù or ‚Äúwaterfall‚Äù switch usage. What this means is we will deliberately &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;break&lt;/code&gt; in every case so that we can match multiple cases.&lt;/p&gt;
&lt;p&gt;Let‚Äôs see an example where we ignore Mom‚Äôs advice and skip breakfast, but still eat lunch and dinner:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const actionType = &quot;LUNCH_ORDERED&quot;

switch(actionType) {
  case &quot;BREAKFAST_ORDERED&quot;:
    console.log(&quot;breakfast&quot;)
    // no break!
  case &quot;LUNCH_ORDERED&quot;:
    console.log(&quot;lunch&quot;)
    // no break!
  case &quot;DINNER_ORDERED&quot;:
    console.log(&quot;dinner&quot;)
    break
  default:
    console.log(&quot;fasting üòµ&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Once you match a case, you match all cases until you break or return.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What about nested switches üòµ?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function dailyLife(status, actionType) {
  switch(status) {
    case &quot;work&quot;:
      switch(actionType) {
        case &quot;WORK_REQUESTED&quot;:
          console.log(&quot;DOING WORK&quot;)
          break
      }
    //no break after &quot;work&quot;
    case &quot;holiday&quot;:
      switch(actionType) {
        case &quot;CAKE_EATEN&quot;:
          console.log(&quot;FEELING FAT&quot;)
          break
        case &quot;NAP_REQUESTED&quot;:
          console.log(&quot;NAPPING&quot;)
          break
      }
  }
}
console.log(&quot;ooooh, who&apos;s birthday is it?&quot;)
dailyLife(&quot;work&quot;, &quot;CAKE_EATEN&quot;) // feeling fat

console.log(&quot;Taking a break, afk&quot;)
dailyLife(&quot;work&quot;, &quot;NAP_REQUESTED&quot;) // napping

console.log(&quot;Hey, I know it&apos;s Saturday, but can you get us that TPS report?&quot;)
dailyLife(&quot;holiday&quot;, &quot;WORK_REQUESTED&quot;) // not happening, sorry boss
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we can see that you can take a nap at work and on holiday, but you can‚Äôt work on a holiday. (At least you shouldn‚Äôt).&lt;/p&gt;
&lt;p&gt;The idea is that if you have to share actions between states, &lt;strong&gt;put the state with unshared actions at the top&lt;/strong&gt;. If we can only work at work, then the work status should be at the top. If you can eat cake at work and on holiday, then holidays/cake-eating should be below.&lt;/p&gt;
&lt;p&gt;This is definitely an advanced technique, so be careful and test often when you‚Äôre writing a complicated switch that‚Äôs nesting and waterfalling through cases.&lt;/p&gt;
&lt;p&gt;In the case of our form, we want the user to be able to edit the form regardless if it‚Äôs ‚Äúclean‚Äù or ‚Äúdirty‚Äù. To share the input change actions, we don‚Äôt &lt;code&gt;break&lt;/code&gt; between the clean and dirty cases so that those actions are available to both. Also, you can submit in both states, but submit behaves differently in each.&lt;/p&gt;
&lt;p&gt;Alright, here we go! Let‚Äôs take a look at our final form example with FSMs and &lt;code&gt;useReducer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const actions = {
  nameChanged: &apos;NAME_CHANGED&apos;,
  emailChanged: &apos;EMAIL_CHANGED&apos;,
  formSubmitted: &apos;FORM_SUBMITTED&apos;,
}

const initialState = {
  name: &apos;&apos;,
  email: &apos;&apos;,
  nameError: null,
  emailError: null,
  submitAttempted: false,
  submitMessage: &apos;&apos;,
  status: &apos;clean&apos;,
}

function formReducer(state, action) {
  let error
  switch (state.status) {
    case &apos;dirty&apos;:
      switch (action.type) {
        case actions.formSubmitted:
          let formValid = true
          let nameError = validate(&apos;name&apos;, state.name)
          let emailError = validate(&apos;email&apos;, state.email)
          if (nameError || !state.name || emailError || !state.email) {
            formValid = false
          }
          return {
            ...state,
            nameError,
            emailError,
            submitAttempted: true,
            status: formValid ? &apos;completed&apos; : &apos;dirty&apos;,
            submitMessage: formValid
              ? &apos;Form Submitted Successfully&apos;
              : &apos;Form Has Errors&apos;,
          }
      }
    // no &apos;break&apos; or &apos;return&apos;, case &apos;dirty&apos; continues!
    case &apos;clean&apos;:
      switch (action.type) {
        case actions.nameChanged:
          error = validate(&apos;name&apos;, action.payload)
          return {
            ...state,
            name: action.payload,
            nameError: error,
            submitMessage: &apos;&apos;,
            status: &apos;dirty&apos;,
          }
        case actions.emailChanged:
          error = validate(&apos;email&apos;, action.payload)
          return {
            ...state,
            email: action.payload,
            emailError: error,
            submitMessage: &apos;&apos;,
            status: &apos;dirty&apos;,
          }
        case actions.formSubmitted:
          return {
            ...state,
            submitMessage: &apos;Please fill out the form&apos;,
          }
        default:
          return state
      }
    case &apos;completed&apos;:
    // no &apos;break&apos; or &apos;return&apos;, case &apos;completed&apos; continues!
    default:
      return state
  }
}

function validate(name, value) {
  if (typeof value === &apos;string&apos;) value = value.trim()
  switch (name) {
    case &apos;name&apos;:
      if (value.length === 0) {
        return &apos;Must enter name&apos;
      } else if (value.split(&apos; &apos;).length &amp;lt; 2) {
        return &apos;Must enter first and last name&apos;
      } else {
        return null
      }
      break
    case &apos;email&apos;:
      if (value.length === 0) {
        return &apos;Must enter email&apos;
      } else if (
        !value.includes(&apos;@&apos;) ||
        !value.includes(&apos;.&apos;) ||
        value.split(&apos;.&apos;)[1].length &amp;lt; 2
      ) {
        return &apos;Must enter valid email&apos;
      } else {
        return null
      }
      break
  }
}

function FormExample() {
  const [state, dispatch] = React.useReducer(formReducer, initialState)

  function handleChange({ target: { name, value } }) {
    dispatch({ type: actions[name + &apos;Changed&apos;], payload: value })
  }

  function handleSubmit(e) {
    e.preventDefault()
    dispatch({ type: actions.formSubmitted })
  }

  const columnStyle = {
    display: &apos;flex&apos;,
    flexDirection: &apos;column&apos;,
  }
  const inputStyle = hasError =&amp;gt; {
    return {
      outline: hasError &amp;amp;&amp;amp; state.submitAttempted ? &apos;2px solid red&apos; : &apos;none&apos;,
    }
  }
  return (
    &amp;lt;form style={{ ...columnStyle, width: &apos;300px&apos; }} onSubmit={handleSubmit}&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;Name:&amp;lt;/span&amp;gt;
        &amp;lt;input
          style={inputStyle(state.nameError)}
          onChange={handleChange}
          name=&quot;name&quot;
          value={state.name}
          type=&quot;text&quot;
        /&amp;gt;
        &amp;lt;span&amp;gt;{state.submitAttempted &amp;amp;&amp;amp; state.nameError}&amp;lt;/span&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;label style={columnStyle}&amp;gt;
        &amp;lt;span&amp;gt;email:&amp;lt;/span&amp;gt;
        &amp;lt;input
          style={inputStyle(state.emailError)}
          onChange={handleChange}
          name=&quot;email&quot;
          value={state.email}
          type=&quot;text&quot;
        /&amp;gt;
        &amp;lt;span&amp;gt;{state.submitAttempted &amp;amp;&amp;amp; state.emailError}&amp;lt;/span&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;p&amp;gt;{state.submitMessage}&amp;lt;/p&amp;gt;
      &amp;lt;button type=&quot;submit&quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;pre&amp;gt;{JSON.stringify(state, null, 2)}&amp;lt;/pre&amp;gt;
    &amp;lt;/form&amp;gt;
  )
}

render(FormExample)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now our form is bug free!&lt;/p&gt;
&lt;p&gt;We‚Äôve explicitly modeled and accounted for all the possible states it can exist in, and defined the possible actions in those states.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may notice we still have a &lt;code&gt;submitAttempted&lt;/code&gt; boolean in the code. This is OK because it is only used to show or hide the error messages in our form. Most importantly, &lt;strong&gt;We don‚Äôt check &lt;code&gt;submitAttempted&lt;/code&gt; to determine what state we‚Äôre in.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;This post is full of advanced concepts and I hope that you were able to learn some of them even if you didn‚Äôt make it all the way to the end. &lt;strong&gt;Don‚Äôt fret if you didn‚Äôt understand every concept and example.&lt;/strong&gt; Start at the easy stuff, and start applying and practicing those concepts first in your own code before moving on to the more difficult concepts. That‚Äôs how I learned them.&lt;/p&gt;
&lt;p&gt;Thanks for reading this huge article, cheers!&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[React's useEffect and useRef Explained for Mortals]]></title><description><![CDATA[If the React docs leave you in the dust, or Dan Abramov‚Äôs blog makes you feel like you‚Äôre reading a scroll handed down from Mt Olympus‚Ä¶]]></description><link>https://leewarrick.com/blog/react-use-effect-explained/</link><guid isPermaLink="false">https://leewarrick.com/blog/react-use-effect-explained/</guid><pubDate>Fri, 06 Sep 2019 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/fdb92914fc9093dee6a2c20dad8fbd50/c35de/acropolis.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of the Acropolis of Athens, Athens, Greece by Cristina Gottardi&quot; title=&quot;Photo of the Acropolis of Athens, Athens, Greece by Cristina Gottardi&quot; src=&quot;https://leewarrick.com/blog/static/fdb92914fc9093dee6a2c20dad8fbd50/a111b/acropolis.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If the React docs leave you in the dust, or Dan Abramov‚Äôs &lt;a href=&quot;https://overreacted.io/a-complete-guide-to-useeffect/&quot;&gt;blog&lt;/a&gt; makes you feel like you‚Äôre reading a scroll handed down from Mt Olympus written in ancient Greek, you‚Äôre not alone.&lt;/p&gt;
&lt;p&gt;Sometimes the pantheon of React Gods have a hard time translating their wisdom into language the rest of us can understand. It usually goes like this: You hit a snag with React, google your issue, and read a blog or Stack Overflow post with some advice that makes you feel more lost than when you started.&lt;/p&gt;
&lt;p&gt;I‚Äôve certainly fallen victim to this many, many times. Particularly with &lt;code&gt;useEffect&lt;/code&gt;. Before we dive into this particular hook, let me say that I love writing React with hooks and wouldn‚Äôt want to go back to classes. That said, &lt;code&gt;useEffect&lt;/code&gt; is a big pain point.&lt;/p&gt;
&lt;h2&gt;What is an ‚Äúeffect‚Äù anyway?&lt;/h2&gt;
&lt;p&gt;To really wrap your head around &lt;code&gt;useEffect&lt;/code&gt;, let‚Äôs back up a little bit and talk about programming and JavaScript.&lt;/p&gt;
&lt;p&gt;The effects that &lt;code&gt;useEffect&lt;/code&gt; is named for are what we affectionately refer to as ‚Äúside effects‚Äù.&lt;/p&gt;
&lt;p&gt;So what is a side effect? It‚Äôs a bit of code that reaches out and ‚Ä¶does something else. It‚Äôs an abstract concept, so let‚Äôs talk in examples.&lt;/p&gt;
&lt;p&gt;Here‚Äôs a function with NO side effects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function add(a, b) {
    return a + b
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function &lt;code&gt;add&lt;/code&gt; does nothing except take an input and return an output. It doesn‚Äôt reach outside itself to mess with anything else!&lt;/p&gt;
&lt;p&gt;Let‚Äôs introduce a side effect.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const resultDiv = document.getElementById(&apos;add-example&apos;)
function add(a, b) {
    const result = a + b
    resultDiv.textContent = `The Result is ${result}`
    return a + b
}
add(3, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;add-example&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now our function reaches outside of itself to update the DOM (short for &lt;a href=&quot;https://www.youtube.com/watch?v=H63dVFDuJDM&quot;&gt;Document Object Model&lt;/a&gt;) and show the result. This additional behavior is a side effect.&lt;/p&gt;
&lt;h2&gt;Side Effects in React&lt;/h2&gt;
&lt;p&gt;So what about React? It‚Äôs a library that pretty much only updates the DOM. A view library, if you will. So what would you call a side effect in React?&lt;/p&gt;
&lt;p&gt;Anything outside of updating the page. If you‚Äôre not using React to update state or render HTML, that‚Äôs a side effect. It‚Äôs any non-React thing.&lt;/p&gt;
&lt;p&gt;This means anytime you call an API, use &lt;code&gt;setInterval&lt;/code&gt;/&lt;code&gt;setTimeout&lt;/code&gt;, add a keyboard listener, or really anytime you mess with the &lt;code&gt;window&lt;/code&gt; object you‚Äôre introducing side effects.&lt;/p&gt;
&lt;p&gt;Hooks are amazing and let you write really readable, reusable code‚Ä¶ except when you‚Äôre dealing with side effects. And that‚Äôs unfortunate, because when you think about it, most of the fun, interesting stuff we do as web developers revolves around side effects.&lt;/p&gt;
&lt;p&gt;Let‚Äôs take a step back from hooks for a minute and look at how we would handle side effects in class-based components.&lt;/p&gt;
&lt;h3&gt;Class-based Components and Side Effects&lt;/h3&gt;
&lt;p&gt;In class-based components, we would use lifecycle methods to perform side effects. For example, on &lt;code&gt;componentDidMount&lt;/code&gt; we would call APIs to get data for render.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚ÄúWhy not call the API in the constructor function?‚Äù&lt;/em&gt;, you might ask. Well, because React says stuff we use for render goes in ‚Äústate‚Äù and we can‚Äôt mess with state until our component is loaded onto the page. If we try to update state before the component is loaded, we get errors.&lt;/p&gt;
&lt;p&gt;Here‚Äôs a typical class-based component hitting the &lt;a href=&quot;https://pokeapi.co/&quot;&gt;PokeAPI&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Pokemon extends React.Component {
    constructor() {
        super()
        this.state = null
    }
    componentDidMount() {
        fetch(&apos;https://pokeapi.co/api/v2/pokemon/gengar/&apos;)
        .then(res =&amp;gt; res.json())
        .then(res =&amp;gt; {
            this.setState(res)
        })
    }
    render() {
        const pokemon = this.state
        const style = {textTransform: &apos;capitalize&apos;}
        return (
            &amp;lt;div&amp;gt;
            { pokemon
                ? &amp;lt;&amp;gt;
                    &amp;lt;img src={pokemon.sprites.front_default}
                        alt={&apos;Image of &apos; + pokemon.name}/&amp;gt;
                    &amp;lt;p style={style}&amp;gt;Name: {pokemon.name}&amp;lt;/p&amp;gt;
                    &amp;lt;p style={style}&amp;gt;
                        Type: {pokemon.types.map(x =&amp;gt; x.type.name).join(&apos;, &apos;)}
                    &amp;lt;/p&amp;gt;
                &amp;lt;/&amp;gt;
                : &apos;Loading...&apos;
            }
            &amp;lt;/div&amp;gt;
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works well, except when it doesn‚Äôt. What happens when we want to hit the API again to grab a different pokemon? What if this component is attached to a certain route in our app and the route changes, but the component doesn‚Äôt unmount/remount. What if the user goes to a different page and the component unmounts before the API call finishes?&lt;/p&gt;
&lt;p&gt;The answer is to add more lifecycle methods like &lt;code&gt;componentDidUpdate&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt; to perform more API calls and prevent weird unmounting errors. So we add those lifecycle methods in to handle all our edge cases. And by the time we‚Äôre done, we realize most of our component consists of lifecycle code.&lt;/p&gt;
&lt;h2&gt;Then Came React Hooks&lt;/h2&gt;
&lt;p&gt;The React team realized that the class API is a little unwieldy and hard to reason about. People were making &lt;a href=&quot;https://levelup.gitconnected.com/componentdidmakesense-react-lifecycle-explanation-393dcb19e459&quot;&gt;lifecycle flowcharts&lt;/a&gt; trying to understand the inner workings of React ‚Ä¶it was a mess.&lt;/p&gt;
&lt;p&gt;So at ReactConf in October of 2018, after Sophie Alpert outlined just how bad classes are to use, Dan Abramov got on stage and introduced hooks (You can watch the video &lt;a href=&quot;https://youtu.be/dpw9EHDh2bM?t=643&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Hooks introduced statefulness in functional components, as well as a new way to handle side effects. Hooks made React code more reusable with less code‚Äîa huge win!&lt;/p&gt;
&lt;p&gt;Except for one small quirk. Each render, the whole component/function is re-run.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at an example of a hooks-based component:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function RerenderExample() {
    const [bool, setBool] = React.useState(false)
    const randomNum = Math.random()
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;This number will be different each time you click the button:&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;{randomNum}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={() =&amp;gt; setBool(!bool)}&amp;gt;Trigger a render&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We‚Äôre not even using &lt;code&gt;bool&lt;/code&gt; in our rendered JSX, yet the whole function runs everytime the state changes. &lt;strong&gt;Every render, everything inside the component re-runs: function definitions, variable creation/assignment, etc.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you‚Äôre thinking &lt;em&gt;‚Äúwhat if I have to do something computationally expensive inside a component? This can‚Äôt be performant‚Ä¶‚Äù&lt;/em&gt;, that‚Äôs an astute observation. An expensive operation in a functional component &lt;em&gt;wouldn‚Äôt&lt;/em&gt; be performant. In fact &lt;code&gt;useCallback&lt;/code&gt; and &lt;code&gt;useMemo&lt;/code&gt; exist as escape hatches for this very problem. Kent C Dodds has a challenging read on those &lt;a href=&quot;https://kentcdodds.com/blog/usememo-and-usecallback&quot;&gt;here&lt;/a&gt;, but to summarize, according to Kent you shouldn‚Äôt worry about the re-renders until you see performance impacts.&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;Note&lt;/strong&gt;: If you‚Äôre unfamiliar with hooks, bookmark that article and come back to it when you‚Äôre ready. Don‚Äôt worry about memoization until you have to.)&lt;/p&gt;
&lt;p&gt;Hooks like &lt;code&gt;useState&lt;/code&gt; employ some magic under-the-hood to avoid the re-render problem. That‚Äôs great, and it seems simple enough using &lt;code&gt;useState&lt;/code&gt;, but what about when you need to do things outside of setting state?&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;useEffect&lt;/code&gt;. Gone are those pesky lifecycle methods, hooray! However this hook comes with its own weirdness. First let‚Äôs check out the syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//accepts two arguments: a function, and dependency array
useEffect(() =&amp;gt; {
    // do stuff
    return () =&amp;gt; {} //function to undo our stuff from above when component unmounts
}, []) //dependency array of things to watch for changes on
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you pass &lt;code&gt;useEffect&lt;/code&gt; a callback function to run that contains your side effects, and then an array of things to watch. If the watched things change, &lt;code&gt;useEffect&lt;/code&gt; will re-run our callback function. If you need to clean up your side effect on unmount, return a function that contains that code.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at our pokemon example with hooks and &lt;code&gt;useEffect&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Pokemon() {
    const [pokemon, setPokemon] = React.useState(null)
    React.useEffect(() =&amp;gt; {
        fetch(&apos;https://pokeapi.co/api/v2/pokemon/gengar/&apos;)
        .then(res =&amp;gt; res.json())
        .then(res =&amp;gt; {
            setPokemon(res)
        })
    }, []) // empty array means nothing to watch, so run once and no more
    const style = {textTransform: &apos;capitalize&apos;}
    return (
        &amp;lt;div&amp;gt;
        { pokemon
            ? &amp;lt;&amp;gt;
                &amp;lt;img src={pokemon.sprites.front_default}
                    alt={&apos;Image of &apos; + pokemon.name}/&amp;gt;
                &amp;lt;p style={style}&amp;gt;Name: {pokemon.name}&amp;lt;/p&amp;gt;
                &amp;lt;p style={style}&amp;gt;
                    Type: {pokemon.types.map(x =&amp;gt; x.type.name).join(&apos;, &apos;)}
                &amp;lt;/p&amp;gt;
            &amp;lt;/&amp;gt;
            : &apos;Loading...&apos;
        }
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you‚Äôre staring at that empty dependency array, you‚Äôve noticed the first &lt;code&gt;useEffect&lt;/code&gt; quirk. By passing an empty array, we‚Äôre saying ‚Äúonly ever do this once‚Äù. The React pantheon tells us that on rare occasions that‚Äôs ok, but most of the time you want something in there. The reason is that usually you want to synchronize with &lt;em&gt;something&lt;/em&gt; in your code, not just perform the effect once. For example, what if our pokemon component depended on a route parameter or props, anything that said, ‚Äúgo get a new pokemon‚Äù without mounting/unmounting?&lt;/p&gt;
&lt;p&gt;Let‚Äôs say our component depended on a prop &lt;code&gt;pokemonToGet&lt;/code&gt; that was an argument telling it which pokemon to get from the API. Let‚Äôs also add a tiny form for testing purposes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Pokemon({pokemonToGet}) {
    const [pokemon, setPokemon] = React.useState(null)
    React.useEffect(() =&amp;gt; {
        fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonToGet}/`)
        .then(res =&amp;gt; res.json())
        .then(res =&amp;gt; {
            setPokemon(res)
        })
    }, [pokemonToGet]) // get a new pokemon with the pokemonToGet prop changes
    const style = {textTransform: &apos;capitalize&apos;}
    return (
        &amp;lt;div&amp;gt;
        { pokemon
            ? &amp;lt;&amp;gt;
                &amp;lt;img src={pokemon.sprites.front_default}
                    alt={&apos;Image of &apos; + pokemon.name}/&amp;gt;
                &amp;lt;p style={style}&amp;gt;Name: {pokemon.name}&amp;lt;/p&amp;gt;
                &amp;lt;p style={style}&amp;gt;
                    Type: {pokemon.types.map(x =&amp;gt; x.type.name).join(&apos;, &apos;)}
                &amp;lt;/p&amp;gt;
            &amp;lt;/&amp;gt;
            : &apos;Loading...&apos;
        }
        &amp;lt;/div&amp;gt;
    )
}
function PokemonForm() {
    const [inputValue, setInputValue] = React.useState(&quot;rowlet&quot;)
    const [pokemonToGet, setPokemonToGet] = React.useState(&quot;gengar&quot;)
    function getPokemon() {
        setPokemonToGet(inputValue.trim().toLowerCase())
        setInputValue(&quot;&quot;)
    }
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;input onChange={(e) =&amp;gt; setInputValue(e.target.value)}
                value={inputValue} type=&quot;text&quot;/&amp;gt;
            &amp;lt;button onClick={getPokemon}&amp;gt;
                Get Pokemon
            &amp;lt;/button&amp;gt;
            &amp;lt;Pokemon pokemonToGet={pokemonToGet} /&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
render(&amp;lt;PokemonForm /&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, now our component fetches a new pokemon based on our prop changes. With classes we would‚Äôve had to play with &lt;code&gt;componentDidUpdate&lt;/code&gt; and such to achieve a similar effect.&lt;/p&gt;
&lt;p&gt;Ryan Florence has a great &lt;a href=&quot;https://twitter.com/ryanflorence/status/1125041041063665666?lang=en&quot;&gt;tweet&lt;/a&gt; to summarize &lt;code&gt;useEffect&lt;/code&gt;‚Äôs usage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The question is not ‚Äúwhen does this effect run‚Äù the question is ‚Äúwith which state does this effect synchronize with‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;useEffect(fn) // all state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;useEffect(fn, []) // no state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;useEffect(fn, [these, states])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That ‚Äúall state‚Äù case he mentions where you pass in nothing for dependencies is a weird one. I‚Äôve personally never found a use for it. We know that the whole component runs with each render, so I‚Äôm wondering if there‚Äôs some weird edge case that requires you to use &lt;code&gt;useEffect(fn)&lt;/code&gt; without any dependency array. In any case, most of the time you‚Äôre going to be working with this: &lt;code&gt;useEffect(fn, [these, states])&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;UseEffect and Previous State: Where things fall apart&lt;/h2&gt;
&lt;p&gt;The mental model so far for &lt;code&gt;useEffect&lt;/code&gt; seems straight-forward enough: synchronize it with certain state changes of your choosing. The problem is when you need to reference that state in an effect, not just know if it changed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You don‚Äôt get access to current state inside of &lt;code&gt;useEffect&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We didn‚Äôt see this in our API call example because we‚Äôre simply overwriting the previous state.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at a simple example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const [count, setCount] = React.useState(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            setCount(count + 1)
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;The count is: {count}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like we did all the right things (even cleaning up our side effect on unmount) but our counter isn‚Äôt incrementing. Is it a &lt;code&gt;this&lt;/code&gt; issue? Do we not have access to the &lt;code&gt;window&lt;/code&gt; object that &lt;code&gt;setInterval&lt;/code&gt; belongs to?&lt;/p&gt;
&lt;p&gt;No and no. If you added a &lt;code&gt;console.log&lt;/code&gt; into that interval, you‚Äôd see it tick every second.&lt;/p&gt;
&lt;p&gt;I‚Äôll prove it to you:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const [count, setCount] = React.useState(0)
    const [randomNum, setRandomNum] = React.useState(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            setCount(count + 1)
            setRandomNum(Math.random())
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;The count is: {count}&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;RandomNum is {randomNum}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we get a new random number every second. Our interval code is fine.&lt;/p&gt;
&lt;p&gt;We‚Äôre able to set new state, but are unable to access current state.&lt;/p&gt;
&lt;p&gt;This is a ‚Äù&lt;strong&gt;stale closure&lt;/strong&gt;‚Äù. I won‚Äôt get into closures, but just know that because of the implementation of React/hooks, the count variable is always going to be 0 in our interval function. It‚Äôs an old reference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 9/7/19&lt;/strong&gt;: It turns out, there‚Äôs a solution for simple examples like above, as pointed out by John Tucker (thanks John!). Much like &lt;code&gt;setState&lt;/code&gt; in class-based components, &lt;code&gt;useState&lt;/code&gt; can also accept a callback function that receives the previous state as an argument. The &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#functional-updates&quot;&gt;React Docs&lt;/a&gt; also make note of this.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example of the quick fix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const [count, setCount] = React.useState(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            //let&apos;s pass a function instead
            //the argument is the current state
            setCount(count =&amp;gt; count + 1)
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;The count is: {count}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This still doesn‚Äôt solve all of our problems, though. If you need to access to the latest state inside &lt;code&gt;useEffect&lt;/code&gt;, but &lt;em&gt;not&lt;/em&gt; update it, you would have to start wrapping your &lt;code&gt;useEffect&lt;/code&gt; code in &lt;code&gt;setState&lt;/code&gt; callbacks, and then returning the unchanged state at the end. This could quickly become an absolute mess, particularly if you‚Äôre working with multiple state values.&lt;/p&gt;
&lt;p&gt;Another possible solution could be to work only with &lt;code&gt;useReducer&lt;/code&gt;, as that receives previous state, but filling your reducer with side effects also seems very messy, and I wouldn‚Äôt suggest anyone stop using &lt;code&gt;useState&lt;/code&gt; entirely.&lt;/p&gt;
&lt;p&gt;In any case, I‚Äôve fallen into the stale closure trap many, many times when writing hooks. I didn‚Äôt even know it had a name until I read it in &lt;a href=&quot;https://docs.google.com/presentation/d/1PUvpXMBEDS45rd0wHu6tF3j_8wmGC6cOLtOw2hzU-mw/edit#slide=id.p&quot;&gt;this talk&lt;/a&gt; by Rich Harris, the man behind &lt;a href=&quot;https://svelte.dev/&quot;&gt;Svelte&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apparently, I‚Äôm not the only one tripping over them in hooks, either:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/5a5dbcc6667a5da9eeabc5cbe90a1427/ed46b/staleclosures.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of Tweet by Kent Dodds asking about hooks pitfalls and a snarky response of &amp;quot;stale closures&amp;quot;&quot; title=&quot;Photo of Tweet by Kent Dodds asking about hooks pitfalls and a snarky response of &amp;quot;stale closures&amp;quot;&quot; src=&quot;https://leewarrick.com/blog/static/5a5dbcc6667a5da9eeabc5cbe90a1427/dbb61/staleclosures.png&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;React even mentions it in their &lt;a href=&quot;https://reactjs.org/docs/hooks-faq.html#why-am-i-seeing-stale-props-or-state-inside-my-function&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúAny function inside a component, including event handlers and effects, ‚Äúsees‚Äù the props and state from the render it was created in.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I read this prior and it made little sense to me before really digging into the issue. I imagine it could be a bit of a black eye for React, so perhaps they don‚Äôt wish to call it out too loudly.&lt;/p&gt;
&lt;p&gt;Dan Abramov, however, describes the problem better in his &lt;a href=&quot;https://overreacted.io/a-complete-guide-to-useeffect/&quot;&gt;blog&lt;/a&gt; and even provides a solution:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúEffects always ‚Äúsee‚Äù props and state from the render they were defined in. That helps prevent bugs but in some cases can be annoying. For those cases, you can explicitly maintain some value in a mutable ref.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was helpful, because it provided a solution in the form of &lt;code&gt;useRef&lt;/code&gt; (Thanks Dan!), but it left me in the dark as to how it would help avoid the issue (mostly because I didn‚Äôt understand &lt;code&gt;useRef&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;What is a ‚Äúref‚Äù, and how do you use one?&lt;/h2&gt;
&lt;p&gt;So traditionally, refs were meant to let you directly access an html element. For instance, let‚Äôs say you needed to focus an input field. You have to bail out of React and use regular JavaScript to call &lt;code&gt;.focus()&lt;/code&gt;. Hooks actually make this fairly simple:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function InputField() {
    const inputRef = React.useRef()
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;input type=&quot;text&quot; ref={inputRef} /&amp;gt;
            &amp;lt;button onClick={() =&amp;gt; inputRef.current.focus()}&amp;gt;
                Click to Focus the input
            &amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! Refs are an easy escape hatch to access native DOM APIs when we need to.&lt;/p&gt;
&lt;p&gt;‚Ä¶but how does that help us fix our stale closure counter example?&lt;/p&gt;
&lt;h2&gt;Using Refs to avoid Stale Closures&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables&quot;&gt;React docs&lt;/a&gt; compare refs to ‚Äúinstance variables‚Äù. I didn‚Äôt know what that meant (thanks &lt;a href=&quot;https://en.wikipedia.org/wiki/Instance_variable&quot;&gt;Wikipedia&lt;/a&gt;), so I didn‚Äôt find that helpful.&lt;/p&gt;
&lt;p&gt;I managed to wrap my head around refs by thinking about them this way:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Refs exist outside of the re-render cycle.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Think of refs as a variable you‚Äôre setting to the side. When your component re-runs it happily skips over that ref until you call it somewhere with &lt;code&gt;.current&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let‚Äôs see the fix for our timer example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const [count, setCount] = React.useState(0)
    const countRef = React.useRef(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            countRef.current = countRef.current + 1
            setCount(countRef.current)
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;The count is: {count}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to stop the timer at say, 10, we could easily do so using the ref:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const [count, setCount] = React.useState(0)
    const countRef = React.useRef(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            if (countRef.current === 10)
                return clearInterval(intervalId)
            countRef.current = countRef.current + 1
            setCount(countRef.current)
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;The count is: {count}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here‚Äôs the alternative using the &lt;code&gt;setState&lt;/code&gt; callback approach, for sake of comparison:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const [count, setCount] = React.useState(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            setCount(count =&amp;gt; {
                if (count === 10) {
                    clearInterval(intervalId)
                    return count
                }
                else return count + 1
            })
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;The count is: {count}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could see this quickly approaching callback hell, so I would caution against using the callback approach if you‚Äôre doing something more complex.&lt;/p&gt;
&lt;h2&gt;State Versus Refs&lt;/h2&gt;
&lt;p&gt;Is it possible to ditch state entirely and just use refs?&lt;/p&gt;
&lt;p&gt;You might be inclined to think you could use refs instead of state for your component and just sidestep all this weird behavior.&lt;/p&gt;
&lt;p&gt;You can‚Äôt. &lt;strong&gt;Refs aren‚Äôt reactive.&lt;/strong&gt; When you change a ref, it doesn‚Äôt cause a re-render. (Remember, they exist outside of the re-render cycle).&lt;/p&gt;
&lt;p&gt;This won‚Äôt work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const count = React.useRef(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            count.current = count.current + 1
            //console.log(&apos;Ref example count: &apos; + count.current)
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;The count is: {count.current}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That component is actually counting upwards internally, but it‚Äôs not causing the HTML to update. You need &lt;code&gt;useState&lt;/code&gt; for that. (Go ahead and uncomment the &lt;code&gt;console.log&lt;/code&gt; if you don‚Äôt believe me)&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example to demonstrate refs vs state:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Counter() {
  const [count, setCount] = React.useState(0)
  const countRef = React.useRef(0)

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;State Count: {count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;
        Increment State Count
      &amp;lt;/button&amp;gt;
      &amp;lt;p&amp;gt;Ref Count: {countRef.current}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; countRef.current = countRef.current + 1}&amp;gt;
        Increment Ref Count
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

render(&amp;lt;Counter/&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You won‚Äôt see the ref count change until you trigger a re-render by setting state.&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;I love hooks and functional components in React, but the quirks I‚Äôve outlined have given me pause. I don‚Äôt like being required to know so much about the inner-workings of React to use it. I think it presents a roadblock for those learning React, and I hope in the future the React team comes up with some better ways to handle these quirks.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[Staying Sane while Organizing CSS]]></title><description><![CDATA[In my time as a front-end developer, I‚Äôve seen and heard a lot of gripes about CSS.I often see people reach for a CSS framework like‚Ä¶]]></description><link>https://leewarrick.com/blog/staying-sane-with-css/</link><guid isPermaLink="false">https://leewarrick.com/blog/staying-sane-with-css/</guid><pubDate>Sun, 01 Sep 2019 17:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/2fd06797aa9f09bb57ed8458570b82f3/971c4/mugcss.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Mug with &apos;CSS is Awesome&apos; written on it, but &apos;Awesome&apos; overflows the border of the text&quot; title=&quot;Mug with &apos;CSS is Awesome&apos; written on it, but &apos;Awesome&apos; overflows the border of the text&quot; src=&quot;https://leewarrick.com/blog/static/2fd06797aa9f09bb57ed8458570b82f3/a111b/mugcss.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In my time as a front-end developer, I‚Äôve seen and heard a lot of gripes about CSS.&lt;/p&gt;
&lt;p&gt;I often see people reach for a CSS framework like Bootstrap, Materialize, Bulma, Tailwind, etc. to avoid writing CSS. While CSS frameworks can be great accelerators, they often require solid CSS skills to wield them effectively. That is to say, if you‚Äôre not very good at CSS, you‚Äôre probably not going to be that great using a CSS framework either.&lt;/p&gt;
&lt;p&gt;Framework or not, when hitting a snag people tend to throw more and more lines of CSS at the problem until they get a working solution. In essence, they‚Äôre following the ‚Äúcan‚Äôt tie a knot? Tie a lot!‚Äù method of development.&lt;/p&gt;
&lt;p&gt;Unfortunately a massive, improper knot is unreliable and weakens the rope.&lt;/p&gt;
&lt;p&gt;So don‚Äôt be the ‚Äúsee what sticks‚Äù developer. I‚Äôm going to show you how you can add a little organization to your stylesheets that will get you up and running quickly without pulling your hair out.&lt;/p&gt;
&lt;h2&gt;Preparing for Success: Reset vs Normalize&lt;/h2&gt;
&lt;p&gt;HTML elements come with their own default styling. Unfortunately, much of it is flat-out ugly (Looking at you, form input elements).&lt;/p&gt;
&lt;p&gt;To make things worse, browsers &lt;em&gt;still&lt;/em&gt; have not reached 100% parity on that default styling. This means certain elements appear differently on different browsers.&lt;/p&gt;
&lt;p&gt;You may even end up overriding that default styling over and over again in your stylesheet to achieve the look or positioning you want. Don‚Äôt fall into this trap. Address the default styles once.&lt;/p&gt;
&lt;p&gt;That said, there are two powerful, pre-built solutions for taming default styles: Reset and Normalize.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don‚Äôt forget to add these &lt;strong&gt;before&lt;/strong&gt; all other styles‚Äîremember the cascade!&lt;/p&gt;
&lt;h3&gt;CSS Reset&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://cssreset.com/scripts/eric-meyer-reset-css/&quot;&gt;CSS Reset&lt;/a&gt; is essentially the nuclear option. It wipes out all the styles from all of the elements, more or less making them differ in name only. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;‚Äôs look like &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags, for example.&lt;/p&gt;
&lt;p&gt;This is a valid solution if you need to start from scratch, but you typically don‚Äôt need to obliterate the default styles completely. If you do, you‚Äôre going to have to go back in and make that &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; large and bold again with &lt;em&gt;more&lt;/em&gt; CSS.&lt;/p&gt;
&lt;h3&gt;Normalize CSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://necolas.github.io/normalize.css/&quot;&gt;Normalize CSS&lt;/a&gt; is the more elegant solution than a reset. Its goal is to even out the kinks between browsers and address the most common issues with default styles, while leaving the rest intact.&lt;/p&gt;
&lt;p&gt;Most CSS frameworks have a normalize built into them already, so you won‚Äôt need to add this in if you‚Äôre using Bootstrap, Materialize, etc.&lt;/p&gt;
&lt;h3&gt;The Quick and Easy Option&lt;/h3&gt;
&lt;p&gt;There‚Äôs a third option here worth mentioning. If you‚Äôre trying to get things done quickly and not using a framework, you can eliminate most of the funk with something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* {
    margin: 0;
    padding: 0;
    /* box-sizing: border-box */
    /* border: 1px solid black */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This ends up stripping out all the micro-adjustments you typically have to come in and do later if you roll with the default padding and margin on elements. (The &lt;code&gt;*&lt;/code&gt; is a wildcard selector that selects all elements)&lt;/p&gt;
&lt;p&gt;You can optionally toss in the &lt;code&gt;box-sizing&lt;/code&gt; bit to make sure that your widths/heights are not additive. This means if you say an element is &lt;code&gt;500px&lt;/code&gt;, it will be exactly that regardless of padding, margin, or border that you add in later. I don‚Äôt typically find myself reaching for this, but it can help when you‚Äôre doing pixel-perfect layouts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The last bit is a little üî• &lt;strong&gt;hot tip&lt;/strong&gt; üî• for debugging CSS layouts. If you‚Äôre wondering how big or what shape an element is, adding a border can quickly show you how something is being rendered. This adds a border to all elements, showing you how everything is laid out on the page.&lt;/p&gt;
&lt;h2&gt;Writing Good Markup and ‚ÄòGoing with the Flow‚Äô&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.csszengarden.com/&quot;&gt;CSS Zen Garden&lt;/a&gt; showed us the awesome power of CSS to style HTML regardless of how it is written.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What‚Äôs that quote about power and responsibility‚Ä¶?&lt;/em&gt; ü§îüï∑&lt;/p&gt;
&lt;p&gt;HTML has a certain &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow&quot;&gt;flow&lt;/a&gt; to it. It‚Äôs read and rendered top-to-bottom, certain elements are &lt;code&gt;block&lt;/code&gt; or &lt;code&gt;inline&lt;/code&gt;, etc. The greater your knowledge of this default behavior, the better you can use it to your advantage, and the less CSS you‚Äôll have to write to change it.&lt;/p&gt;
&lt;p&gt;Yes, CSS can do amazing things to change the default behavior of markup. However, if you write your HTML with your end goal in mind, you‚Äôll end up weaponizing CSS less often to make your markup behave appropriately.&lt;/p&gt;
&lt;h2&gt;Mastering Layouts with Flexbox and Utility Classes&lt;/h2&gt;
&lt;p&gt;Layouts and positioning of elements is probably the biggest source of strife when learning CSS. You want an element to be in a particular spot, so you write ten lines of CSS that &lt;em&gt;almost&lt;/em&gt; positions it perfectly. Then you write ten more lines of CSS, but now it‚Äôs vertically off-center, etc.&lt;/p&gt;
&lt;p&gt;There‚Äôs a few tools and tricks that can dramatically reduce the amount of time you spend attempting to place elements where you want them to go.&lt;/p&gt;
&lt;h3&gt;Floats&lt;/h3&gt;
&lt;p&gt;Before we talk about flexbox, let‚Äôs talk briefly about floats. If you‚Äôre using floats for layouts, &lt;em&gt;please stop&lt;/em&gt;. Flexbox is &lt;a href=&quot;https://caniuse.com/#feat=flexbox&quot;&gt;highly compatible&lt;/a&gt; with older browsers, and it‚Äôs way easier to use.&lt;/p&gt;
&lt;p&gt;Floats are great for wrapping text around an element, but are awful for layouts. They break the flow of HTML and require a &lt;a href=&quot;https://www.w3schools.com/howto/howto_css_clearfix.asp&quot;&gt;clearfix&lt;/a&gt; hack to restore that flow for the rest of the elements that come after.&lt;/p&gt;
&lt;p&gt;Here‚Äôs a quick example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;float-example&quot;&amp;gt;
    &amp;lt;img src=&quot;https://picsum.photos/200&quot; id=&quot;floatImage&quot;/&amp;gt;
    &amp;lt;!-- Let&apos;s say we want this blob of text to wrap around our example image --&amp;gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ultricies sem id ante ullamcorper, a commodo eros molestie. Phasellus leo justo, malesuada scelerisque ullamcorper et, finibus ut metus. Integer egestas tellus leo, et consectetur tortor bibendum at. Sed non imperdiet risus. Sed at metus mauris. Donec ullamcorper, nunc sit amet ullamcorper mattis, diam sapien viverra nisi, sit amet pretium ligula mi in est. Nulla finibus imperdiet fringilla. Proin fringilla augue et turpis placerat, sit amet commodo enim dictum. Vivamus viverra mollis augue, in fermentum odio placerat eu. Aenean porta tellus quis urna tristique sagittis.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#floatImage {
    /* &apos;float&apos; makes the text wrap around the image, try &apos;right&apos; */
    float: left;
    /* the rest of this is to better illustrate the wrapping effect */
    shape-outside: circle();
    border-radius: 100px;
    margin: 5px;
}

#float-example::after {
    /* Another gripe about floats is having to use a clearfix! */
    content: &quot;&quot;;
    display: table;
    clear: both;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you erase some of the lorem text, and remove that clearfix hack, you‚Äôll see how floats destroy a page‚Äôs flow.&lt;/p&gt;
&lt;p&gt;Floats are a good tool if you use them correctly. However for layouts, you probably don‚Äôt want to use a float.&lt;/p&gt;
&lt;h3&gt;Flexbox&lt;/h3&gt;
&lt;p&gt;Flexbox is a powerful and simple tool to use for creating layouts and positioning elements. If you‚Äôve never heard of it, Wes Bos has a great free series on it called &lt;em&gt;[What the Flexbox?](&lt;a href=&quot;https://www.youtube.com/watch?v=Vj7NZ6FiQvo&amp;amp;list=PLu8EoSxDXHP7xj&quot;&gt;https://www.youtube.com/watch?v=Vj7NZ6FiQvo&amp;amp;list=PLu8EoSxDXHP7xj&lt;/a&gt;&lt;/em&gt;y6NIAhy0wuCd4uVdid)_. If you‚Äôre already familiar with flexbox, there‚Äôs a great &lt;a href=&quot;http://flexbox.malven.co/&quot;&gt;visual cheat sheet&lt;/a&gt; you can use as well.&lt;/p&gt;
&lt;p&gt;Conceptually, flexbox is all about creating containers. So you create a flex container with &lt;code&gt;display: flex&lt;/code&gt; and then every direct child element will be aligned a certain way based on that parent container element.&lt;/p&gt;
&lt;p&gt;It‚Äôs also a one-dimensional system of laying things out. Each container runs in one direction, either horizontally with &lt;code&gt;flex-direction: row&lt;/code&gt; (the default) or vertically with &lt;code&gt;flex-direction: column&lt;/code&gt;. Children within can then be centered/aligned very easily from there.&lt;/p&gt;
&lt;h4&gt;Why not Grid?&lt;/h4&gt;
&lt;p&gt;You can absolutely use Grid! CSS Grid is very similar to flexbox, just way more powerful. If Flexbox is a one-dimensional layout system, Grid is two-dimensional. You can pretty much set a CSS grid container to do anything your heart desires. (If you want a great free CSS Grid course‚Ä¶ yup, &lt;a href=&quot;https://www.youtube.com/watch?v=T-slCsOrLcc&amp;amp;list=PLu8EoSxDXHP5CIFvt9-ze3IngcdAc2xKG&quot;&gt;Wes Bos&lt;/a&gt; has you covered there as well.)&lt;/p&gt;
&lt;p&gt;Why use flexbox then? Honestly, I like it because it‚Äôs incredibly simple and straightforward. It does one thing and does it very well. Plus you can absolutely nest flex containers and compose them into whatever you need.&lt;/p&gt;
&lt;h2&gt;Components vs Utility classes&lt;/h2&gt;
&lt;p&gt;So when it comes to organization of CSS, there‚Äôs two camps: components, and utility classes.&lt;/p&gt;
&lt;h3&gt;Components&lt;/h3&gt;
&lt;p&gt;Components could be thought of like how bootstrap organizes their building blocks. A ‚Äújumbotron‚Äù or ‚Äúnavbar‚Äù, etc. might be represented by one class applied to an element, or possibly with a handful of subclasses used on elements within. The approach here is to use fewer class names in your HTML, scope/name them smartly, and generally style larger chunks of markup with a handful of classes.&lt;/p&gt;
&lt;p&gt;A popular convention for naming such classes is &lt;a href=&quot;http://getbem.com/&quot;&gt;BEM&lt;/a&gt;. BEM stands for ‚ÄúBlock, Element, Modifier‚Äù, and it‚Äôs essentially a system of &lt;code&gt;--&lt;/code&gt; and &lt;code&gt;__&lt;/code&gt; inside your class names to increase the reusability and composability of your CSS.&lt;/p&gt;
&lt;p&gt;Here‚Äôs a &lt;a href=&quot;https://www.youtube.com/watch?v=SLjHSVwXYq4&quot;&gt;BEM in 5-minutes&lt;/a&gt; video to get you up to speed.&lt;/p&gt;
&lt;p&gt;The catch is that this reduces resuability of your CSS. You can‚Äôt very well apply jumbotron styles to a navbar. BEM and smart naming can only take you so far.&lt;/p&gt;
&lt;h3&gt;Utility Classes&lt;/h3&gt;
&lt;p&gt;The opposite approach to componentized classes is utility classes. These are small classes that typically do one thing only. For example, &lt;code&gt;mx-auto&lt;/code&gt; would apply &lt;code&gt;margin-left: auto; margin-right: auto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Bootstrap and Materialize have a set of utility classes, and Tailwind CSS is made up entirely of utility classes if you‚Äôd like more examples.&lt;/p&gt;
&lt;p&gt;The power of utility classes is in rapid development. You almost never have to leave your HTML file when prototyping if you have enough utility classes defined.&lt;/p&gt;
&lt;p&gt;The con here is that your HTML elements can quickly become bloated with CSS classes, and a combination of ten utility classes used to define a component results in a lot of repeated code.&lt;/p&gt;
&lt;h3&gt;Finding Balance&lt;/h3&gt;
&lt;p&gt;In my experience, a combination of both methods is the sane choice. Having a handful of global utility classes in combination with larger presentational classes for blocks of markup makes the most sense. This has the added benefit of making your markup a little more readable as well, because your component class names like &lt;code&gt;card&lt;/code&gt; are listed beside your layout class names like &lt;code&gt;row&lt;/code&gt; or &lt;code&gt;column&lt;/code&gt;. So &lt;code&gt;card row&lt;/code&gt; would tell you this card has a row of children elements.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at some examples. Let‚Äôs build a standard layout, starting with a header and some navigation links.&lt;/p&gt;
&lt;p&gt;This little bit of CSS is going to let us do a lot of heavy lifting. We‚Äôre going to start with a global color palette using &lt;a href=&quot;https://codeburst.io/css-variables-explained-with-5-examples-84adaffaa5bd&quot;&gt;CSS variables&lt;/a&gt;, then define our layout classes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
    --ex-black: #1C0F13;
    --ex-green-dark: #6E7E85;
    --ex-green-light: #B7CECE;
    --ex-purple-dark: #BBBAC6;
    --ex-purple-light: #E2E2E2
}
/* These are going to be our main, bread and butter layout classes */
.row, .column {
    display: flex;
    flex-wrap: wrap;
}
.column {
    flex-direction: column;
}
.container {
    max-width: 500px;
    margin: auto
}
/* These additional classes will be used to space/align content */
.center-x {
    justify-content: center;
}
.center-y {
    align-items: center
}
.split {
    justify-content: space-between
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we‚Äôll add some styles for our navigation header with BEM.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /* add some styles to prettify */
.header {
    background-color: var(--ex-black);
    padding: 10px 5px;
}
.header__logo {
    color: var(--ex-purple-light);
    margin: 0;
}
.header__link {
    color: var(--ex-purple-dark);
    margin: 0 5px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&quot;header&quot;&amp;gt;
    &amp;lt;div class=&quot;container row split center-y&quot;&amp;gt;
        &amp;lt;h1 class=&quot;header__logo&quot;&amp;gt;Logo&amp;lt;/h1&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That made short work of the header!&lt;/p&gt;
&lt;p&gt;Let‚Äôs go a little further and build out a jumbotron/call to action and a little text thrown in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.jumbotron__container {
    background-color: var(--ex-green-light);
}
.jumbotron {
    height: 300px;
    color: var(--ex-black);
}
.jumbotron__button {
    background-color: var(--ex-purple-light);
    border: 2px solid var(--ex-green-dark);
    border-radius: 4px;
    color: var(--ex-green-dark);
    transition: background-color 200ms, color 200ms
}
.jumbotron__button:hover {
    color: var(--ex-black);
    background-color: var(--ex-purple-dark);
    border: 2px solid var(--ex-black);
}
.ex-heading {
    text-align: center;
    margin: 24px 0;
    color: var(--ex-green-dark);
}
.ex-text {
    color: var(--ex-black);
    max-width: 200px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&quot;header&quot;&amp;gt;
    &amp;lt;div class=&quot;container row split center-y&quot;&amp;gt;
        &amp;lt;h1 class=&quot;header__logo&quot;&amp;gt;Logo&amp;lt;/h1&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;
    &amp;lt;div class=&quot;jumbotron__container&quot;&amp;gt;
        &amp;lt;div class=&quot;jumbotron column center-x center-y&quot;&amp;gt;
            &amp;lt;h2&amp;gt;This is a moving message&amp;lt;/h2&amp;gt;
            &amp;lt;p&amp;gt;And this is why you should click the button below&amp;lt;/p&amp;gt;
            &amp;lt;button class=&quot;jumbotron__button&quot;&amp;gt;Call to Action&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;h3 class=&quot;ex-heading&quot;&amp;gt;Read Stuff&amp;lt;/h3&amp;gt;
    &amp;lt;section class=&quot;container row split&quot;&amp;gt;
        &amp;lt;p class=&quot;ex-text&quot;&amp;gt;
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ultricies sem id ante ullamcorper, a commodo eros molestie. Phasellus leo justo, malesuada scelerisque ullamcorper et, finibus ut metus. Integer egestas tellus leo, et consectetur tortor bibendum at.
        &amp;lt;/p&amp;gt;
        &amp;lt;p class=&quot;ex-text&quot;&amp;gt;
            Sed non imperdiet risus. Sed at metus mauris. Donec ullamcorper, nunc sit amet ullamcorper mattis, diam sapien viverra nisi, sit amet pretium ligula mi in est. Nulla finibus imperdiet fringilla.
        &amp;lt;/p&amp;gt;
    &amp;lt;/section&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool right?&lt;/p&gt;
&lt;p&gt;Doing something like this as a CSS beginner used to take me hours and many more lines of CSS!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you check this layout on mobile, you‚Äôll see it is responsive without any additional work. The &lt;code&gt;flex-wrap&lt;/code&gt; property makes our children elements wrap to a new line if there‚Äôs not enough space. Flexbox in general works very well with creating responsive layouts.&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;Hopefully by now you see the power of applying some organizational principles to your CSS. With a little practice, you can get some amazing things done with only a few lines of code.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[Finding the Courage to Code]]></title><description><![CDATA[Once I overheard someone describe a kid they met that knew he wanted to be a podiatrist üë£üë®‚Äç‚öïÔ∏è at age 6. This story is not about that‚Ä¶]]></description><link>https://leewarrick.com/blog/the-courage-to-code/</link><guid isPermaLink="false">https://leewarrick.com/blog/the-courage-to-code/</guid><pubDate>Sun, 25 Aug 2019 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/6d10004003ed837c7402cd1283b0d75b/971c4/roadsign.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of Lonely Winding Road Sign by Fabien Bazanegue&quot; title=&quot;Photo of Lonely Winding Road Sign by Fabien Bazanegue&quot; src=&quot;https://leewarrick.com/blog/static/6d10004003ed837c7402cd1283b0d75b/a111b/roadsign.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Once I overheard someone describe a kid they met that knew he wanted to be a podiatrist üë£üë®‚Äç‚öïÔ∏è at age 6. This story is not about that person.&lt;/p&gt;
&lt;p&gt;My life has been rife with indecision. In fact, a good friend once described me as the &lt;em&gt;‚Äúmale Barbie of careers‚Äù&lt;/em&gt;. Sure, I eventually found my way to coding, but it was a long, winding road.&lt;/p&gt;
&lt;h2&gt;The Early Years&lt;/h2&gt;
&lt;p&gt;As a kid, I always thought I would like to do ‚Ä¶&lt;em&gt;stuff&lt;/em&gt; with computers. I wasn‚Äôt quite sure what that stuff was, but I wanted to do it.&lt;/p&gt;
&lt;p&gt;What I &lt;em&gt;did&lt;/em&gt; know, was that programming seemed dense and mystical. Actually I didn‚Äôt even really know what programming was. I basically thought it was like the movie ‚ÄúHackers‚Äù.&lt;/p&gt;
&lt;p&gt;In elementary and middle school, my only exposure to computers was through playing Math Blaster, Oregon Trail, and a Super Mario typing game. In high school I took an introductory computer course (basically a Microsoft A+ certification class), and a web design class where we learned a little HTML.&lt;/p&gt;
&lt;p&gt;Writing math formula scripts on my graphing calculator was as close as I got to really coding something in grade school. Those miniature programs were silly, but also &lt;em&gt;exciting&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Clueless in College&lt;/h2&gt;
&lt;p&gt;The smart kids in my high school seemed to be all applying and getting accepted to college. So I blindly followed suit.&lt;/p&gt;
&lt;p&gt;I applied and was accepted to the University of Florida as a chemical engineering student. I stuck with it for about a month before catching wind of what those folks actually do, then changed majors to Computer Science.&lt;/p&gt;
&lt;p&gt;I was going for it folks, I was going to pursue my &lt;strong&gt;dream&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The first day of my intro to computer science class went like this:&lt;/p&gt;
&lt;p&gt;A lanky, disheveled man strode into the auditorium fifteen minutes late. He stood at the podium and addressed the class:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚ÄúA little news in the life of Pete. I just found out my&lt;/em&gt; &lt;strong&gt;&lt;em&gt;former&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;best friend has been sleeping with my ex-wife.‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pete then proceeded to teach us binary, hexidecimal, and other very low-level computer science concepts. For homework, we had to solve small, boring puzzles with Java like &lt;em&gt;Given a number N, print a triangle of #‚Äòs to the screen that is N wide and N tall.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I stubbornly worked through those assignments. I coded in notepad.exe and ran my code with the windows command line. I didn‚Äôt know what an IDE was and I didn‚Äôt understand how this was going to add up to writing actual software.&lt;/p&gt;
&lt;p&gt;In class, there was one student up front that nodded along with everything the instructor said, answered every question, and giggled at every Java idiosyncracy that arose during the lecture.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;hated&lt;/em&gt; that student. I hated him because I wished I &lt;strong&gt;&lt;em&gt;was&lt;/em&gt;&lt;/strong&gt; him. How did he know so much in an intro class? I felt so incredibly lost by comparison.&lt;/p&gt;
&lt;p&gt;I spent two semesters suffering through Java. Our final project of the second semester was hangman. I finished it while having absolutely no idea what I was doing.&lt;/p&gt;
&lt;p&gt;I thought, &lt;em&gt;‚ÄúIf I‚Äôve spent a year learning to code, and this is how far I‚Äôve come, how will I ever make anything useful?‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Succombing to Self-doubt&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/850489fa2701f344d35eca8247973d96/971c4/desert.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of a man walking through the desert by Dan Grinwis&quot; title=&quot;Photo of a man walking through the desert by Dan Grinwis&quot; src=&quot;https://leewarrick.com/blog/static/850489fa2701f344d35eca8247973d96/a111b/desert.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I saw myself as hopelessly outmatched. I convinced myself that coding was for child prodigies and geniuses only seen on TV. I did all the mental gymnastics required to convince myself that I was the problem.&lt;/p&gt;
&lt;p&gt;I switched majors again and got my degree in Japanese language.Ôºà„Åì„Çì„ÅÑ„Å°„ÅØÁöÜ„Åï„ÇìÔºÅÔºâBut I doubted my language skills too. In my mind, I couldn‚Äôt possibly be good enough to work as a translator or interpreter.&lt;/p&gt;
&lt;p&gt;So I went back to school to be a firefighter. I reasoned that my father did it for 30 years, had a great retirement plan, and seemed to enjoy the job, so why shouldn‚Äôt I do the same?&lt;/p&gt;
&lt;p&gt;I somehow made it through fire school. Then I became an EMT and a Paramedic. I got hired. Soon I was keeping the roads hot with my lights and sirens blaring, kicking down doors and saving lives!&lt;/p&gt;
&lt;p&gt;Except it wasn‚Äôt like that at all. Most 911 calls are not emergencies‚Äîmost are monotonous and mundane. And of the calls I ran, the 10% that &lt;em&gt;were&lt;/em&gt; true emergencies still haunt me from time to time.&lt;/p&gt;
&lt;p&gt;And the pay was awful. I was exposed to a lot of chemicals, disease, and stress for about $14 an hour.&lt;/p&gt;
&lt;p&gt;I convinced myself I needed to do better. I went back to school and became a registered nurse, and worked in intensive care and the emergency room.&lt;/p&gt;
&lt;p&gt;My situation had improved: now I was being exposed to a lot of chemicals, disease, and stress for about $25 an hour.&lt;/p&gt;
&lt;h2&gt;Changing Course&lt;/h2&gt;
&lt;p&gt;At some point I found myself looking back on my life and wondering how I ended up so far from my dreams. As a kid, I wanted to make things. I wanted to code.&lt;/p&gt;
&lt;p&gt;Sometimes I‚Äôd find myself sitting at the nurse‚Äôs station absent-mindedly clicking through Codecademy or freeCodeCamp tutorials.&lt;/p&gt;
&lt;p&gt;Then I discovered coding bootcamps.&lt;/p&gt;
&lt;p&gt;There‚Äôs a lot of noise out there about bootcamps. You‚Äôd be forgiven for thinking that they‚Äôre the ponzi scheme of our time after doing a little research on the internet.&lt;/p&gt;
&lt;p&gt;The risk didn‚Äôt matter though. I saw it as an opportunity to escape. I signed up.&lt;/p&gt;
&lt;p&gt;Going to code bootcamp turned out to be a transformative experience for a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;I was surrounded by career changers.&lt;/strong&gt; When we introduced ourselves on the first day I found myself in the company of marketing executives, fast-food workers, database administrators, school teachers, and even computer science undergrads.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everyone struggled to get their code to run.&lt;/strong&gt; Sure, some were better than others, but absolutely everyone had difficulties in class and doing the homework.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We built fun things.&lt;/strong&gt; Not once did I have to print a triangle with &lt;code&gt;for&lt;/code&gt; loops. We built personal websites, games, toy apps, and more. I could feel myself making progress. I actually enjoyed learning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We were encouraged to find our own answers.&lt;/strong&gt; From day one we were told to ‚Äúgoogle it.‚Äù It was our mantra. We weren‚Äôt expected to know everything, but we had to be able to search for the answers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So there I was with like-minded, indecisive people that were struggling to learn, having fun building things, and just as clueless as I was. It was so radically different from that college class I had taken fifteen years ago. It was invigorating.&lt;/p&gt;
&lt;h2&gt;Getting Hired as a Developer&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/611c7daf802a5a15a05cc4c0bd3df098/971c4/climbing.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of man climbing a mountain in Yosemite by Billy Onjea&quot; title=&quot;Photo of man climbing a mountain in Yosemite by Billy Onjea&quot; src=&quot;https://leewarrick.com/blog/static/611c7daf802a5a15a05cc4c0bd3df098/a111b/climbing.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I worked very, very hard in class. I knew that this was my chance to change course. I took it very seriously.&lt;/p&gt;
&lt;p&gt;I also knew going in that getting a job was not guaranteed or even likely.&lt;/p&gt;
&lt;p&gt;Most employers don‚Äôt like junior developers, and they like bootcamp grads even less. They view juniors as a liability not worth the money they‚Äôll save on a lower salary.&lt;/p&gt;
&lt;p&gt;I needed to stand out in a positive way. I needed to convince someone to give me a chance despite my inexperience.&lt;/p&gt;
&lt;p&gt;The bootcamp did not bless me with a great resume nor a great portfolio, and as a brand new developer living an hour outside of town, I had no network.&lt;/p&gt;
&lt;p&gt;So I went to meetups. I got on a developer slack channel in town and asked a boatload of stupid questions. I worked tirelessly on my resume and portfolio, soliciting feedback from anyone willing to give it. And all the while I machine-gunned my resume to every developer job on indeed that I was remotely qualified for.&lt;/p&gt;
&lt;p&gt;Eventually I saw a job-listing on slack. I messaged the poster, sent my resume and portfolio, and setup an interview.&lt;/p&gt;
&lt;p&gt;In that interview, I was calm and collected. I made them laugh and answered their questions. My past careers had taught me to maintain my composure and stay calm. One of my interviewers even remarked how it would be great to have a nurse on the team.&lt;/p&gt;
&lt;p&gt;I got the job. I quit nursing and became a fulltime developer.&lt;/p&gt;
&lt;h2&gt;Words of Wisdom&lt;/h2&gt;
&lt;p&gt;Here‚Äôs what I wish someone had told me many years ago at the start of this journey:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stop doubting yourself.&lt;/strong&gt; With enough patience and effort, you can learn anything.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do the things that make you happy&lt;/strong&gt; and make you feel fulfilled. Don‚Äôt do something because it‚Äôs ‚Äúa good job‚Äù or ‚Äúa steady paycheck‚Äù.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Find comfort in the fact that you‚Äôre not alone.&lt;/strong&gt; We‚Äôre all making this up as we go along. &lt;a href=&quot;https://twitter.com/getify/status/972495616600293381&quot;&gt;Even our mentors struggle to get their code to work&lt;/a&gt;. Nobody has all the answers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don‚Äôt ever forget where you came from.&lt;/strong&gt; Remember the things that confused, infuriated, and discouraged you. It will help you remember how far you‚Äôve come, keep you humble, and remind you to be kind to those following in your footsteps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn from my mistakes, then pay it forward.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[Learn to Code Anything in 6 Steps]]></title><description><![CDATA[Learning to code something new can be a painful process. We inevitably get stuck or frustrated as we stumble through new concepts and ideas‚Ä¶]]></description><link>https://leewarrick.com/blog/how-to-learn-anything/</link><guid isPermaLink="false">https://leewarrick.com/blog/how-to-learn-anything/</guid><pubDate>Sun, 18 Aug 2019 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Learning to code something new can be a painful process. We inevitably get stuck or frustrated as we stumble through new concepts and ideas.&lt;/p&gt;
&lt;p&gt;I‚Äôve learned some hard concepts as a programmer. I‚Äôve started from scratch in a new language as well as struggled through difficult concepts in an area I‚Äôm already comfortable in.&lt;/p&gt;
&lt;p&gt;Working through those challenges has taught me that there‚Äôs a process to learning to program in a different language or ecosystem. There‚Äôs a pattern that emerges.&lt;/p&gt;
&lt;p&gt;It‚Äôs a little like the &lt;a href=&quot;https://psychcentral.com/lib/the-5-stages-of-loss-and-grief/&quot;&gt;five stages of grief&lt;/a&gt;; some people are in different spots or skip steps, but everyone struggles through roughly the same process.&lt;/p&gt;
&lt;h2&gt;1. Exposure to a New Topic&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/2da77f2fee4504f6c268c971c8947f5b/971c4/pain.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo by Aar√≥n Blanco Tejedor of mural of man in pain&quot; title=&quot;Photo by Aar√≥n Blanco Tejedor of mural of man in pain&quot; src=&quot;https://leewarrick.com/blog/static/2da77f2fee4504f6c268c971c8947f5b/a111b/pain.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;When you‚Äôre first introduced to a completely new concept, it can be overwhelming.&lt;/p&gt;
&lt;p&gt;Handlebars templating stopped me dead in my tracks when I was in a code bootcamp.&lt;/p&gt;
&lt;p&gt;My brain hurt. It was difficult to comprehend this concept, and my body was physically telling me to give up. I found it hard to read about, and I didn‚Äôt want to listen in class or do the examples. When it came time to do the homework, I had to force myself to sit down and do it.&lt;/p&gt;
&lt;p&gt;Eventually though, I got the hang of handlebars.&lt;/p&gt;
&lt;p&gt;It took me a long time to realize and find comfort in the fact that this feeling of despair when facing a new, challenging task is temporary. It goes away with time and patience.&lt;/p&gt;
&lt;p&gt;When you find yourself faced with an overwhelming task or topic, think of yourself like a sculptor. A sculptor can‚Äôt produce a large piece in an afternoon with a sledgehammer; she has to chisel away slowly to transform the unforgiving rock into art. Hard topics are boulders we try to sculpt into artful understanding slowly over time.&lt;/p&gt;
&lt;p&gt;You need rest, patience, and persistence to learn what at first feels insurmountable.&lt;/p&gt;
&lt;h2&gt;2. Developing a High-level Understanding&lt;/h2&gt;
&lt;p&gt;Many tutorials and guides zero in on the syntax and finite steps required to accomplish something. This is great if you‚Äôre a veteran and well-versed in the subject matter.&lt;/p&gt;
&lt;p&gt;So as a guitarist I might watch a 10 minute video and walk away with,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;‚ÄúAh, so one major pentatonic scale cannot be applied universally to a chord progression. To sound good I have  to match the scale to the specific chord being played.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I can accomplish that by using CAGED patterns to match  up with the chords in a progression.‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I get it, but I‚Äôve played guitar for about 20 years. If you‚Äôre not a guitarist or not familiar with basic music theory, that tip is gibberish to you.&lt;/p&gt;
&lt;p&gt;Looking back at the handlebars example, I had to come to grips with a lot of foreign concepts.&lt;/p&gt;
&lt;p&gt;I had to understand browsers, http, servers, databases, and client-side vs server-side rendering. I also had to learn what node and npm are, what package managers are, and how to work with modules in node.&lt;/p&gt;
&lt;p&gt;I had to understand all of these things to understand the problem that handlebars was created to solve. Once I understood those things, it was easier to focus on handlebars itself, as opposed to the ecosystem it lives in.&lt;/p&gt;
&lt;p&gt;If you find yourself completely lost on a concept, ask yourself:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚ÄúDo I not understand this because it is complex, or do I not understand this because I don‚Äôt understand the things that surround it?‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are many times I‚Äôve run up against this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PassportJS - I didn‚Äôt know how auth worked, how sessions worked, or how/what OAuth was, so passport was wizardry.&lt;/li&gt;
&lt;li&gt;Docker - I didn‚Äôt know what a virtual machine was or why it was useful, therefore didn‚Äôt understand containers.&lt;/li&gt;
&lt;li&gt;AWS - I didn‚Äôt understand what ‚Äúcloud architecture‚Äù was, so I didn‚Äôt understand what it meant to deploy code in the cloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seeking out high-level explanations for those topics and understanding them first was key to allowing me to learn how to use those tools.&lt;/p&gt;
&lt;h2&gt;3. Learning the Workflow&lt;/h2&gt;
&lt;p&gt;With a new coding skill usually comes a new workflow.&lt;/p&gt;
&lt;p&gt;You‚Äôre going to have to spend time figuring out how to edit and run your code, how to use other people‚Äôs code, and what tooling fits your use case.&lt;/p&gt;
&lt;p&gt;This is often a &lt;strong&gt;boring&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;miserable&lt;/em&gt;&lt;/strong&gt; task.&lt;/p&gt;
&lt;p&gt;To give an example, I‚Äôve recently been learning Python. I immediately had questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Which version should I install, 2 or 3?&lt;/li&gt;
&lt;li&gt;Can I edit and run Python with VSCode?&lt;/li&gt;
&lt;li&gt;What the heck is a REPL?&lt;/li&gt;
&lt;li&gt;How do I manage dependencies? Why do they install globally instead of locally by default?&lt;/li&gt;
&lt;li&gt;What are virtual environments?&lt;/li&gt;
&lt;li&gt;What is a Jupyter Notebook?&lt;/li&gt;
&lt;li&gt;How do I run a Jupyter notebook file? &lt;em&gt;‚Ä¶Oh, hmmm. It comes with Anaconda&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;What is anaconda?&lt;/li&gt;
&lt;li&gt;Ananconda COMES with a Python installation!? üò´&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then I had to go back to step 2 and work through most of the same questions with conda ü§¶‚Äç&lt;/p&gt;
&lt;p&gt;A lot tutorial makers and authors skip these crucial tidbits. Whether this is because they don‚Äôt think their audience needs to be told the basics, or because they want to skip to the üî• &lt;strong&gt;hot tips&lt;/strong&gt; üî•, I couldn‚Äôt say.&lt;/p&gt;
&lt;p&gt;What I &lt;em&gt;can&lt;/em&gt; say is that if you don‚Äôt need the handholding, it‚Äôs easy to skim further or skip that part of a tutorial. If you &lt;em&gt;do&lt;/em&gt; need that extra instruction and it isn‚Äôt there, you‚Äôre now lost.&lt;/p&gt;
&lt;p&gt;Personally, I really appreciate whenever someone takes the time to build the audience up to a topic and provides some clear, concise steps to follow to get up and running. It‚Äôs a huge time-saver and let‚Äôs me get right into the part I enjoy, which is coding.&lt;/p&gt;
&lt;p&gt;So do your research and try to stay motivated while you‚Äôre working though this part. It‚Äôs easy to say, &lt;em&gt;‚ÄúUgh, forget it, I‚Äôll figure out npm another day‚Äù&lt;/em&gt;, and then give up on learning Node.&lt;/p&gt;
&lt;p&gt;However, once you get past this boring part of the process, you can start to learn the fun parts. ü¶Ñ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you‚Äôre looking for a blog post topic, this is a great start. I &lt;strong&gt;guarantee&lt;/strong&gt; that the workflow knowledge you take for granted is crucial to a novice‚Äôs continued learning out there. You probably know more than you think you do, so share it.&lt;/p&gt;
&lt;h2&gt;4. Defining a Small, Attainable Goal&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/97619f9c4f00665ce37cb17d3dc5c2fb/971c4/lego.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo by Kelly Sikkema of a child building a rocket ship out of legos&quot; title=&quot;Photo by Kelly Sikkema of a child building a rocket ship out of legos&quot; src=&quot;https://leewarrick.com/blog/static/97619f9c4f00665ce37cb17d3dc5c2fb/a111b/lego.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Once you‚Äôve got a good workflow and can actually execute the code you‚Äôre writing, it‚Äôs time to figure out something to build.&lt;/p&gt;
&lt;p&gt;This seems obvious, but it‚Äôs actually a crucial step.&lt;/p&gt;
&lt;p&gt;You need to scope yourself to something achieveable, but also useful and fun to build. Something that will challenge you, but not so much that you give up.&lt;/p&gt;
&lt;p&gt;If you‚Äôre learning web development, you don‚Äôt want to start out trying to build a facebook clone. You‚Äôre going to be sent down so many rabbit holes (servers, databases, react, etc) you‚Äôll never get anything accomplished.&lt;/p&gt;
&lt;p&gt;As a beginner, you probably want to stick to HTML and just build a basic site. If you have a little knowledge, maybe use HTML and CSS to make a site with a nice layout and design. If that‚Äôs too easy, maybe add in some interactivity with JavaScript.&lt;/p&gt;
&lt;p&gt;Again, this seems simple, but can be devilishly challenging if you‚Äôre entering a new area or subject. How do you know what‚Äôs too complex? What‚Äôs actually useful to learn?&lt;/p&gt;
&lt;p&gt;You have to spend some time figuring out what your actual goals are for learning this new skill, then work backwards. What would you like to be able to build? What will you need to learn to build it? How can you practice those things?&lt;/p&gt;
&lt;p&gt;As a guitarist, I started taking lessons as a young adult after about ten years of study. At that point I knew about scales, chords, how to play a song, etc. I knew all the basics.&lt;/p&gt;
&lt;p&gt;I sat down across from my new teacher one night and he asked me, &lt;em&gt;‚ÄúWhat would you like to learn?‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I had no idea. He didn‚Äôt either. How could he teach me?&lt;/p&gt;
&lt;p&gt;Avoiding the creation of clearly-defined goals often leads to a lot of wasted time.&lt;/p&gt;
&lt;h2&gt;5. Putting in the Work&lt;/h2&gt;
&lt;p&gt;Coding is hard. Building useful things out of code is harder. Even veteran programmers struggle:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;20+ yrs dev exp, 8 books w/ 100k+ copies sold, 300k+ hours watched of my videos, 4k+ taught in person‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;And you know what? I still struggle to get my code to work and it‚Äôs still a tedious slog. And my code still confuses me the next day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You‚Äôre not alone in these struggles. - &lt;a href=&quot;https://twitter.com/getify/status/972495616600293381&quot;&gt;Kyle Simpson&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Building that first project is going to be tough. You‚Äôre going to hit some snags, discover you need to dive into some new topics, and probably end up on stack overflow more than once.&lt;/p&gt;
&lt;p&gt;But you‚Äôre going to learn a lot of things if you get it done.&lt;/p&gt;
&lt;p&gt;The important thing here is to realize that you need to keep at it, and that if you planned correctly in the previous step, there‚Äôs an end in sight.&lt;/p&gt;
&lt;p&gt;Just remember that finishing that first project and realizing you‚Äôve built something with an entirely new skill, language, or framework is‚Ä¶&lt;/p&gt;
&lt;p&gt;‚ú®üéµüïä&lt;strong&gt;G L O R I O U S&lt;/strong&gt;üïäüéµ‚ú®&lt;/p&gt;
&lt;h2&gt;6. Maintaining Momentum&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/d67696a08dc0564dba337868a19c524a/971c4/hiking.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo by Brian Erickson of running on a mountain pass&quot; title=&quot;Photo by Brian Erickson of running on a mountain pass&quot; src=&quot;https://leewarrick.com/blog/static/d67696a08dc0564dba337868a19c524a/a111b/hiking.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Once you have that first win, it‚Äôs time to get another under your belt.&lt;/p&gt;
&lt;p&gt;üòÆ &lt;em&gt;So soon?&lt;/em&gt;, you say.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yes.&lt;/strong&gt; üòê&lt;/p&gt;
&lt;p&gt;Go back to the previous two steps and start figuring out what you can build next that will get you further toward your goal. (You &lt;em&gt;do&lt;/em&gt; have a goal, right?)&lt;/p&gt;
&lt;p&gt;Figure out how you can expand what you‚Äôve learned and take those new skills into the next project. Build something bigger or completely different that‚Äôs going to teach you a little bit more about how to reach that end goal.&lt;/p&gt;
&lt;p&gt;Then build it. Build more things. &lt;strong&gt;Keep learning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We signed up for this life when we decided to become developers. It‚Äôs the bargain we made for a great job with widely-applicable skills. We accepted that we would be constantly learning and growing, that we would continue to hone our skills in an ever-changing industry.&lt;/p&gt;
&lt;p&gt;The good news is that this process becomes easier. You begin to expect it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚ÄúGosh, this is hard. This hurts my brain‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Becomes: &lt;em&gt;‚ÄúAh, yes. This will take some time to learn.‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚ÄúUgh, where do I start?‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Becomes: &lt;em&gt;‚ÄúHmm, better figure out a workflow.‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;p&gt;I‚Äôve been through these steps myself many times as a developer. You‚Äôll get faster if you keep going.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[How to Debug JavaScript Quickly]]></title><description><![CDATA[If you‚Äôve ever thought, ‚Äúmeh‚Ä¶ I‚Äôm fine with console.log, learning to debug is as painful as rolling in fire ants‚Äù, this article is for you‚Ä¶]]></description><link>https://leewarrick.com/blog/debugging-javascript/</link><guid isPermaLink="false">https://leewarrick.com/blog/debugging-javascript/</guid><pubDate>Mon, 12 Aug 2019 03:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/d8b30a405f9f7076dc088249d765c2bf/96f4b/fireants.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of fire ants&quot; title=&quot;Photo of fire ants&quot; src=&quot;https://leewarrick.com/blog/static/d8b30a405f9f7076dc088249d765c2bf/a111b/fireants.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If you‚Äôve ever thought, &lt;em&gt;‚Äúmeh‚Ä¶ I‚Äôm fine with&lt;/em&gt; &lt;code&gt;console.log&lt;/code&gt;&lt;em&gt;, learning to debug is as painful as rolling in fire ants‚Äù&lt;/em&gt;, this article is for you!&lt;/p&gt;
&lt;h2&gt;Console Confessional&lt;/h2&gt;
&lt;p&gt;Me and &lt;code&gt;console.log&lt;/code&gt; are like this: ü§û. It‚Äôs been my go-to solution for all things weirdJS from the start: &lt;code&gt;this&lt;/code&gt;, de-nesting API call data, &lt;code&gt;async&lt;/code&gt; things, timeouts, etc.&lt;/p&gt;
&lt;p&gt;However, once upon a time, my bootcamp teacher showed us debugging briefly (thank you James), and I thought, *‚ÄúThis is‚Ä¶ &lt;strong&gt;really cool&lt;/strong&gt;‚Äù*.&lt;/p&gt;
&lt;p&gt;You could see &lt;strong&gt;everything&lt;/strong&gt; happening inside your code while it‚Äôs executing‚Äîhow useful!&lt;/p&gt;
&lt;p&gt;Unfortunately I soon got into node-land and then front-end framework valley. I quickly gave up on debugging. (Configure VS Code debugger anyone? Webpack? &lt;em&gt;‚Ä¶No thanks.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;And that was üëå for a while. I‚Äôd hit an issue, fire off a &lt;code&gt;console.log&lt;/code&gt; or three, solve it, and go back through the code to delete them. Sometimes issues would require many more console.logs. Sometimes my boss would giggle when one slipped into a Pull Request; I‚Äôd feel bad, delete/re-push, and go back to &lt;code&gt;console.log&lt;/code&gt;-ing.&lt;/p&gt;
&lt;p&gt;I‚Äôve probably typed &lt;code&gt;console.log&lt;/code&gt; more than any other syntax, word, or punctuation in my time coding JavaScript. I‚Äôve typed it so much I‚Äôve thought about installing an &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log&quot;&gt;extension&lt;/a&gt; to save myself keystrokes.&lt;/p&gt;
&lt;p&gt;There‚Äôs also a ton of useful &lt;code&gt;console.log&lt;/code&gt; tricks out there. I‚Äôve used &lt;code&gt;console.error&lt;/code&gt;, &lt;code&gt;console.warn&lt;/code&gt;, &lt;code&gt;console.table&lt;/code&gt;, destructring, used CSS in logs, and &lt;a href=&quot;https://kylegill.com/blog/2018-11-20-commanding-the-javascript-console/index&quot;&gt;many more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But what happens when that‚Äôs just not enough? What if you‚Äôre tired of typing &lt;em&gt;‚Äúc o n s o l e . l o g‚Äù&lt;/em&gt; everytime you hit a snag?&lt;/p&gt;
&lt;h2&gt;console.gone&lt;/h2&gt;
&lt;p&gt;At work recently, we realized our production code had a memory leak. Our wonderful production code that was compiled and transpiled with webpack, stuffed into a docker container, and running in a linux environment somewhere in AWS land.&lt;/p&gt;
&lt;p&gt;Where was my wonderful &lt;code&gt;console.log&lt;/code&gt; in all that mess?&lt;/p&gt;
&lt;p&gt;Gone, friend. Gone.&lt;/p&gt;
&lt;p&gt;Long story short, we got deep into Chrome‚Äôs performance tooling (a topic for another article?). Through that, &lt;strong&gt;I finally found a quick path to connecting node/webpack and chrome dev tools.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since then I‚Äôve found myself using more &lt;code&gt;debugger&lt;/code&gt; statements in my day-to-day.&lt;/p&gt;
&lt;h2&gt;Basic Debugging with Chrome&lt;/h2&gt;
&lt;p&gt;OK. For anyone that‚Äôs unfamiliar, first we‚Äôre going to start with the basics. How do you actually open the chrome debugger?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, &lt;strong&gt;open dev tools on this site.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press f12, right-click and select ‚Äúinspect‚Äù, press ctrl-shift-i on Windows or cmd-clover-unnatural-hand-movement on Mac‚Ä¶ just get the dev tools open however you normally do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add a&lt;/strong&gt; &lt;code&gt;debugger&lt;/code&gt; &lt;strong&gt;statement to your code&lt;/strong&gt;. (I‚Äôve already done this below)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome will pick up on any debugger statements, pause the code, and open the debugging tools while code is running &lt;strong&gt;if (and only if)&lt;/strong&gt; dev tools are already open.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run the code!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click ‚Üó‚Üò or ‚û° to step through the code line by line&lt;/li&gt;
&lt;li&gt;Click the ‚ñ∂ to resume the script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;function doStuff(thing) {
    thing = thing / 4 * -1
    thing = Math.pow(thing, 1)
    const thing2 = Math.trunc(thing) + 5
    debugger // &amp;lt;-- this makes the magic happen
    return thing2
}

const thingamajig = Math.random()
const result = doStuff(thingamajig)
console.log(&quot;And the result is...&quot; + result)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Pretty cool right? üòéüëç&lt;/h4&gt;
&lt;p&gt;Notice how the debugger prints the values of the code as you step through it. Very very nice! This can save you many many keystrokes if you‚Äôre trying to dig down into an object.&lt;/p&gt;
&lt;p&gt;Why don‚Äôt we check out some more basic debugging examples?&lt;/p&gt;
&lt;h2&gt;Checking out variable values&lt;/h2&gt;
&lt;p&gt;You can hover over variables in the debugger and see their value as you step through the code.&lt;/p&gt;
&lt;p&gt;First let‚Äôs look at some HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;magical&quot;&amp;gt;Boooooring&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let‚Äôs watch some JavaScript spice things up in the html above. Try stepping through to the ‚Äúawesome‚Äù variable, then hovering over it to see all the magical properties and methods a DOM object has attached to it.&lt;/p&gt;
&lt;p&gt;(Don‚Äôt forget to use ‚Üó‚Üò to step through, and ‚ñ∂ when you‚Äôre finished)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;debugger // Let&apos;s watch the magic happen~ ‚ú®üëè
const div = document.getElementById(&apos;magical&apos;)
const awesome = document.createElement(&apos;marquee&apos;)
//I&apos;m I-remember-marquee-tags years old. ü§´
awesome.innerHTML = &apos;&amp;lt;h2&amp;gt;‚ú®üöÄ~MAGICAL~ ü¶Ñüåà&amp;lt;/h2&amp;gt;&apos;
div.textContent = &quot;&quot; //boring no more...
div.appendChild(awesome)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Nested Properties&lt;/h2&gt;
&lt;p&gt;Trying to find a nested property on an object? Debugging can help!&lt;/p&gt;
&lt;p&gt;Let‚Äôs try and get‚Ä¶ oh, let‚Äôs say the level of sweetness on this meatball object below.&lt;/p&gt;
&lt;p&gt;It would take me a &lt;em&gt;lot&lt;/em&gt; of &lt;code&gt;console.log&lt;/code&gt;s to finally drill down to that‚Ä¶ but there‚Äôs a better way!&lt;/p&gt;
&lt;p&gt;Debug, Hover the variable, then expand the properties until you find the key you‚Äôre looking for then &lt;strong&gt;Right-Click&lt;/strong&gt; and select &lt;strong&gt;Copy Property Path&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const meatball = {
    ingredients: {
        spices: [&quot;Oregano&quot;, &quot;Italian&quot;, &quot;Mystery&quot;],
        meats: {
            beef: {
                freeRange: true,
                happy: &quot;yes, until it was time to make meatballs&quot;,
            }
        },
    },
    flavors: [
        {
            umami: {
                level: &quot;???&quot;
            }
        },
        {
            savory: {
                level: 8
            }
        },
        {
            sweet: {
                level: Math.floor(Math.random() * 9)
            }
        },
    ]
}
//look up where we assign the meatball variable
//hover over meatball, and start opening up properties until you get to sweetness
//then right-click on &quot;level&quot; and choose &quot;copy property path&quot;
//paste it after meatball below:
debugger
console.log(&quot;Mama makes a meatball that&apos;s &quot; + /*meatball.&amp;lt;paste here and uncomment&amp;gt;*/ + &quot;/9 in sweetness&quot;)
//don&apos;t forget to erase the debugger when you run it!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Blackboxing üì¶ and React ‚öõ&lt;/h2&gt;
&lt;p&gt;Want to debug React? No problem! You can use the same workflow as above, even when using a framework like React or Vue. Just drop a &lt;strong&gt;debugger&lt;/strong&gt; statement in, &lt;strong&gt;open dev tools&lt;/strong&gt;, and &lt;strong&gt;run&lt;/strong&gt; it!&lt;/p&gt;
&lt;h4&gt;A small catch&lt;/h4&gt;
&lt;p&gt;OK, there‚Äôs one minor note I have to make. We want to debug, &lt;em&gt;our&lt;/em&gt; code, and not React‚Äôs code, right? However, the debugger will step through &lt;strong&gt;all&lt;/strong&gt; of the code that‚Äôs running, not just yours. So you might find yourself in some weird React code as you‚Äôre stepping through your component.&lt;/p&gt;
&lt;p&gt;No sweat! There‚Äôs ways to handle that. Try these tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lost in a weird script? Click ‚¨Ü to ‚ÄúStep out‚Äù of a function and hopefully back up to a recognizeable script.&lt;/li&gt;
&lt;li&gt;Still lost? Look at the &lt;strong&gt;Call Stack&lt;/strong&gt; Panel. The scripts here are the ones you‚Äôre currently stepping through. In some weird script? &lt;strong&gt;Right-click&lt;/strong&gt; and select &lt;strong&gt;‚ÄúBlackbox script‚Äù&lt;/strong&gt; to skip debugging the script you‚Äôre in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try it below!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Counter() {
    const [count, setCount] = React.useState(0)
    function countUp(count) {
        debugger
        const newCount = count + 1
        setCount(newCount)
    }
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;h2&amp;gt;Count is {count}&amp;lt;/h2&amp;gt;
            &amp;lt;button onClick={() =&amp;gt; countUp(count)}&amp;gt;Increment&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;But what about Node?&lt;/h2&gt;
&lt;p&gt;Ah yes‚Ä¶ the eternal question. How does one debug NodeJS?&lt;/p&gt;
&lt;p&gt;You can use &lt;a href=&quot;https://code.visualstudio.com/docs/nodejs/nodejs-debugging&quot;&gt;VS Code&lt;/a&gt;, you can use a neat tool called &lt;a href=&quot;https://github.com/GoogleChromeLabs/ndb&quot;&gt;NDB&lt;/a&gt;, but I say we just use chrome and move on with our lives.&lt;/p&gt;
&lt;p&gt;(Note: I personally always confuse ‚Äúndb‚Äù and ‚Äúnbd‚Äù as in ‚ÄúNo Big Deal‚Äù, instead of ‚Äúnode debugger‚Äù, and it makes me nuts. I &lt;strong&gt;always&lt;/strong&gt; mistype it, I can‚Äôt google it, and so it makes a fool of me everytime I try to use it.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open chrome and type &lt;code&gt;chrome://inspect&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then start your app with the &lt;code&gt;--inspect&lt;/code&gt; flag.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ex: &lt;code&gt;node --inspect server.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You should see something like: &lt;code&gt;Debugger listening on ws://127.0.0.1:9229/dfcsd4c63-123e-234-adsd-123lkdfgk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go back to Chrome, you should see ‚ÄúRemote Target‚Äù and a file name/path to your file, plus a little &lt;code&gt;inspect&lt;/code&gt; link. Click it! This should pop open a separate dev tools window.&lt;/li&gt;
&lt;li&gt;Add some debuggers to your code and go to town!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; You may have to close and re-open chrome‚Äôs debug pane for your app if it doesn‚Äôt detect your debugger statement on the first pass. I‚Äôm also on the latest version of chrome, and you should be too üòâ&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;Debugging isn‚Äôt always my first-line of defense against weird JavaScript, but I use it a lot more often now that I‚Äôve got a decent workflow for it.&lt;/p&gt;
&lt;p&gt;How do you debug code? Hit me up on &lt;a href=&quot;https://twitter.com/leewarrickjr&quot;&gt;twitter&lt;/a&gt; and let me know!&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[The Ultimate Guide to Starting a Tech Podcast]]></title><description><![CDATA[I started the Tech Jr podcast with my co-host Eddie in April of this year. We haven‚Äôt been around for very long, but we‚Äôve had some great‚Ä¶]]></description><link>https://leewarrick.com/blog/all-i-know-about-podcasting/</link><guid isPermaLink="false">https://leewarrick.com/blog/all-i-know-about-podcasting/</guid><pubDate>Sun, 28 Jul 2019 15:30:00 GMT</pubDate><content:encoded>&lt;p&gt;I started the &lt;a href=&quot;https://techjr.dev&quot;&gt;Tech Jr&lt;/a&gt; podcast with my co-host Eddie in April of this year. We haven‚Äôt been around for very long, but we‚Äôve had some great success reaching developers in our community and beyond with helpful advice and knowledge.&lt;/p&gt;
&lt;p&gt;I‚Äôve been asked a few times about how to get started with a podcast, what our workflow is, what equipment we use, and generally how we do things for our show. I‚Äôve also asked a lot of those questions myself and done a lot of research along the way to launching Tech Jr, so I figured it was time to boil that down into a blog post.&lt;/p&gt;
&lt;p&gt;I‚Äôm going to unload everything I‚Äôve learned about making a podcast, so buckle up.&lt;/p&gt;
&lt;p&gt;Before we start, a hot-take üî•:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I run into an old friend, and I have no idea what they‚Äôve been up to, I just say, ‚ÄúI love your podcast.‚Äù Haven‚Äôt been wrong yet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;‚Äî &lt;a href=&quot;https://twitter.com/fimoculous/status/1138182748735246337&quot;&gt;@fimoculous&lt;/a&gt; June 10, 2019&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Contents:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#essentials&quot;&gt;Getting Started:&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#option1&quot;&gt;Offload it all&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#option2&quot;&gt;Make your site, offload the rest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#option3&quot;&gt;Do it all yourself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#website&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hosting&quot;&gt;File Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rss&quot;&gt;RSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#analytics&quot;&gt;Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sponsors&quot;&gt;Getting Sponsors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#audio&quot;&gt;Getting Great Audio&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mic&quot;&gt;Picking a Microphone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#software&quot;&gt;Recording and Editing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#voip&quot;&gt;Interviews, Co-hosts, and Voip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zoom&quot;&gt;Zoom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#skype&quot;&gt;Skype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zencastr&quot;&gt;Zencastr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#local&quot;&gt;Local&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#content&quot;&gt;Producing Great Content&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#topic&quot;&gt;Picking a Topic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#audience&quot;&gt;Consider your Audience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#prep&quot;&gt;Episode Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#organizing&quot;&gt;Staying Organized&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#promote&quot;&gt;Promoting the Show&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#social&quot;&gt;Social Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#email&quot;&gt;Newsletter/Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guestspots&quot;&gt;Interviews/Guest Spots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ask&quot;&gt;Ask your Listeners for Help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#reflections&quot;&gt;Reflections&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#hardwork&quot;&gt;It‚Äôs hard work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#patience&quot;&gt;It takes time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#persevere&quot;&gt;Perseverance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#feedback&quot;&gt;Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#credits&quot;&gt;Parting Words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a name=&quot;essentials&quot;&gt;&lt;/a&gt; The Essentials:&lt;/h1&gt;
&lt;p&gt;There‚Äôs 3 main things you need to have a podcast:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A place to host your audio files&lt;/li&gt;
&lt;li&gt;An RSS feed&lt;/li&gt;
&lt;li&gt;A website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The website is technically optional, but people will expect you to have one. File hosting and RSS, however, are unavoidable and necessary.&lt;/p&gt;
&lt;h4&gt;A note about the RSS feed:&lt;/h4&gt;
&lt;p&gt;If you want your show to be on itunes, spotify, google play, and beyond, you‚Äôre going to need an RSS feed. RSS is just a bunch of xml tags similar to HTML that contains a list of your episodes and information about them like the  title, description, author, and where the audio file lives.&lt;/p&gt;
&lt;p&gt;Itunes and other aggregators will consume this feed and use it to list your latest episodes on their platforms. Some will download your episode and host it themselves, while others will point listeners directly to your hosting solution. More importantly though, &lt;em&gt;other&lt;/em&gt; platforms will scrape itunes and re-list your show on &lt;em&gt;their&lt;/em&gt; platform.&lt;/p&gt;
&lt;p&gt;Basically this is all to say that RSS is incredibly important to your show, so do your research before you pick a solution for it.&lt;/p&gt;
&lt;h2&gt;What are my options for RSS, a website, and file hosting?&lt;/h2&gt;
&lt;p&gt;I like to think there‚Äôs 3 ways to tackle this. Which one you choose depends on how much money you want to pay and how much time you have to spend.&lt;/p&gt;
&lt;p&gt;(No judgements from me by the way on whichever you choose. Different strokes and all that.)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;option1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Option 1: Pay the premium üíµ, move on with your life&lt;/h3&gt;
&lt;p&gt;If you‚Äôre just looking to get your show on the air and don‚Äôt care about the technical details, this is for you. There‚Äôs some services out there that will absolutely take care of the whole enchilada for you for a monthly fee and provide an RSS feed, website, and file hosting.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://libsyn.com/&quot;&gt;Libsyn&lt;/a&gt; and &lt;a href=&quot;https://fireside.fm/&quot;&gt;Fireside.fm&lt;/a&gt; are two common solutions in this space.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;option2&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Option 2: build the site yourself, pay for hosting.&lt;/h3&gt;
&lt;p&gt;You can absolutely build your own site and use a service to handle RSS and hosting. &lt;a href=&quot;https://syntax.fm&quot;&gt;Syntax.fm&lt;/a&gt; has a &lt;a href=&quot;https://nextjs.org/&quot;&gt;Nextjs&lt;/a&gt; site and uses libsyn for RSS/hosting for example.&lt;/p&gt;
&lt;p&gt;There‚Äôs also &lt;a href=&quot;https://anchor.fm&quot;&gt;anchor.fm&lt;/a&gt; that will handle hosting and provide some other goodies for you.&lt;/p&gt;
&lt;p&gt;This is great if you want a beautiful, custom site but don‚Äôt care about diving deep into RSS and file hosting.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;option3&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Option 3: DIY to the max; YOLO baby. üòé&lt;/h3&gt;
&lt;p&gt;Then there‚Äôs me. I‚Äôm so cheap I‚Äôve been driving the same ‚Äò98 civic coupe since college. It turned 21 this year. We‚Äôve almost hit 200,000 miles together and I‚Äôve saved many thousands of dollars on car payments. Me and that car are like ü§û.&lt;/p&gt;
&lt;p&gt;However, my beautiful, wonderful wife &lt;strong&gt;&lt;em&gt;hates&lt;/em&gt;&lt;/strong&gt; that car. It‚Äôs tiny and she‚Äôs claustrophobic. The interior is disintegrating to plastic chemical dust in the Florida heat. It has no A/C. Also, the windshield wiper motor no longer obeys the off switch, so when it rains I have to reach under the dash and jiggle the fuse to enable/disable the wipers.&lt;/p&gt;
&lt;p&gt;Basically, I‚Äôm willing to suffer a little to save a buck. ü§∑‚Äç&lt;/p&gt;
&lt;p&gt;I &lt;strong&gt;host my own audio&lt;/strong&gt;, &lt;strong&gt;built my own site&lt;/strong&gt;, and &lt;strong&gt;create my own RSS feed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It was a lot of work, but it saves me üí∏üí∏üí∏.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;website&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;DIY Website: Netlify + Gridsome + Markdown&lt;/h4&gt;
&lt;p&gt;I‚Äôm a front-end developer, so of course I made my own site. I used &lt;a href=&quot;https://gridsome.org&quot;&gt;Gridsome&lt;/a&gt; to build a static site with markdown files for each episode.&lt;/p&gt;
&lt;p&gt;I host my site for &lt;strong&gt;free&lt;/strong&gt; with &lt;a href=&quot;https://netlify.com&quot;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the money saved on monthly website hosting, I splurged the extra two bucks on buying the domain through Netlify as well for free and easy SSL certs (https is important for RSS).&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;hosting&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;DIY File Hosting: Amazon S3&lt;/h4&gt;
&lt;p&gt;Amazon S3 is about the easiest thing you can do with AWS as a non-DevOps expert. This is as simple as creating a bucket for your show and setting it to be publically accessible. When you upload a file, S3 gives you a URL to access it at.&lt;/p&gt;
&lt;p&gt;AWS is great because cloud hosting means your files are being hosted by Amazon, and they‚Äôre unlikely to experience an outage. It also means you‚Äôre paying for usage, and not a flat monthly fee. I had something like 1800 requests last month to my audio files, and paid a whopping $2.58.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;rss&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;DIY RSS: Gridsome plugins / npm&lt;/h4&gt;
&lt;p&gt;Hmm, what about that pesky RSS feed?&lt;/p&gt;
&lt;p&gt;I used a &lt;a href=&quot;https://gridsome.org/plugins/gridsome-plugin-rss&quot;&gt;plugin&lt;/a&gt; for Gridsome that itself uses an &lt;a href=&quot;https://www.npmjs.com/package/rss&quot;&gt;npm package&lt;/a&gt; for generating the XML for the RSS feed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you‚Äôre not into Vue/Gridsome, &lt;a href=&quot;https://gatsby.org&quot;&gt;Gatsby&lt;/a&gt; (uses React) has a similar &lt;a href=&quot;https://www.gatsbyjs.org/docs/adding-an-rss-feed/&quot;&gt;plugin&lt;/a&gt; to get you going. (I built my &lt;a href=&quot;https://leewarrick.com/blog&quot;&gt;blog&lt;/a&gt; with Gatsby and use the RSS plugin to publish to &lt;a href=&quot;https://dev.to/leewarrickjr&quot;&gt;Dev.to&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;With Gridsome, my episode pages are generated from markdown, and at the top of those markdown files is some meta-information you can set using something called &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot;&gt;frontmatter&lt;/a&gt;. This is where I include stuff like my description, file size, file location, episode length, tags, etc. The RSS plugin reads this during the build step and then runs a function to create the XML tags based on this info.&lt;/p&gt;
&lt;p&gt;Itunes is picky about RSS, but you can read about what tags you need &lt;a href=&quot;https://www.feedforall.com/itune-tutorial-tags.htm&quot;&gt;here&lt;/a&gt;, and they have a handy validator which will tell you if your feed is valid when you go to &lt;a href=&quot;https://itunesconnect.apple.com/login?module=PodcastsConnect&quot;&gt;submit it&lt;/a&gt;. Spotify and google will also validate your RSS before you submit, but generally follow the same rules as itunes.&lt;/p&gt;
&lt;p&gt;If you want to check your RSS beforehand, there‚Äôs a number of &lt;a href=&quot;https://castfeedvalidator.com/&quot;&gt;helpful&lt;/a&gt; &lt;a href=&quot;https://podba.se/validate/&quot;&gt;sites&lt;/a&gt; for that.&lt;/p&gt;
&lt;p&gt;If you want to see a working example, &lt;a href=&quot;https://techjr.dev&quot;&gt;Tech Jr&lt;/a&gt;‚Äôs repo is public and you can see it on &lt;a href=&quot;https://github.com/mynar7/techjr&quot;&gt;Github&lt;/a&gt;. Check out the &lt;code&gt;gridsome.plugin.js&lt;/code&gt; file for RSS goodness.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;analytics&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Analytics&lt;/h3&gt;
&lt;p&gt;If you pay for file hosting through a service like libsyn or anchor, they will usually provide all your analytics in a neat little package with a bow on top.&lt;/p&gt;
&lt;p&gt;If you went my route and host your own files, you‚Äôre not totally lost, however.&lt;/p&gt;
&lt;p&gt;AWS offers analytics if you know where to look, and you‚Äôll at least get some usage statistics attached to your monthly bill (that‚Äôs how they charge, after all).&lt;/p&gt;
&lt;p&gt;Also, iTunes, Google, and Spotify will all give you analytics through their respective creator dashboards. (How did you think libsyn gets those numbers?)&lt;/p&gt;
&lt;p&gt;Lastly, there‚Äôs sites like &lt;a href=&quot;https://chartable.com&quot;&gt;chartable&lt;/a&gt; that will aggregate data from those disparate dashboards into something easier to parse. They even offer a free service to proxy your file downloads through their servers to accurately provide download counts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While having analytics &lt;em&gt;might&lt;/em&gt; help with getting sponsors for your show, I‚Äôd argue it‚Äôs not really very important in the grand scheme of things. They can be fun to look at, but also something to obsess over or feel bad about if they‚Äôre not flattering. Their best use is in determining what your audience likes so you can tailor your content accordingly.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Sponsors&lt;/h3&gt;
&lt;p&gt;This is the dream right? Get paid to make your show!&lt;/p&gt;
&lt;p&gt;Sponsors could potentially offer you money for ad-spots on the show, sometimes on a cost per mille (CPM) basis. This means a certain amount per thousand listeners per ad-spot.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Wait, per &lt;strong&gt;&lt;em&gt;thousand&lt;/em&gt;&lt;/strong&gt; listeners?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yes. The reality is that you‚Äôre probably not going to be worrying about sponsors at first, and you may never get sponsored.&lt;/p&gt;
&lt;p&gt;Listen, &lt;em&gt;I like&lt;/em&gt; money, &lt;em&gt;you like&lt;/em&gt; money, and we all gotta eat. But for our show, until it happens, sponsorship cash is a daydream.&lt;/p&gt;
&lt;p&gt;It‚Äôs far from free money, by the way. Making ad spots and negotiating with sponsors is also added workload for you, the content creator. And of course, your fans may not appreciate having to listen to ad spots.&lt;/p&gt;
&lt;p&gt;At the end of the day, I make Tech Jr &lt;strong&gt;because I want to&lt;/strong&gt; and it‚Äôs important to me. Helping junior devs is a passion, not a business goal. Hey, if I make a buck along the way, great. If I don‚Äôt, no sweat. I‚Äôm not going to place all my eggs in that basket.&lt;/p&gt;
&lt;p&gt;Honestly, podcasting is a great way to telegraph your passion for your niche and establish yourself as an expert in your space. It is impressive on a portfolio or resume, and you end up building a rapport with a lot of great people through interviews. So while there‚Äôs not necessarily cash benefits to podcasting, there‚Äôs other value.&lt;/p&gt;
&lt;p&gt;That being said, &lt;a href=&quot;https://counterweightcreative.co/ultimate-guide-why-podcast-sponsorships-waste-your-time/&quot;&gt;there are other ways&lt;/a&gt; to monetize your show. You can set up a paypal page for donations (&lt;a href=&quot;https://paypal.me/leewarrick&quot;&gt;Buy me a coffee?&lt;/a&gt;), start a patreon, or be your own advertiser for a service or product you sell (swag anyone?).&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;audio&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Making the Audio Files&lt;/h2&gt;
&lt;p&gt;Audio quality is incredibly important for your show. You‚Äôve got a few seconds to hook listeners, and if they hear bad audio, you‚Äôve probably lost them. Nobody wants to hear to background noise, dead air, or people talking through the microphone equivalent of a potato ü•î (I‚Äôm looking at you, built-in laptop mic podcasters).&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;mic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Choosing a Microphone&lt;/h3&gt;
&lt;p&gt;It‚Äôs easiest to handle audio quality upfront as you record as opposed to afterward in post-production. Using an external microphone will help immensely.&lt;/p&gt;
&lt;p&gt;This could be its own blog post, but basically there‚Äôs two main categories of microphones that you‚Äôll likely be looking at: &lt;strong&gt;dynamic&lt;/strong&gt; and &lt;strong&gt;condenser&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here‚Äôs the short version: A &lt;strong&gt;condenser&lt;/strong&gt; (Blue yeti, for example) is going to sound very natural, but also pick up &lt;strong&gt;A LOT&lt;/strong&gt; of &lt;strong&gt;background noise&lt;/strong&gt;. A &lt;strong&gt;dynamic&lt;/strong&gt; mic on the other hand (think AM radio, broadcast, reporters, etc), has an adjusted EQ that makes you sound less natural, but also &lt;strong&gt;eliminates most background noise&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;My recommendation is to get a &lt;strong&gt;dynamic mic&lt;/strong&gt; unless you‚Äôre recording in a studio environment.&lt;/p&gt;
&lt;p&gt;There‚Äôs also a question of using a USB mic or an XLR mic with an external sound card/interface.&lt;/p&gt;
&lt;p&gt;Feel free to splurge on whichever, but I‚Äôve done just fine with a dynamic USB mic.&lt;/p&gt;
&lt;p&gt;As for my personal mic, I spent a long time reading microphone reviews before landing on a &lt;a href=&quot;https://www.amazon.com/Samson-Handheld-Microphone-Recording-Podcasting/dp/B001R747SG/&quot;&gt;Samson Q2U&lt;/a&gt;. (This is almost identical to an &lt;a href=&quot;https://www.amazon.com/Audio-Technica-ATR2100-USB-Cardioid-Dynamic-Microphone/dp/B004QJOZS4&quot;&gt;Audio Technica ATR-2100&lt;/a&gt;, by the way.) As a bonus, it also comes with an XLR port if you ever decide to switch to an interface instead of using USB.&lt;/p&gt;
&lt;p&gt;My co-host Eddie uses a high-end XLR dynamic mic into an external interface. To my ears, we both sound good.&lt;/p&gt;
&lt;h4&gt;Helpful Mic Accessories&lt;/h4&gt;
&lt;p&gt;I‚Äôd recommend a windscreen (foam/fur ball that covers the business end) &lt;strong&gt;or&lt;/strong&gt; pop filter (a screen that deflects air away), and some type of shock mount (some rubber bands that protect from vibrations from your desk/mic stand).&lt;/p&gt;
&lt;p&gt;I also got a cheap boom arm that clamps to my desk to hold the mic in a good spot.&lt;/p&gt;
&lt;p&gt;All that stuff helps minimize background noise and reduce pops/clicks and breathing sounds that are hard to edit out later. These can be had for cheap, costing maybe 20-30 bucks total.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;software&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Audio Recording and Editing&lt;/h3&gt;
&lt;p&gt;Unless you‚Äôre using &lt;a href=&quot;https://anchor.fm&quot;&gt;anchor.fm&lt;/a&gt;, you‚Äôre going to need a way to edit and record your audio.&lt;/p&gt;
&lt;p&gt;Personally, I‚Äôm on Windows, and I use &lt;a href=&quot;https://www.audacityteam.org/&quot;&gt;Audacity&lt;/a&gt; for both. It‚Äôs free, there‚Äôs tons of info/tutorials out there about it, and it works. ü§∑‚Äç&lt;/p&gt;
&lt;p&gt;There‚Äôs also &lt;a href=&quot;https://www.reaper.fm/&quot;&gt;Reaper&lt;/a&gt;, which is &lt;em&gt;not&lt;/em&gt; free, but has a winrar &lt;a href=&quot;https://forlackofabettercomic.tumblr.com/post/26659890193/i-hope-for-all-of-our-sake-that-this-isnt-the&quot;&gt;price model&lt;/a&gt; and is awesome.&lt;/p&gt;
&lt;p&gt;Other options include Garage band and quicktime on mac, as well as a sleu of other paid DAW (digital audio workstation) programs.&lt;/p&gt;
&lt;p&gt;As far as editing goes, applying a smidge of &lt;a href=&quot;https://www.youtube.com/watch?v=RfHA4OPfoi8&quot;&gt;compression&lt;/a&gt; is nice for evening out your volume, but don‚Äôt do too much or you‚Äôll remove all the dynamics from the audio. You‚Äôll &lt;a href=&quot;https://www.youtube.com/watch?v=NP0mQeLWCCo&quot;&gt;Ben Stein&lt;/a&gt; it. (I use this &lt;a href=&quot;https://theaudacitytopodcast.com/chriss-dynamic-compressor-plugin-for-audacity/&quot;&gt;plugin&lt;/a&gt; for audacity.)&lt;/p&gt;
&lt;p&gt;Mainly, you‚Äôll want to silence background noise and cut any dead air (periods of silence) during editing, as well as even out your volume with anyone else‚Äôs.&lt;/p&gt;
&lt;p&gt;Or you can pay someone to edit for you. I know another podcaster that has his own &lt;a href=&quot;https://productivityintech.transistor.fm/&quot;&gt;show&lt;/a&gt; and makes money on the side &lt;a href=&quot;https://productivityintech.com/editing&quot;&gt;editing&lt;/a&gt; for others.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;voip&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Interviews, Co-hosts, and Voip&lt;/h3&gt;
&lt;p&gt;If your podcast is just you monologuing, feel free to move on. For the rest of us with co-hosts/interview-based shows:&lt;/p&gt;
&lt;p&gt;You can either do everything on-site in the same studio/location (a blue yeti might shine here, it has settings for capturing a room), or you‚Äôre in my boat: you have to record over the internet.&lt;/p&gt;
&lt;p&gt;This is a rough spot in podcasting. There‚Äôs not many great free &lt;em&gt;or&lt;/em&gt; paid solutions that can account for internet connection issues and speeds. That being said, here‚Äôs some options:&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;zoom&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Zoom&lt;/h4&gt;
&lt;p&gt;Zoom is free if you‚Äôve only got two people on the call, and most folks seem to like using it. However, it &lt;em&gt;was&lt;/em&gt; recently blasted for having a zero day security exploit, but has since been patched.&lt;/p&gt;
&lt;p&gt;With Zoom, if you‚Äôre on a call with 3 or more people, you‚Äôll have to pay for a premium account to go beyond 45 minutes, or else the call will drop at that time limit.&lt;/p&gt;
&lt;p&gt;The good news is zoom is able to record your calls and automatically gives you separate audio and video files. (Not separate audio tracks though, and if you talk over each other it will sound wonky)&lt;/p&gt;
&lt;p&gt;Also, if you or anyone else on the call has connection issues, you‚Äôll get some funky audio to edit.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;skype&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Skype&lt;/h4&gt;
&lt;p&gt;Most people have used skype at some point or already have it installed. Skype is free and unlimited as far as call length, and will let you record the call (as long as everyone clicks ok when you start recording).&lt;/p&gt;
&lt;p&gt;Unfortunately, skype exports a single video file, so you‚Äôll have to rip the audio off of that (also on a single track).&lt;/p&gt;
&lt;p&gt;Doubly unfortunate is that most people seem to despise skype and have uninstalled and forgotten about it. So they may ask you to please use something else.&lt;/p&gt;
&lt;p&gt;Of course, if you or anyone else on the call has connection issues, you‚Äôll get some funky audio to edit.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;zencastr&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Zencastr&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://zencastr.com/&quot;&gt;Zencastr&lt;/a&gt; is a browser-based voip recording app.&lt;/p&gt;
&lt;p&gt;Here‚Äôs how it works: You set up a session through the website, get a link for all parties to click, and once they do, they‚Äôre taken to the web app as well. Once there, zencastr provides voip and records through the browser, gives you separate tracks, and even uploads them to a google drive folder for you.&lt;/p&gt;
&lt;p&gt;When it works, it‚Äôs fantastic. When it doesn‚Äôt, your episode is toast üçû.&lt;/p&gt;
&lt;p&gt;They claim to have local backups running, but I‚Äôve still gotten shortened tracks due to spotty connections.&lt;/p&gt;
&lt;p&gt;So, if you or anyone else on the call has connection issues, you‚Äôll &lt;em&gt;still&lt;/em&gt; get some funky audio to edit.&lt;/p&gt;
&lt;p&gt;Luckily we‚Äôve had backups going in those situations, but if you have to do backups anyway‚Ä¶&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;local&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Have everyone record locally&lt;/h4&gt;
&lt;p&gt;This is the most reliable solution we‚Äôve found for our show. We ask our guests to record their own audio and send it to us afterward. Then, we use one of the aforementioned methods as the backup in case the guest makes a mistake recording or just forgets to send their audio.&lt;/p&gt;
&lt;p&gt;Most of our guests have a mic and some recording experience, so we‚Äôve had good luck so far. For the others we use zencastr and üôè.&lt;/p&gt;
&lt;p&gt;The takeaway here is to just make sure you have a backup plan so you‚Äôre not recording an episode twice.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;content&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Producing Great Content&lt;/h2&gt;
&lt;p&gt;This seems obvious, but you should spend some time making sure what you‚Äôre saying sounds as good as the audio file it‚Äôs played from.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Pick a Subject you can Talk about at Length&lt;/h3&gt;
&lt;p&gt;If you‚Äôre doing a Tech podcast, you‚Äôll probably always have plenty to talk about. In general though, it‚Äôs good to pick an evergreen subject so you won‚Äôt struggle to come up with episodes.&lt;/p&gt;
&lt;p&gt;If you pick a trendy technology or something with too small of a niche, you may struggle to come up with topics.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;audience&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Consider your Audience&lt;/h3&gt;
&lt;p&gt;Be sure to tailor content to your listeners. For example, Syntax knows they have lots of new developers listening to their show, so they almost always explain the things they talk about in simple terms for their audience.&lt;/p&gt;
&lt;p&gt;In our case, we‚Äôre aiming to help early career developers. We try to do the same and provide simple explanations for technical concepts as well as provide career advice geared toward juniors.&lt;/p&gt;
&lt;p&gt;The point here is to produce content your audience wants to hear, and not just talk about the things you want to talk about.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;prep&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Prepare for your Episodes beforehand&lt;/h3&gt;
&lt;p&gt;I can‚Äôt stress this one enough.&lt;/p&gt;
&lt;p&gt;I write an outline for every episode that we do on our show.&lt;/p&gt;
&lt;p&gt;It‚Äôs usually just bullet points of things I want to touch on or questions I hope to ask, but I‚Äôll also re-order those bullet points to group things logically by topic. This really helps keep the episode focused and on topic.&lt;/p&gt;
&lt;p&gt;An outline also helps eliminate dead air and ‚Äúum‚Äùs or ‚Äúuh‚Äùs when trying to think of what to say next.&lt;/p&gt;
&lt;p&gt;It also helps with interviews. Sometimes your guest may ask for your questions beforehand so they can do their own research and preparation. If you have an outline, you can send that to them prior to the interview.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;organizing&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Staying Organized&lt;/h3&gt;
&lt;p&gt;There‚Äôs a lot to keep track of when podcasting. You‚Äôve got keep running lists of episode ideas, edits to make, show notes, guests to schedule, etc. It helps to have a system.&lt;/p&gt;
&lt;p&gt;I use &lt;a href=&quot;https://trello.com&quot;&gt;trello&lt;/a&gt; for organizing our episodes, ideas, and keeping track of potential guests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://calendly.com&quot;&gt;Calendly&lt;/a&gt; is excellent for allowing guests to schedule a time to be interviewed. I also use google calendar for keeping track of what I need to do and when.&lt;/p&gt;
&lt;p&gt;Another tip is to send an email to any potential guests to prepare them for the interview. You can make a draft/template in gmail that covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What you will use to record or what they will need to do to record&lt;/li&gt;
&lt;li&gt;A request to please have a decent quality mic ready&lt;/li&gt;
&lt;li&gt;A reminder to try and find a quiet environment with a good internet connection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you land an interviewee, make a copy of the draft, tailor it for your guest and send it. You‚Äôll save time not having to repeat the same conversation with each guest.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;promote&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Promoting the Show&lt;/h2&gt;
&lt;p&gt;I didn‚Äôt realize I would have to promote my own show when I started.&lt;/p&gt;
&lt;p&gt;There‚Äôs something incredibly off-putting about trying to pitch and sell your own content to the world, but if you don‚Äôt get listeners, what‚Äôs the point?&lt;/p&gt;
&lt;p&gt;You might be thinking, &lt;em&gt;‚ÄúWell, people can subscribe on iTunes and Spotify, and I have an RSS feed, so what else is there to do?‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There‚Äôs a lot of podcasts out there, and while I wouldn‚Äôt say you‚Äôre &lt;em&gt;competing&lt;/em&gt; for listeners, your discoverability on those platforms is, well, limited. So it helps to drive listeners to your show through other means.&lt;/p&gt;
&lt;p&gt;I am not an expert at this, but I‚Äôll share what I know regardless.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;social&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Social Media&lt;/h3&gt;
&lt;p&gt;Find out where your audience is, and then go there and &lt;strong&gt;participate in that community&lt;/strong&gt;. When you release a new episode, share it.&lt;/p&gt;
&lt;p&gt;The emphasis is because it‚Äôs much easier to convert any existing followers you have than to build an audience from scratch. Also, simply opening a chat channel and dropping a link is unlikely to net you many listeners and may get you banned.&lt;/p&gt;
&lt;p&gt;For Tech, Twitter is huge. Other shows have told me they promote in Facebook groups. I personally post new episodes in slack groups that I am active in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; When you‚Äôre sharing, it also helps if you send out a preview snippet a few days before the episode to build excitement. You can upload a clip to &lt;a href=&quot;https://soundcloud.com&quot;&gt;soundcloud&lt;/a&gt; for free and use that in your tweets. The great thing about this is that soundcloud links are playable in a &lt;a href=&quot;https://twitter.com/TechJrPodcast/status/1148408788661260288&quot;&gt;tweet&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;seo&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;SEO&lt;/h3&gt;
&lt;p&gt;Your website should have proper &lt;a href=&quot;https://jsonld.com/&quot;&gt;schema&lt;/a&gt; and &lt;a href=&quot;https://css-tricks.com/essential-meta-tags-social-media/&quot;&gt;metatags&lt;/a&gt; so it‚Äôs &lt;a href=&quot;https://search.google.com/structured-data/testing-tool/u/0/&quot;&gt;searchable&lt;/a&gt; and &lt;a href=&quot;https://cards-dev.twitter.com/validator&quot;&gt;shareable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It also helps to have transcripts &lt;a href=&quot;https://ladybug.dev/episode/web-technologies-were-excited-about/&quot;&gt;(Ladybug Devs example)&lt;/a&gt;, show notes &lt;a href=&quot;https://techjr.dev/episodes/2019/travis-neilson-talks-ux-ui-and-the-design-process&quot;&gt;(Tech Jr Example)&lt;/a&gt;, or both to help search engines crawl your site (they can‚Äôt crawl audio) and hopefully point users your way when they‚Äôre searching.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Transcripts are also a thing you really &lt;em&gt;should&lt;/em&gt; do so that hearing-impaired folks can get access to your content. There‚Äôs &lt;a href=&quot;https://trint.com&quot;&gt;ai-powered&lt;/a&gt; &lt;a href=&quot;https://otter.ai/&quot;&gt;services&lt;/a&gt; that can help, or you can hire someone.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;email&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Email and Newsletters&lt;/h3&gt;
&lt;p&gt;I‚Äôve noticed a lot of shows have newsletters, so we started our own as well. (Please &lt;a href=&quot;https://tinyletter.com/leewarrick&quot;&gt;subscribe&lt;/a&gt;!) We use &lt;a href=&quot;https://tinyletter.com&quot;&gt;tinyletter&lt;/a&gt; which is free up to 1,000 subscribers.&lt;/p&gt;
&lt;p&gt;I don‚Äôt have a lot to say about the efficacy of email marketing, but I know that RSS is a &lt;strong&gt;passive&lt;/strong&gt; means of notifying your listeners of new episodes, while sending an email with a link is a much more &lt;strong&gt;active&lt;/strong&gt; way of engaging your audience.&lt;/p&gt;
&lt;p&gt;I personally try to also include other useful things aside from our latest show in emails. This could be other shows we‚Äôve had guest spots on or have hosts we‚Äôve interviewed, articles I‚Äôve read that are useful, funny tweets, etc.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;guestspots&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Guest Spots and Interviews&lt;/h3&gt;
&lt;p&gt;Cross-promotion is a valuable tactic in your arsenal. Other show hosts will likely be practiced guests and can provide some excellent content. We love interviewing and being guests on other shows!&lt;/p&gt;
&lt;p&gt;When we interview someone, we add links to that person‚Äôs podcast, blog, YouTube channel, etc. This helps our fans discover other great material and also helps promote our guests‚Äôs content. When you‚Äôre a guest on someone else‚Äôs show, you‚Äôll likely get the same treatment!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You might think that netting the biggest fish you can to interview would be your best bet to bootstrap to stardom.&lt;/p&gt;
&lt;p&gt;I‚Äôm sad to say this isn‚Äôt always the case.&lt;/p&gt;
&lt;p&gt;Successful folks are &lt;em&gt;incredibly&lt;/em&gt; busy, and don‚Äôt always remember to promote their own episodes.&lt;/p&gt;
&lt;p&gt;I don‚Äôt blame them though! I‚Äôm incredibly thankful to our more famous guests for even finding the time to let us interview them.&lt;/p&gt;
&lt;p&gt;What I &lt;em&gt;will&lt;/em&gt; say though, is that our lesser known guests &lt;strong&gt;almost always&lt;/strong&gt; promote our show, sometimes even beyond the episode they were on.&lt;/p&gt;
&lt;p&gt;So interview the little people! They have great stories to tell and your listeners may appreciate being able to relate to guests with less star-power.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ask&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Ask your Listeners to Help&lt;/h3&gt;
&lt;p&gt;This is another thing I feel weird doing, but I try to ask my listeners to spread the word before and after the show. Something like, &lt;em&gt;‚ÄúIf you want to support the show, like, subscribe and leave us a review‚Äù.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If it feels weird to ask for your audience to help promote‚Ä¶ get over yourself and do it anyway üôÉ. It‚Äôs fairly standard practice, and if your listeners made it to the end of an episode, then chances are they enjoyed it enough to help you out and by leaving a review.&lt;/p&gt;
&lt;p&gt;I also occasionally throw out some tweets asking for listeners to spread the word by saying something nice about us.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/pulse/its-nagging-repetition-effective-communication-marton-jojarth/&quot;&gt;Repetition&lt;/a&gt; is key here. So be consistent in asking for reviews, subscribes, etc.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;reflections&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reflections&lt;/h2&gt;
&lt;p&gt;To wrap up, I‚Äôd like to add a few personal thoughts and lessons I‚Äôve learned.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;hardwork&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;It‚Äôs hard work&lt;/h3&gt;
&lt;p&gt;You might have thought podcasting was a simple thing to get into before reading this post.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚ÄúI‚Äôll just record some stuff and put it out there!‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hopefully you realize by now that there‚Äôs a lot that goes into making the podcasts that you love to listen to. Even shows that aren‚Äôt your favorite took a lot of effort to produce and create.&lt;/p&gt;
&lt;p&gt;I‚Äôm really awed by some of the amazing shows out there. After creating Tech Jr, I‚Äôve come to admire all the time and effort podcasters put into their work.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;patience&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;It takes patience&lt;/h3&gt;
&lt;p&gt;I‚Äôve seen shows pop up and instantly become sensations. They get thousands of listeners and sponsor offers overnight, etc.&lt;/p&gt;
&lt;p&gt;The thing is, those shows &lt;em&gt;already had an audience&lt;/em&gt; that they brought to their new podcast.&lt;/p&gt;
&lt;p&gt;It takes years of effort to build a following and establish a presence with credibility. I struggle with being patient, but I try to remind myself that &lt;em&gt;these things take time&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;persevere&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Prepare for the long game&lt;/h3&gt;
&lt;p&gt;Most shows don‚Äôt make it very far.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&quot;https://blog.pacific-content.com/podcast-success-a-long-game-fd6522b72752&quot;&gt;Dan Misener&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;12% of podcasts have only published a single episode&lt;/li&gt;
&lt;li&gt;6% haven‚Äôt made it past two episodes.&lt;/li&gt;
&lt;li&gt;Half of all podcasts have 14 or fewer episodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The longer you‚Äôre at it and the more episodes you make, the higher your chances of success, so don‚Äôt give up.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;feedback&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Feedback&lt;/h3&gt;
&lt;p&gt;Podcasting feels a little like shouting into the void of space at times. Most people don‚Äôt leave a review or reach out to say whether or not they like the show.&lt;/p&gt;
&lt;p&gt;(To the listeners that &lt;em&gt;do&lt;/em&gt; reach out though, you‚Äôre all Rock Stars üé∏ and we love you.)&lt;/p&gt;
&lt;p&gt;We put out about 6 episodes for Tech Jr to little fanfare. It wasn‚Äôt until I hosted our monthly meetup that I even realized we had listeners.&lt;/p&gt;
&lt;p&gt;A few people approached me after the event to shake my hand and tell me how much the show means to them.&lt;/p&gt;
&lt;p&gt;It‚Äôs a really great feeling to get that feedback, so if you enjoy a podcast, leave them a review, tweet about them, or email them something nice to let them know you appreciate the hard work.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;credits&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Parting Words&lt;/h2&gt;
&lt;p&gt;If reading this post discouraged you from podcasting, that wasn‚Äôt my intention.&lt;/p&gt;
&lt;p&gt;If you‚Äôre passionate about it, do it! My aim was to help you succeed by covering all the facets of podcasting you might not have thought about. So I hope this post was helpful and informative. I truly enjoy producing content for Tech Jr, and I hope to be able to continue to do so.&lt;/p&gt;
&lt;p&gt;Many thanks to all the other podcasters out there that offer advice and support for our show. And kudos to those podcasters out there that continue to deliver great content.&lt;/p&gt;
&lt;p&gt;And of course, thank you, reader, for making it through this lengthy post. üëèüòé‚ú®&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[7 Bad Habits of a Successful Developer]]></title><description><![CDATA[Welcome to my blog!I‚Äôm a front-end developer, meetup organizer, podcast host, and I get paid for some of those things.Before we start, I‚Äôm‚Ä¶]]></description><link>https://leewarrick.com/blog/bad-habits-successful-dev/</link><guid isPermaLink="false">https://leewarrick.com/blog/bad-habits-successful-dev/</guid><pubDate>Fri, 12 Jul 2019 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Welcome to my blog!&lt;/p&gt;
&lt;p&gt;I‚Äôm a front-end &lt;a href=&quot;https://www.linkedin.com/in/lee-warrick&quot;&gt;developer&lt;/a&gt;, meetup &lt;a href=&quot;https://meetup.com/project-code-experience&quot;&gt;organizer&lt;/a&gt;, &lt;a href=&quot;https://techjr.dev&quot;&gt;podcast&lt;/a&gt; host, and I get paid for some of those things.&lt;/p&gt;
&lt;p&gt;Before we start, I‚Äôm not saying you have to be or do all those things to be successful. Making software is really my only metric for being successful as a developer. If you code and make things, that‚Äôs what matters at the end of the day. Everything else is a bonus in my book.&lt;/p&gt;
&lt;p&gt;That being said, I‚Äôd like to talk about some things that I could do better.&lt;/p&gt;
&lt;p&gt;These are my bad habits.&lt;/p&gt;
&lt;h2&gt;1. Eating at my Desk&lt;/h2&gt;
&lt;p&gt;At my first job as a developer, I was part of a new, young team that would take a group walk everyday at lunchtime. We‚Äôd hop up from our desks, leave our work behind, and go stretch our legs for about a half hour. We‚Äôd discuss some work things, some non-work things, but most importantly we were taking a break and getting a little exercise.&lt;/p&gt;
&lt;p&gt;Now, I work on a team that doesn‚Äôt take group walks. They have a habit of going out to eat together, but I bring my lunch and don‚Äôt partake. I also am constantly taking a free second here or there to take care of business for my podcast, meetup, or side projects. Lunchtime is a prime target for getting a few extra things done. So what ends up happening is that most days I end up eating at my desk.&lt;/p&gt;
&lt;p&gt;Don‚Äôt do this. Take a break, get away from the screen, and go walk around outside for a few minutes.&lt;/p&gt;
&lt;h2&gt;2. Going down rabbit holes&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/a321c6d327761b0f5e89e8ca5b4a5da7/96f4b/rabbit.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of a peaceful Rabbit&quot; title=&quot;Photo of a peaceful Rabbit&quot; src=&quot;https://leewarrick.com/blog/static/a321c6d327761b0f5e89e8ca5b4a5da7/a111b/rabbit.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;‚ÄúGoing down a rabbit hole‚Äù is what happens when you run into a problem while writing code and start jumping between researching solutions, without actually accomplishing the task.&lt;/p&gt;
&lt;p&gt;For example, you want to build a feature that lets a user upload and crop an image. You go onto stack overflow and read about uploading files, then look into file upload components in Vue, then in React, even though you‚Äôre working with Vue, then google tells you HTML5 canvas can help so you start looking at codepens‚Ä¶&lt;/p&gt;
&lt;p&gt;Four hours later, you‚Äôve got 8 potential solutions, 10 new side projects, and have learned of 3 new JavaScript frameworks you want to try. You‚Äôve fallen down the rabbit hole.&lt;/p&gt;
&lt;p&gt;It‚Äôs good to explore new technologies, but don‚Äôt lose focus on the task at hand. Sometimes you just need to get the thing done, and any working solution is good enough for now.&lt;/p&gt;
&lt;h2&gt;3. Saying ‚ÄúYes‚Äù way too often&lt;/h2&gt;
&lt;p&gt;Sometimes this is a friend or colleague asking me if I‚Äôm &lt;em&gt;in&lt;/em&gt; on a potential freelance project, trying out some new tech (more on that later), or some other opportunity. Most of the time it‚Äôs saying yes to ideas I pitch to myself.&lt;/p&gt;
&lt;p&gt;There‚Äôs so much development work out there in the wild that needs to be done. You might be thinking, &lt;em&gt;man, I can‚Äôt even get a job&lt;/em&gt;, but I‚Äôm telling you it‚Äôs true. Every business, non-profit, club, etc. needs a website, and there‚Äôs a whole world of problems waiting to be solved by technology. If you keep at this, you‚Äôll see there‚Äôs a deluge of opportunities to code waiting for you.&lt;/p&gt;
&lt;p&gt;The key is knowing what things to say yes to. It feels wrong to say no when opportunity knocks, but sometimes you have to take a hard look at your current workload and availability before committing. Sometimes you need to say no.&lt;/p&gt;
&lt;h2&gt;4. Having too many side projects&lt;/h2&gt;
&lt;p&gt;This plays a little into the previous point. How does the saying go?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚ÄúThe man that chases two rabbits catches none‚Äù&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;I have personal projects, talks I want to do, meetups to plan, podcasts to record, and now a blog to write. That‚Äôs just in the realm of development. It‚Äôs hard to focus on 10 things at the same time and actually accomplish something.&lt;/p&gt;
&lt;p&gt;We live in a world that glorifies multitasking and an industry that worships work. Don‚Äôt feel like you have to do all the things. It‚Äôs OK to focus on one thing at a time.&lt;/p&gt;
&lt;h2&gt;5. Spending all my free time on Coding&lt;/h2&gt;
&lt;p&gt;I think a trend is emerging.&lt;/p&gt;
&lt;p&gt;I‚Äôm a procrastinator and a little lazy by nature, yet somehow I find myself at my desk coding, researching, and planning non-stop. It‚Äôs an insidious habit that crept in on me without notice.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;‚ÄúFind a job you love and you‚Äôll never work a day in your life.‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The inverse of this is you‚Äôll never &lt;em&gt;stop&lt;/em&gt; working if you let yourself go unchecked. I have to force myself sometimes to get away from my desk and go out outside, read a book, or just do something non-productive for a while.&lt;/p&gt;
&lt;h2&gt;6. Not using productivity tools&lt;/h2&gt;
&lt;p&gt;There‚Äôs a world of apps out there to help a person take notes, schedule reminders, and plan projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;USE THOSE TOOLS!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can‚Äôt tell you how many forgotten things I could have remembered had I just written it down, planned it, recorded it, set a reminder, or just done anything aside from take a mental note.&lt;/p&gt;
&lt;p&gt;Mental notes are the enemy. Don‚Äôt take mental notes. We work in a field that demands attention and focus. I guarantee the first thing your brain will do to that important mental note is discard it as soon as you start coding.&lt;/p&gt;
&lt;h5&gt;Side Note:&lt;/h5&gt;
&lt;p&gt;Don‚Äôt go down a rabbit hole of making your own productivity tool. I mean it‚Äôs good to code and learn, but sometimes it‚Äôs better to just use an existing app and call it a day. I‚Äôm &lt;a href=&quot;https://leewarrick.com/goaler&quot;&gt;guilty&lt;/a&gt; of this.&lt;/p&gt;
&lt;h2&gt;7. Learning too many things&lt;/h2&gt;
&lt;p&gt;There are about forty kajillion &lt;a href=&quot;https://github.com/kamranahmedse/developer-roadmap&quot;&gt;things&lt;/a&gt; to learn in software, and I want to learn them &lt;strong&gt;all&lt;/strong&gt;. I‚Äôm curious, I‚Äôm motivated, and I need to know exactly how everything I touch works under the hood.&lt;/p&gt;
&lt;p&gt;The problem is mortality. We have a finite amount of time on Earth, and even if we spent all of it learning to code we still wouldn‚Äôt know all the things.&lt;/p&gt;
&lt;p&gt;I‚Äôm calling it: &lt;strong&gt;You can‚Äôt learn it all.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wish to one day have the wisdom to know the things I should focus on and ignore the rest or look them up as I need them.&lt;/p&gt;
&lt;h2&gt;Parting words&lt;/h2&gt;
&lt;p&gt;Remember that you can‚Äôt do everything and that you‚Äôre a mere mortal. Be kind to yourself and guard against burnout. Lastly, take time now and then to remember how far you‚Äôve come and be proud of that accomplishment.&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item></channel></rss>