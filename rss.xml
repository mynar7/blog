<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Strings and Things]]></title><description><![CDATA[A blog that's mostly about code. I talk about front-end web development, give career advice, and sometimes ruminate on life lessons learned with connections to code]]></description><link>https://leewarrick.com/blog</link><generator>RSS for Node</generator><lastBuildDate>Fri, 06 Sep 2019 14:54:27 GMT</lastBuildDate><item><title><![CDATA[React's useEffect and useRef Explained for Mortals]]></title><description><![CDATA[If the React docs leave you in the dust, or Dan Abramov’s blog makes you feel like you’re reading a scroll handed down from Mt Olympus…]]></description><link>https://leewarrick.com/blog/react-use-effect-explained/</link><guid isPermaLink="false">https://leewarrick.com/blog/react-use-effect-explained/</guid><pubDate>Fri, 06 Sep 2019 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/fdb92914fc9093dee6a2c20dad8fbd50/c35de/acropolis.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of the Acropolis of Athens, Athens, Greece by Cristina Gottardi&quot; title=&quot;Photo of the Acropolis of Athens, Athens, Greece by Cristina Gottardi&quot; src=&quot;https://leewarrick.com/blog/static/fdb92914fc9093dee6a2c20dad8fbd50/a111b/acropolis.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If the React docs leave you in the dust, or Dan Abramov’s &lt;a href=&quot;https://overreacted.io/a-complete-guide-to-useeffect/&quot;&gt;blog&lt;/a&gt; makes you feel like you’re reading a scroll handed down from Mt Olympus written in ancient Greek, you’re not alone.&lt;/p&gt;
&lt;p&gt;Sometimes the pantheon of React Gods have a hard time translating their wisdom into language the rest of us can understand. It usually goes like this: You hit a snag with React, google your issue, and read a blog or Stack Overflow post with some advice that makes you feel more lost than when you started.&lt;/p&gt;
&lt;p&gt;I’ve certainly fallen victim to this many, many times. Particularly with &lt;code&gt;useEffect&lt;/code&gt;. Before we dive into this particular hook, let me say that I love writing React with hooks and wouldn’t want to go back to classes. That said, &lt;code&gt;useEffect&lt;/code&gt; is a big pain point.&lt;/p&gt;
&lt;h2&gt;What is an “effect” anyway?&lt;/h2&gt;
&lt;p&gt;To really wrap your head around &lt;code&gt;useEffect&lt;/code&gt;, let’s back up a little bit and talk about programming and JavaScript.&lt;/p&gt;
&lt;p&gt;The effects that &lt;code&gt;useEffect&lt;/code&gt; is named for are what we affectionately refer to as “side effects”.&lt;/p&gt;
&lt;p&gt;So what is a side effect? It’s a bit of code that reaches out and …does something else. It’s an abstract concept, so let’s talk in examples.&lt;/p&gt;
&lt;p&gt;Here’s a function with NO side effects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function add(a, b) {
    return a + b
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function &lt;code&gt;add&lt;/code&gt; does nothing except take an input and return an output. It doesn’t reach outside itself to mess with anything else!&lt;/p&gt;
&lt;p&gt;Let’s introduce a side effect.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const resultDiv = document.getElementById(&apos;add-example&apos;)
function add(a, b) {
    const result = a + b
    resultDiv.textContent = `The Result is ${result}`
    return a + b
}
add(3, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;add-example&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now our function reaches outside of itself to update the DOM (short for &lt;a href=&quot;https://www.youtube.com/watch?v=H63dVFDuJDM&quot;&gt;Document Object Model&lt;/a&gt;) and show the result. This additional behavior is a side effect.&lt;/p&gt;
&lt;h2&gt;Side Effects in React&lt;/h2&gt;
&lt;p&gt;So what about React? It’s a library that pretty much only updates the DOM. A view library, if you will. So what would you call a side effect in React?&lt;/p&gt;
&lt;p&gt;Anything outside of updating the page. If you’re not using React to update state or render HTML, that’s a side effect. It’s any non-React thing.&lt;/p&gt;
&lt;p&gt;This means anytime you call an API, use &lt;code&gt;setInterval&lt;/code&gt;/&lt;code&gt;setTimeout&lt;/code&gt;, add a keyboard listener, or really anytime you mess with the &lt;code&gt;window&lt;/code&gt; object you’re introducing side effects.&lt;/p&gt;
&lt;p&gt;Hooks are amazing and let you write really readable, reusable code… except when you’re dealing with side effects. And that’s unfortunate, because when you think about it, most of the fun, interesting stuff we do as web developers revolves around side effects.&lt;/p&gt;
&lt;p&gt;Let’s take a step back from hooks for a minute and look at how we would handle side effects in class-based components.&lt;/p&gt;
&lt;h3&gt;Class-based Components and Side Effects&lt;/h3&gt;
&lt;p&gt;In class-based components, we would use lifecycle methods to perform side effects. For example, on &lt;code&gt;componentDidMount&lt;/code&gt; we would call APIs to get data for render.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Why not call the API in the constructor function?”&lt;/em&gt;, you might ask. Well, because React says stuff we use for render goes in “state” and we can’t mess with state until our component is loaded onto the page. If we try to update state before the component is loaded, we get errors.&lt;/p&gt;
&lt;p&gt;Here’s a typical class-based component hitting the &lt;a href=&quot;https://pokeapi.co/&quot;&gt;PokeAPI&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Pokemon extends React.Component {
    constructor() {
        super()
        this.state = null
    }
    componentDidMount() {
        fetch(&apos;https://pokeapi.co/api/v2/pokemon/gengar/&apos;)
        .then(res =&amp;gt; res.json())
        .then(res =&amp;gt; {
            this.setState(res)
        })
    }
    render() {
        const pokemon = this.state
        const style = {textTransform: &apos;capitalize&apos;}
        return (
            &amp;lt;div&amp;gt;
            { pokemon
                ? &amp;lt;&amp;gt;
                    &amp;lt;img src={pokemon.sprites.front_default}
                        alt={&apos;Image of &apos; + pokemon.name}/&amp;gt;
                    &amp;lt;p style={style}&amp;gt;Name: {pokemon.name}&amp;lt;/p&amp;gt;
                    &amp;lt;p style={style}&amp;gt;
                        Type: {pokemon.types.map(x =&amp;gt; x.type.name).join(&apos;, &apos;)}
                    &amp;lt;/p&amp;gt;
                &amp;lt;/&amp;gt;
                : &apos;Loading...&apos;
            }
            &amp;lt;/div&amp;gt;
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works well, except when it doesn’t. What happens when we want to hit the API again to grab a different pokemon? What if this component is attached to a certain route in our app and the route changes, but the component doesn’t unmount/remount. What if the user goes to a different page and the component unmounts before the API call finishes?&lt;/p&gt;
&lt;p&gt;The answer is to add more lifecycle methods like &lt;code&gt;componentDidUpdate&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt; to perform more API calls and prevent weird unmounting errors. So we add those lifecycle methods in to handle all our edge cases. And by the time we’re done, we realize most of our component consists of lifecycle code.&lt;/p&gt;
&lt;h2&gt;Then Came React Hooks&lt;/h2&gt;
&lt;p&gt;The React team realized that the class API is a little unwieldy and hard to reason about. People were making &lt;a href=&quot;https://levelup.gitconnected.com/componentdidmakesense-react-lifecycle-explanation-393dcb19e459&quot;&gt;lifecycle flowcharts&lt;/a&gt; trying to understand the inner workings of React …it was a mess.&lt;/p&gt;
&lt;p&gt;So at ReactConf in October of 2018, after Sophie Alpert outlined just how bad classes are to use, Dan Ambramov got on stage and introduced hooks (You can watch the video &lt;a href=&quot;https://youtu.be/dpw9EHDh2bM?t=643&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Hooks introduced statefulness in functional components, as well as a new way to handle side effects. Hooks made React code more reusable with less code—a huge win!&lt;/p&gt;
&lt;p&gt;Except for one small quirk. Each render, the whole component/function is re-run.&lt;/p&gt;
&lt;p&gt;Let’s look at an example of a hooks-based component:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function RerenderExample() {
    const [bool, setBool] = React.useState(false)
    const randomNum = Math.random()
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;This number will be different each time you click the button:&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;{randomNum}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={() =&amp;gt; setBool(!bool)}&amp;gt;Trigger a render&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re not even using &lt;code&gt;bool&lt;/code&gt; in our rendered JSX, yet the whole function runs everytime the state changes. &lt;strong&gt;Every render, everything inside the component re-runs: function definitions, variable creation/assignment, etc.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you’re thinking &lt;em&gt;“what if I have to do something computationally expensive inside a component? This can’t be performant…”&lt;/em&gt;, that’s an astute observation. An expensive operation in a functional component &lt;em&gt;wouldn’t&lt;/em&gt; be performant. In fact &lt;code&gt;useCallback&lt;/code&gt; and &lt;code&gt;useMemo&lt;/code&gt; exist as escape hatches for this very problem. Kent C Dodds has a challenging read on those &lt;a href=&quot;https://kentcdodds.com/blog/usememo-and-usecallback&quot;&gt;here&lt;/a&gt;, but to summarize, according to Kent you shouldn’t worry about the re-renders until you see performance impacts.&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;Note&lt;/strong&gt;: If you’re unfamiliar with hooks, bookmark that article and come back to it when you’re ready. Don’t worry about memoization until you have to.)&lt;/p&gt;
&lt;p&gt;Hooks like &lt;code&gt;useState&lt;/code&gt; employ some magic under-the-hood to avoid the re-render problem. That’s great, and it seems simple enough using &lt;code&gt;useState&lt;/code&gt;, but what about when you need to do things outside of setting state?&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;useEffect&lt;/code&gt;. Gone are those pesky lifecycle methods, hooray! However this hook comes with its own weirdness. First let’s check out the syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//accepts two arguments: a function, and dependency array
useEffect(() =&amp;gt; {
    // do stuff
    return () =&amp;gt; {} //function to undo our stuff from above when component unmounts
}, []) //dependency array of things to watch for changes on
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you pass &lt;code&gt;useEffect&lt;/code&gt; a callback function to run that contains your side effects, and then an array of things to watch. If the watched things change, &lt;code&gt;useEffect&lt;/code&gt; will re-run our callback function. If you need to clean up your side effect on unmount, return a function that contains that code.&lt;/p&gt;
&lt;p&gt;Let’s look at our pokemon example with hooks and &lt;code&gt;useEffect&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Pokemon() {
    const [pokemon, setPokemon] = React.useState(null)
    React.useEffect(() =&amp;gt; {
        fetch(&apos;https://pokeapi.co/api/v2/pokemon/gengar/&apos;)
        .then(res =&amp;gt; res.json())
        .then(res =&amp;gt; {
            setPokemon(res)
        })
    }, []) // empty array means nothing to watch, so run once and no more
    const style = {textTransform: &apos;capitalize&apos;}
    return (
        &amp;lt;div&amp;gt;
        { pokemon
            ? &amp;lt;&amp;gt;
                &amp;lt;img src={pokemon.sprites.front_default}
                    alt={&apos;Image of &apos; + pokemon.name}/&amp;gt;
                &amp;lt;p style={style}&amp;gt;Name: {pokemon.name}&amp;lt;/p&amp;gt;
                &amp;lt;p style={style}&amp;gt;
                    Type: {pokemon.types.map(x =&amp;gt; x.type.name).join(&apos;, &apos;)}
                &amp;lt;/p&amp;gt;
            &amp;lt;/&amp;gt;
            : &apos;Loading...&apos;
        }
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re staring at that empty dependency array, you’ve noticed the first &lt;code&gt;useEffect&lt;/code&gt; quirk. By passing an empty array, we’re saying “only ever do this once”. The React pantheon tells us that on rare occasions that’s ok, but most of the time you want something in there. The reason is that usually you want to synchronize with &lt;em&gt;something&lt;/em&gt; in your code, not just perform the effect once. For example, what if our pokemon component depended on a route parameter or props, anything that said, “go get a new pokemon” without mounting/unmounting?&lt;/p&gt;
&lt;p&gt;Let’s say our component depended on a prop &lt;code&gt;pokemonToGet&lt;/code&gt; that was an argument telling it which pokemon to get from the API. Let’s also add a tiny form for testing purposes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Pokemon({pokemonToGet}) {
    const [pokemon, setPokemon] = React.useState(null)
    React.useEffect(() =&amp;gt; {
        fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonToGet}/`)
        .then(res =&amp;gt; res.json())
        .then(res =&amp;gt; {
            setPokemon(res)
        })
    }, [pokemonToGet]) // get a new pokemon with the pokemonToGet prop changes
    const style = {textTransform: &apos;capitalize&apos;}
    return (
        &amp;lt;div&amp;gt;
        { pokemon
            ? &amp;lt;&amp;gt;
                &amp;lt;img src={pokemon.sprites.front_default}
                    alt={&apos;Image of &apos; + pokemon.name}/&amp;gt;
                &amp;lt;p style={style}&amp;gt;Name: {pokemon.name}&amp;lt;/p&amp;gt;
                &amp;lt;p style={style}&amp;gt;
                    Type: {pokemon.types.map(x =&amp;gt; x.type.name).join(&apos;, &apos;)}
                &amp;lt;/p&amp;gt;
            &amp;lt;/&amp;gt;
            : &apos;Loading...&apos;
        }
        &amp;lt;/div&amp;gt;
    )
}
function PokemonForm() {
    const [inputValue, setInputValue] = React.useState(&quot;rowlet&quot;)
    const [pokemonToGet, setPokemonToGet] = React.useState(&quot;gengar&quot;)
    function getPokemon() {
        setPokemonToGet(inputValue.trim().toLowerCase())
        setInputValue(&quot;&quot;)
    }
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;input onChange={(e) =&amp;gt; setInputValue(e.target.value)}
                value={inputValue} type=&quot;text&quot;/&amp;gt;
            &amp;lt;button onClick={getPokemon}&amp;gt;
                Get Pokemon
            &amp;lt;/button&amp;gt;
            &amp;lt;Pokemon pokemonToGet={pokemonToGet} /&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
render(&amp;lt;PokemonForm /&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great, now our component fetches a new pokemon based on our prop changes. With classes we would’ve had to play with &lt;code&gt;componentDidUpdate&lt;/code&gt; and such to achieve a similar effect.&lt;/p&gt;
&lt;p&gt;Ryan Florence has a great &lt;a href=&quot;https://twitter.com/ryanflorence/status/1125041041063665666?lang=en&quot;&gt;tweet&lt;/a&gt; to summarize &lt;code&gt;useEffect&lt;/code&gt;’s usage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The question is not “when does this effect run” the question is “with which state does this effect synchronize with”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;useEffect(fn) // all state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;useEffect(fn, []) // no state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;useEffect(fn, [these, states])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That “all state” case he mentions where you pass in nothing for dependencies is a weird one. I’ve personally never found a use for it. We know that the whole component runs with each render, so I’m wondering if there’s some weird edge case that requires you to use &lt;code&gt;useEffect(fn)&lt;/code&gt; without any dependency array. In any case, most of the time you’re going to be working with this: &lt;code&gt;useEffect(fn, [these, states])&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;UseEffect and Previous State: Where things fall apart&lt;/h2&gt;
&lt;p&gt;The mental model so far for &lt;code&gt;useEffect&lt;/code&gt; seems straight-forward enough: synchronize it with certain state changes of your choosing. The problem is when you need to reference that state in an effect, not just know if it changed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You don’t get access to current state inside of &lt;code&gt;useEffect&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We didn’t see this in our API call example because we’re simply overwriting the previous state.&lt;/p&gt;
&lt;p&gt;Let’s look at a simple example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const [count, setCount] = React.useState(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            setCount(count + 1)
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;The count is: {count}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like we did all the right things (even cleaning up our side effect on unmount) but our counter isn’t incrementing. Is it a &lt;code&gt;this&lt;/code&gt; issue? Do we not have access to the &lt;code&gt;window&lt;/code&gt; object that &lt;code&gt;setInterval&lt;/code&gt; belongs to?&lt;/p&gt;
&lt;p&gt;No and no. If you added a &lt;code&gt;console.log&lt;/code&gt; into that interval, you’d see it tick every second.&lt;/p&gt;
&lt;p&gt;I’ll prove it to you:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const [count, setCount] = React.useState(0)
    const [randomNum, setRandomNum] = React.useState(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            setCount(count + 1)
            setRandomNum(Math.random())
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;The count is: {count}&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;RandomNum is {randomNum}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we get a new random number every second. Our interval code is fine.&lt;/p&gt;
&lt;p&gt;We’re able to set new state, but are unable to access current state.&lt;/p&gt;
&lt;p&gt;This is a ”&lt;strong&gt;stale closure&lt;/strong&gt;”. I won’t get into closures, but just know that because of the implementation of React/hooks, the count variable is always going to be 0 in our interval function. It’s an old reference.&lt;/p&gt;
&lt;p&gt;I’ve fallen into this trap many, many times when writing hooks, believe it or not. I didn’t even know it had a name until I read it in &lt;a href=&quot;https://docs.google.com/presentation/d/1PUvpXMBEDS45rd0wHu6tF3j_8wmGC6cOLtOw2hzU-mw/edit#slide=id.p&quot;&gt;this talk&lt;/a&gt; by Rich Harris, the man behind &lt;a href=&quot;https://svelte.dev/&quot;&gt;Svelte&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apparently, I’m not the only one tripping over stale closures in hooks:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/5a5dbcc6667a5da9eeabc5cbe90a1427/ed46b/staleclosures.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of Tweet by Kent Dodds asking about hooks pitfalls and a snarky response of &amp;quot;stale closures&amp;quot;&quot; title=&quot;Photo of Tweet by Kent Dodds asking about hooks pitfalls and a snarky response of &amp;quot;stale closures&amp;quot;&quot; src=&quot;https://leewarrick.com/blog/static/5a5dbcc6667a5da9eeabc5cbe90a1427/dbb61/staleclosures.png&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;React notes this in their &lt;a href=&quot;https://reactjs.org/docs/hooks-faq.html#why-am-i-seeing-stale-props-or-state-inside-my-function&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Any function inside a component, including event handlers and effects, “sees” the props and state from the render it was created in.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That made little sense to me, and maybe you can sympathize.&lt;/p&gt;
&lt;p&gt;Dan Abramov describes it better in his &lt;a href=&quot;https://overreacted.io/a-complete-guide-to-useeffect/&quot;&gt;blog&lt;/a&gt; and provides a solution:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Effects always “see” props and state from the render they were defined in. That helps prevent bugs but in some cases can be annoying. For those cases, you can explicitly maintain some value in a mutable ref.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was helpful, because it provided a solution in the form of &lt;code&gt;useRef&lt;/code&gt; (Thanks Dan!), but it left me in the dark as to how all of this works. Mostly because I didn’t understand &lt;code&gt;useRef&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;What is a “ref”, and how do you use one?&lt;/h2&gt;
&lt;p&gt;So traditionally, refs were meant to let you directly access an html element. For instance, let’s say you needed to focus an input field. You have to bail out of React and use regular JavaScript to call &lt;code&gt;.focus()&lt;/code&gt;. Hooks actually make this fairly simple:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function InputField() {
    const inputRef = React.useRef()
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;input type=&quot;text&quot; ref={inputRef} /&amp;gt;
            &amp;lt;button onClick={() =&amp;gt; inputRef.current.focus()}&amp;gt;
                Click to Focus the input
            &amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! Refs are an easy escape hatch to access native DOM APIs when we need to.&lt;/p&gt;
&lt;p&gt;…but how does that help us fix our stale closure counter example?&lt;/p&gt;
&lt;h2&gt;Using Refs to avoid Stale Closures&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables&quot;&gt;React docs&lt;/a&gt; compare refs to “instance variables”. I didn’t know what that meant (thanks &lt;a href=&quot;https://en.wikipedia.org/wiki/Instance_variable&quot;&gt;Wikipedia&lt;/a&gt;), so I didn’t find that helpful.&lt;/p&gt;
&lt;p&gt;I managed to wrap my head around refs by thinking about them this way:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Refs exist outside of the re-render cycle.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Think of refs as a variable you’re setting to the side. When your component re-runs it happily skips over that ref until you call it somewhere with &lt;code&gt;.current&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s see the fix for our timer example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const [count, setCount] = React.useState(0)
    const countRef = React.useRef(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            countRef.current = countRef.current + 1
            setCount(countRef.current)
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;The count is: {count}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now our counter works, but are you wondering if we could ditch state and just use refs?&lt;/p&gt;
&lt;h2&gt;State Versus Refs&lt;/h2&gt;
&lt;p&gt;You might be inclined to think you could use refs instead of state for your component and just sidestep all this weird behavior.&lt;/p&gt;
&lt;p&gt;You can’t. &lt;strong&gt;Refs aren’t reactive.&lt;/strong&gt; When you change a ref, it doesn’t cause a re-render. (Remember, they exist outside of the re-render cycle).&lt;/p&gt;
&lt;p&gt;This won’t work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Timer() {
    const count = React.useRef(0)

    React.useEffect(() =&amp;gt; {
        const intervalId = setInterval(() =&amp;gt; {
            count.current = count.current + 1
            //console.log(&apos;Ref example count: &apos; + count.current)
        }, 1000)
        return () =&amp;gt; clearInterval(intervalId)
    }, [])

    return (
        &amp;lt;div&amp;gt;The count is: {count.current}&amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That component is actually counting upwards internally, but it’s not causing the HTML to update. You need &lt;code&gt;useState&lt;/code&gt; for that. (Go ahead and uncomment the &lt;code&gt;console.log&lt;/code&gt; if you don’t believe me)&lt;/p&gt;
&lt;p&gt;Here’s an example to demonstrate refs vs state:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Counter() {
  const [count, setCount] = React.useState(0)
  const countRef = React.useRef(0)

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;State Count: {count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;
        Increment State Count
      &amp;lt;/button&amp;gt;
      &amp;lt;p&amp;gt;Ref Count: {countRef.current}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; countRef.current = countRef.current + 1}&amp;gt;
        Increment Ref Count
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

render(&amp;lt;Counter/&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You won’t see the ref count change until you trigger a re-render by setting state.&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;I love hooks and functional components in React, but the quirks I’ve outlined have given me pause. I don’t like being required to know so much about the inner-workings of React to use it. I think it presents a roadblock for those learning React, and I hope in the future the React team comes up with some better ways to handle these quirks.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[Staying Sane while Organizing CSS]]></title><description><![CDATA[In my time as a front-end developer, I’ve seen and heard a lot of gripes about CSS.I often see people reach for a CSS framework like…]]></description><link>https://leewarrick.com/blog/staying-sane-with-css/</link><guid isPermaLink="false">https://leewarrick.com/blog/staying-sane-with-css/</guid><pubDate>Sun, 01 Sep 2019 17:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/2fd06797aa9f09bb57ed8458570b82f3/971c4/mugcss.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Mug with &apos;CSS is Awesome&apos; written on it, but &apos;Awesome&apos; overflows the border of the text&quot; title=&quot;Mug with &apos;CSS is Awesome&apos; written on it, but &apos;Awesome&apos; overflows the border of the text&quot; src=&quot;https://leewarrick.com/blog/static/2fd06797aa9f09bb57ed8458570b82f3/a111b/mugcss.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In my time as a front-end developer, I’ve seen and heard a lot of gripes about CSS.&lt;/p&gt;
&lt;p&gt;I often see people reach for a CSS framework like Bootstrap, Materialize, Bulma, Tailwind, etc. to avoid writing CSS. While CSS frameworks can be great accelerators, they often require solid CSS skills to wield them effectively. That is to say, if you’re not very good at CSS, you’re probably not going to be that great using a CSS framework either.&lt;/p&gt;
&lt;p&gt;Framework or not, when hitting a snag people tend to throw more and more lines of CSS at the problem until they get a working solution. In essence, they’re following the “can’t tie a knot? Tie a lot!” method of development.&lt;/p&gt;
&lt;p&gt;Unfortunately a massive, improper knot is unreliable and weakens the rope.&lt;/p&gt;
&lt;p&gt;So don’t be the “see what sticks” developer. I’m going to show you how you can add a little organization to your stylesheets that will get you up and running quickly without pulling your hair out.&lt;/p&gt;
&lt;h2&gt;Preparing for Success: Reset vs Normalize&lt;/h2&gt;
&lt;p&gt;HTML elements come with their own default styling. Unfortunately, much of it is flat-out ugly (Looking at you, form input elements).&lt;/p&gt;
&lt;p&gt;To make things worse, browsers &lt;em&gt;still&lt;/em&gt; have not reached 100% parity on that default styling. This means certain elements appear differently on different browsers.&lt;/p&gt;
&lt;p&gt;You may even end up overriding that default styling over and over again in your stylesheet to achieve the look or positioning you want. Don’t fall into this trap. Address the default styles once.&lt;/p&gt;
&lt;p&gt;That said, there are two powerful, pre-built solutions for taming default styles: Reset and Normalize.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don’t forget to add these &lt;strong&gt;before&lt;/strong&gt; all other styles—remember the cascade!&lt;/p&gt;
&lt;h3&gt;CSS Reset&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://cssreset.com/scripts/eric-meyer-reset-css/&quot;&gt;CSS Reset&lt;/a&gt; is essentially the nuclear option. It wipes out all the styles from all of the elements, more or less making them differ in name only. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;’s look like &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags, for example.&lt;/p&gt;
&lt;p&gt;This is a valid solution if you need to start from scratch, but you typically don’t need to obliterate the default styles completely. If you do, you’re going to have to go back in and make that &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; large and bold again with &lt;em&gt;more&lt;/em&gt; CSS.&lt;/p&gt;
&lt;h3&gt;Normalize CSS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://necolas.github.io/normalize.css/&quot;&gt;Normalize CSS&lt;/a&gt; is the more elegant solution than a reset. Its goal is to even out the kinks between browsers and address the most common issues with default styles, while leaving the rest intact.&lt;/p&gt;
&lt;p&gt;Most CSS frameworks have a normalize built into them already, so you won’t need to add this in if you’re using Bootstrap, Materialize, etc.&lt;/p&gt;
&lt;h3&gt;The Quick and Easy Option&lt;/h3&gt;
&lt;p&gt;There’s a third option here worth mentioning. If you’re trying to get things done quickly and not using a framework, you can eliminate most of the funk with something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* {
    margin: 0;
    padding: 0;
    /* box-sizing: border-box */
    /* border: 1px solid black */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This ends up stripping out all the micro-adjustments you typically have to come in and do later if you roll with the default padding and margin on elements. (The &lt;code&gt;*&lt;/code&gt; is a wildcard selector that selects all elements)&lt;/p&gt;
&lt;p&gt;You can optionally toss in the &lt;code&gt;box-sizing&lt;/code&gt; bit to make sure that your widths/heights are not additive. This means if you say an element is &lt;code&gt;500px&lt;/code&gt;, it will be exactly that regardless of padding, margin, or border that you add in later. I don’t typically find myself reaching for this, but it can help when you’re doing pixel-perfect layouts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The last bit is a little 🔥 &lt;strong&gt;hot tip&lt;/strong&gt; 🔥 for debugging CSS layouts. If you’re wondering how big or what shape an element is, adding a border can quickly show you how something is being rendered. This adds a border to all elements, showing you how everything is laid out on the page.&lt;/p&gt;
&lt;h2&gt;Writing Good Markup and ‘Going with the Flow’&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.csszengarden.com/&quot;&gt;CSS Zen Garden&lt;/a&gt; showed us the awesome power of CSS to style HTML regardless of how it is written.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What’s that quote about power and responsibility…?&lt;/em&gt; 🤔🕷&lt;/p&gt;
&lt;p&gt;HTML has a certain &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow&quot;&gt;flow&lt;/a&gt; to it. It’s read and rendered top-to-bottom, certain elements are &lt;code&gt;block&lt;/code&gt; or &lt;code&gt;inline&lt;/code&gt;, etc. The greater your knowledge of this default behavior, the better you can use it to your advantage, and the less CSS you’ll have to write to change it.&lt;/p&gt;
&lt;p&gt;Yes, CSS can do amazing things to change the default behavior of markup. However, if you write your HTML with your end goal in mind, you’ll end up weaponizing CSS less often to make your markup behave appropriately.&lt;/p&gt;
&lt;h2&gt;Mastering Layouts with Flexbox and Utility Classes&lt;/h2&gt;
&lt;p&gt;Layouts and positioning of elements is probably the biggest source of strife when learning CSS. You want an element to be in a particular spot, so you write ten lines of CSS that &lt;em&gt;almost&lt;/em&gt; positions it perfectly. Then you write ten more lines of CSS, but now it’s vertically off-center, etc.&lt;/p&gt;
&lt;p&gt;There’s a few tools and tricks that can dramatically reduce the amount of time you spend attempting to place elements where you want them to go.&lt;/p&gt;
&lt;h3&gt;Floats&lt;/h3&gt;
&lt;p&gt;Before we talk about flexbox, let’s talk briefly about floats. If you’re using floats for layouts, &lt;em&gt;please stop&lt;/em&gt;. Flexbox is &lt;a href=&quot;https://caniuse.com/#feat=flexbox&quot;&gt;highly compatible&lt;/a&gt; with older browsers, and it’s way easier to use.&lt;/p&gt;
&lt;p&gt;Floats are great for wrapping text around an element, but are awful for layouts. They break the flow of HTML and require a &lt;a href=&quot;https://www.w3schools.com/howto/howto_css_clearfix.asp&quot;&gt;clearfix&lt;/a&gt; hack to restore that flow for the rest of the elements that come after.&lt;/p&gt;
&lt;p&gt;Here’s a quick example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;float-example&quot;&amp;gt;
    &amp;lt;img src=&quot;https://picsum.photos/200&quot; id=&quot;floatImage&quot;/&amp;gt;
    &amp;lt;!-- Let&apos;s say we want this blob of text to wrap around our example image --&amp;gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ultricies sem id ante ullamcorper, a commodo eros molestie. Phasellus leo justo, malesuada scelerisque ullamcorper et, finibus ut metus. Integer egestas tellus leo, et consectetur tortor bibendum at. Sed non imperdiet risus. Sed at metus mauris. Donec ullamcorper, nunc sit amet ullamcorper mattis, diam sapien viverra nisi, sit amet pretium ligula mi in est. Nulla finibus imperdiet fringilla. Proin fringilla augue et turpis placerat, sit amet commodo enim dictum. Vivamus viverra mollis augue, in fermentum odio placerat eu. Aenean porta tellus quis urna tristique sagittis.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#floatImage {
    /* &apos;float&apos; makes the text wrap around the image, try &apos;right&apos; */
    float: left;
    /* the rest of this is to better illustrate the wrapping effect */
    shape-outside: circle();
    border-radius: 100px;
    margin: 5px;
}

#float-example::after {
    /* Another gripe about floats is having to use a clearfix! */
    content: &quot;&quot;;
    display: table;
    clear: both;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you erase some of the lorem text, and remove that clearfix hack, you’ll see how floats destroy a page’s flow.&lt;/p&gt;
&lt;p&gt;Floats are a good tool if you use them correctly. However for layouts, you probably don’t want to use a float.&lt;/p&gt;
&lt;h3&gt;Flexbox&lt;/h3&gt;
&lt;p&gt;Flexbox is a powerful and simple tool to use for creating layouts and positioning elements. If you’ve never heard of it, Wes Bos has a great free series on it called &lt;em&gt;[What the Flexbox?](&lt;a href=&quot;https://www.youtube.com/watch?v=Vj7NZ6FiQvo&amp;amp;list=PLu8EoSxDXHP7xj&quot;&gt;https://www.youtube.com/watch?v=Vj7NZ6FiQvo&amp;amp;list=PLu8EoSxDXHP7xj&lt;/a&gt;&lt;/em&gt;y6NIAhy0wuCd4uVdid)_. If you’re already familiar with flexbox, there’s a great &lt;a href=&quot;http://flexbox.malven.co/&quot;&gt;visual cheat sheet&lt;/a&gt; you can use as well.&lt;/p&gt;
&lt;p&gt;Conceptually, flexbox is all about creating containers. So you create a flex container with &lt;code&gt;display: flex&lt;/code&gt; and then every direct child element will be aligned a certain way based on that parent container element.&lt;/p&gt;
&lt;p&gt;It’s also a one-dimensional system of laying things out. Each container runs in one direction, either horizontally with &lt;code&gt;flex-direction: row&lt;/code&gt; (the default) or vertically with &lt;code&gt;flex-direction: column&lt;/code&gt;. Children within can then be centered/aligned very easily from there.&lt;/p&gt;
&lt;h4&gt;Why not Grid?&lt;/h4&gt;
&lt;p&gt;You can absolutely use Grid! CSS Grid is very similar to flexbox, just way more powerful. If Flexbox is a one-dimensional layout system, Grid is two-dimensional. You can pretty much set a CSS grid container to do anything your heart desires. (If you want a great free CSS Grid course… yup, &lt;a href=&quot;https://www.youtube.com/watch?v=T-slCsOrLcc&amp;amp;list=PLu8EoSxDXHP5CIFvt9-ze3IngcdAc2xKG&quot;&gt;Wes Bos&lt;/a&gt; has you covered there as well.)&lt;/p&gt;
&lt;p&gt;Why use flexbox then? Honestly, I like it because it’s incredibly simple and straightforward. It does one thing and does it very well. Plus you can absolutely nest flex containers and compose them into whatever you need.&lt;/p&gt;
&lt;h2&gt;Components vs Utility classes&lt;/h2&gt;
&lt;p&gt;So when it comes to organization of CSS, there’s two camps: components, and utility classes.&lt;/p&gt;
&lt;h3&gt;Components&lt;/h3&gt;
&lt;p&gt;Components could be thought of like how bootstrap organizes their building blocks. A “jumbotron” or “navbar”, etc. might be represented by one class applied to an element, or possibly with a handful of subclasses used on elements within. The approach here is to use fewer class names in your HTML, scope/name them smartly, and generally style larger chunks of markup with a handful of classes.&lt;/p&gt;
&lt;p&gt;A popular convention for naming such classes is &lt;a href=&quot;http://getbem.com/&quot;&gt;BEM&lt;/a&gt;. BEM stands for “Block, Element, Modifier”, and it’s essentially a system of &lt;code&gt;--&lt;/code&gt; and &lt;code&gt;__&lt;/code&gt; inside your class names to increase the reusability and composability of your CSS.&lt;/p&gt;
&lt;p&gt;Here’s a &lt;a href=&quot;https://www.youtube.com/watch?v=SLjHSVwXYq4&quot;&gt;BEM in 5-minutes&lt;/a&gt; video to get you up to speed.&lt;/p&gt;
&lt;p&gt;The catch is that this reduces resuability of your CSS. You can’t very well apply jumbotron styles to a navbar. BEM and smart naming can only take you so far.&lt;/p&gt;
&lt;h3&gt;Utility Classes&lt;/h3&gt;
&lt;p&gt;The opposite approach to componentized classes is utility classes. These are small classes that typically do one thing only. For example, &lt;code&gt;mx-auto&lt;/code&gt; would apply &lt;code&gt;margin-left: auto; margin-right: auto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Bootstrap and Materialize have a set of utility classes, and Tailwind CSS is made up entirely of utility classes if you’d like more examples.&lt;/p&gt;
&lt;p&gt;The power of utility classes is in rapid development. You almost never have to leave your HTML file when prototyping if you have enough utility classes defined.&lt;/p&gt;
&lt;p&gt;The con here is that your HTML elements can quickly become bloated with CSS classes, and a combination of ten utility classes used to define a component results in a lot of repeated code.&lt;/p&gt;
&lt;h3&gt;Finding Balance&lt;/h3&gt;
&lt;p&gt;In my experience, a combination of both methods is the sane choice. Having a handful of global utility classes in combination with larger presentational classes for blocks of markup makes the most sense. This has the added benefit of making your markup a little more readable as well, because your component class names like &lt;code&gt;card&lt;/code&gt; are listed beside your layout class names like &lt;code&gt;row&lt;/code&gt; or &lt;code&gt;column&lt;/code&gt;. So &lt;code&gt;card row&lt;/code&gt; would tell you this card has a row of children elements.&lt;/p&gt;
&lt;p&gt;Let’s look at some examples. Let’s build a standard layout, starting with a header and some navigation links.&lt;/p&gt;
&lt;p&gt;This little bit of CSS is going to let us do a lot of heavy lifting. We’re going to start with a global color palette using &lt;a href=&quot;https://codeburst.io/css-variables-explained-with-5-examples-84adaffaa5bd&quot;&gt;CSS variables&lt;/a&gt;, then define our layout classes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:root {
    --ex-black: #1C0F13;
    --ex-green-dark: #6E7E85;
    --ex-green-light: #B7CECE;
    --ex-purple-dark: #BBBAC6;
    --ex-purple-light: #E2E2E2
}
/* These are going to be our main, bread and butter layout classes */
.row, .column {
    display: flex;
    flex-wrap: wrap;
}
.column {
    flex-direction: column;
}
.container {
    max-width: 500px;
    margin: auto
}
/* These additional classes will be used to space/align content */
.center-x {
    justify-content: center;
}
.center-y {
    align-items: center
}
.split {
    justify-content: space-between
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we’ll add some styles for our navigation header with BEM.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /* add some styles to prettify */
.header {
    background-color: var(--ex-black);
    padding: 10px 5px;
}
.header__logo {
    color: var(--ex-purple-light);
    margin: 0;
}
.header__link {
    color: var(--ex-purple-dark);
    margin: 0 5px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&quot;header&quot;&amp;gt;
    &amp;lt;div class=&quot;container row split center-y&quot;&amp;gt;
        &amp;lt;h1 class=&quot;header__logo&quot;&amp;gt;Logo&amp;lt;/h1&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That made short work of the header!&lt;/p&gt;
&lt;p&gt;Let’s go a little further and build out a jumbotron/call to action and a little text thrown in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.jumbotron__container {
    background-color: var(--ex-green-light);
}
.jumbotron {
    height: 300px;
    color: var(--ex-black);
}
.jumbotron__button {
    background-color: var(--ex-purple-light);
    border: 2px solid var(--ex-green-dark);
    border-radius: 4px;
    color: var(--ex-green-dark);
    transition: background-color 200ms, color 200ms
}
.jumbotron__button:hover {
    color: var(--ex-black);
    background-color: var(--ex-purple-dark);
    border: 2px solid var(--ex-black);
}
.ex-heading {
    text-align: center;
    margin: 24px 0;
    color: var(--ex-green-dark);
}
.ex-text {
    color: var(--ex-black);
    max-width: 200px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header class=&quot;header&quot;&amp;gt;
    &amp;lt;div class=&quot;container row split center-y&quot;&amp;gt;
        &amp;lt;h1 class=&quot;header__logo&quot;&amp;gt;Logo&amp;lt;/h1&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
            &amp;lt;p class=&quot;header__link&quot;&amp;gt;Link&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;
    &amp;lt;div class=&quot;jumbotron__container&quot;&amp;gt;
        &amp;lt;div class=&quot;jumbotron column center-x center-y&quot;&amp;gt;
            &amp;lt;h2&amp;gt;This is a moving message&amp;lt;/h2&amp;gt;
            &amp;lt;p&amp;gt;And this is why you should click the button below&amp;lt;/p&amp;gt;
            &amp;lt;button class=&quot;jumbotron__button&quot;&amp;gt;Call to Action&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;h3 class=&quot;ex-heading&quot;&amp;gt;Read Stuff&amp;lt;/h3&amp;gt;
    &amp;lt;section class=&quot;container row split&quot;&amp;gt;
        &amp;lt;p class=&quot;ex-text&quot;&amp;gt;
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris ultricies sem id ante ullamcorper, a commodo eros molestie. Phasellus leo justo, malesuada scelerisque ullamcorper et, finibus ut metus. Integer egestas tellus leo, et consectetur tortor bibendum at.
        &amp;lt;/p&amp;gt;
        &amp;lt;p class=&quot;ex-text&quot;&amp;gt;
            Sed non imperdiet risus. Sed at metus mauris. Donec ullamcorper, nunc sit amet ullamcorper mattis, diam sapien viverra nisi, sit amet pretium ligula mi in est. Nulla finibus imperdiet fringilla.
        &amp;lt;/p&amp;gt;
    &amp;lt;/section&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool right?&lt;/p&gt;
&lt;p&gt;Doing something like this as a CSS beginner used to take me hours and many more lines of CSS!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you check this layout on mobile, you’ll see it is responsive without any additional work. The &lt;code&gt;flex-wrap&lt;/code&gt; property makes our children elements wrap to a new line if there’s not enough space. Flexbox in general works very well with creating responsive layouts.&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;Hopefully by now you see the power of applying some organizational principles to your CSS. With a little practice, you can get some amazing things done with only a few lines of code.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[Finding the Courage to Code]]></title><description><![CDATA[Once I overheard someone describe a kid they met that knew he wanted to be a podiatrist 👣👨‍⚕️ at age 6. This story is not about that…]]></description><link>https://leewarrick.com/blog/the-courage-to-code/</link><guid isPermaLink="false">https://leewarrick.com/blog/the-courage-to-code/</guid><pubDate>Sun, 25 Aug 2019 16:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/6d10004003ed837c7402cd1283b0d75b/971c4/roadsign.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of Lonely Winding Road Sign by Fabien Bazanegue&quot; title=&quot;Photo of Lonely Winding Road Sign by Fabien Bazanegue&quot; src=&quot;https://leewarrick.com/blog/static/6d10004003ed837c7402cd1283b0d75b/a111b/roadsign.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Once I overheard someone describe a kid they met that knew he wanted to be a podiatrist 👣👨‍⚕️ at age 6. This story is not about that person.&lt;/p&gt;
&lt;p&gt;My life has been rife with indecision. In fact, a good friend once described me as the &lt;em&gt;“male Barbie of careers”&lt;/em&gt;. Sure, I eventually found my way to coding, but it was a long, winding road.&lt;/p&gt;
&lt;h2&gt;The Early Years&lt;/h2&gt;
&lt;p&gt;As a kid, I always thought I would like to do …&lt;em&gt;stuff&lt;/em&gt; with computers. I wasn’t quite sure what that stuff was, but I wanted to do it.&lt;/p&gt;
&lt;p&gt;What I &lt;em&gt;did&lt;/em&gt; know, was that programming seemed dense and mystical. Actually I didn’t even really know what programming was. I basically thought it was like the movie “Hackers”.&lt;/p&gt;
&lt;p&gt;In elementary and middle school, my only exposure to computers was through playing Math Blaster, Oregon Trail, and a Super Mario typing game. In high school I took an introductory computer course (basically a Microsoft A+ certification class), and a web design class where we learned a little HTML.&lt;/p&gt;
&lt;p&gt;Writing math formula scripts on my graphing calculator was as close as I got to really coding something in grade school. Those miniature programs were silly, but also &lt;em&gt;exciting&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Clueless in College&lt;/h2&gt;
&lt;p&gt;The smart kids in my high school seemed to be all applying and getting accepted to college. So I blindly followed suit.&lt;/p&gt;
&lt;p&gt;I applied and was accepted to the University of Florida as a chemical engineering student. I stuck with it for about a month before catching wind of what those folks actually do, then changed majors to Computer Science.&lt;/p&gt;
&lt;p&gt;I was going for it folks, I was going to pursue my &lt;strong&gt;dream&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The first day of my intro to computer science class went like this:&lt;/p&gt;
&lt;p&gt;A lanky, disheveled man strode into the auditorium fifteen minutes late. He stood at the podium and addressed the class:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“A little news in the life of Pete. I just found out my&lt;/em&gt; &lt;strong&gt;&lt;em&gt;former&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;best friend has been sleeping with my ex-wife.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pete then proceeded to teach us binary, hexidecimal, and other very low-level computer science concepts. For homework, we had to solve small, boring puzzles with Java like &lt;em&gt;Given a number N, print a triangle of #‘s to the screen that is N wide and N tall.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I stubbornly worked through those assignments. I coded in notepad.exe and ran my code with the windows command line. I didn’t know what an IDE was and I didn’t understand how this was going to add up to writing actual software.&lt;/p&gt;
&lt;p&gt;In class, there was one student up front that nodded along with everything the instructor said, answered every question, and giggled at every Java idiosyncracy that arose during the lecture.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;hated&lt;/em&gt; that student. I hated him because I wished I &lt;strong&gt;&lt;em&gt;was&lt;/em&gt;&lt;/strong&gt; him. How did he know so much in an intro class? I felt so incredibly lost by comparison.&lt;/p&gt;
&lt;p&gt;I spent two semesters suffering through Java. Our final project of the second semester was hangman. I finished it while having absolutely no idea what I was doing.&lt;/p&gt;
&lt;p&gt;I thought, &lt;em&gt;“If I’ve spent a year learning to code, and this is how far I’ve come, how will I ever make anything useful?”&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Succombing to Self-doubt&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/850489fa2701f344d35eca8247973d96/971c4/desert.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of a man walking through the desert by Dan Grinwis&quot; title=&quot;Photo of a man walking through the desert by Dan Grinwis&quot; src=&quot;https://leewarrick.com/blog/static/850489fa2701f344d35eca8247973d96/a111b/desert.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I saw myself as hopelessly outmatched. I convinced myself that coding was for child prodigies and geniuses only seen on TV. I did all the mental gymnastics required to convince myself that I was the problem.&lt;/p&gt;
&lt;p&gt;I switched majors again and got my degree in Japanese language.（こんいちは皆さん！）But I doubted my language skills too. In my mind, I couldn’t possibly be good enough to work as a translator or interpreter.&lt;/p&gt;
&lt;p&gt;So I went back to school to be a firefighter. I reasoned that my father did it for 30 years, had a great retirement plan, and seemed to enjoy the job, so why shouldn’t I do the same?&lt;/p&gt;
&lt;p&gt;I somehow made it through fire school. Then I became an EMT and a Paramedic. I got hired. Soon I was keeping the roads hot with my lights and sirens blaring, kicking down doors and saving lives!&lt;/p&gt;
&lt;p&gt;Except it wasn’t like that at all. Most 911 calls are not emergencies—most are monotonous and mundane. And of the calls I ran, the 10% that &lt;em&gt;were&lt;/em&gt; true emergencies still haunt me from time to time.&lt;/p&gt;
&lt;p&gt;And the pay was awful. I was exposed to a lot of chemicals, disease, and stress for about $14 an hour.&lt;/p&gt;
&lt;p&gt;I convinced myself I needed to do better. I went back to school and became a registered nurse, and worked in intensive care and the emergency room.&lt;/p&gt;
&lt;p&gt;My situation had improved: now I was being exposed to a lot of chemicals, disease, and stress for about $25 an hour.&lt;/p&gt;
&lt;h2&gt;Changing Course&lt;/h2&gt;
&lt;p&gt;At some point I found myself looking back on my life and wondering how I ended up so far from my dreams. As a kid, I wanted to make things. I wanted to code.&lt;/p&gt;
&lt;p&gt;Sometimes I’d find myself sitting at the nurse’s station absent-mindedly clicking through Codecademy or freeCodeCamp tutorials.&lt;/p&gt;
&lt;p&gt;Then I discovered coding bootcamps.&lt;/p&gt;
&lt;p&gt;There’s a lot of noise out there about bootcamps. You’d be forgiven for thinking that they’re the ponzi scheme of our time after doing a little research on the internet.&lt;/p&gt;
&lt;p&gt;The risk didn’t matter though. I saw it as an opportunity to escape. I signed up.&lt;/p&gt;
&lt;p&gt;Going to code bootcamp turned out to be a transformative experience for a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;I was surrounded by career changers.&lt;/strong&gt; When we introduced ourselves on the first day I found myself in the company of marketing executives, fast-food workers, database administrators, school teachers, and even computer science undergrads.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everyone struggled to get their code to run.&lt;/strong&gt; Sure, some were better than others, but absolutely everyone had difficulties in class and doing the homework.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We built fun things.&lt;/strong&gt; Not once did I have to print a triangle with &lt;code&gt;for&lt;/code&gt; loops. We built personal websites, games, toy apps, and more. I could feel myself making progress. I actually enjoyed learning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;We were encouraged to find our own answers.&lt;/strong&gt; From day one we were told to “google it.” It was our mantra. We weren’t expected to know everything, but we had to be able to search for the answers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So there I was with like-minded, indecisive people that were struggling to learn, having fun building things, and just as clueless as I was. It was so radically different from that college class I had taken fifteen years ago. It was invigorating.&lt;/p&gt;
&lt;h2&gt;Getting Hired as a Developer&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/611c7daf802a5a15a05cc4c0bd3df098/971c4/climbing.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of man climbing a mountain in Yosemite by Billy Onjea&quot; title=&quot;Photo of man climbing a mountain in Yosemite by Billy Onjea&quot; src=&quot;https://leewarrick.com/blog/static/611c7daf802a5a15a05cc4c0bd3df098/a111b/climbing.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I worked very, very hard in class. I knew that this was my chance to change course. I took it very seriously.&lt;/p&gt;
&lt;p&gt;I also knew going in that getting a job was not guaranteed or even likely.&lt;/p&gt;
&lt;p&gt;Most employers don’t like junior developers, and they like bootcamp grads even less. They view juniors as a liability not worth the money they’ll save on a lower salary.&lt;/p&gt;
&lt;p&gt;I needed to stand out in a positive way. I needed to convince someone to give me a chance despite my inexperience.&lt;/p&gt;
&lt;p&gt;The bootcamp did not bless me with a great resume nor a great portfolio, and as a brand new developer living an hour outside of town, I had no network.&lt;/p&gt;
&lt;p&gt;So I went to meetups. I got on a developer slack channel in town and asked a boatload of stupid questions. I worked tirelessly on my resume and portfolio, soliciting feedback from anyone willing to give it. And all the while I machine-gunned my resume to every developer job on indeed that I was remotely qualified for.&lt;/p&gt;
&lt;p&gt;Eventually I saw a job-listing on slack. I messaged the poster, sent my resume and portfolio, and setup an interview.&lt;/p&gt;
&lt;p&gt;In that interview, I was calm and collected. I made them laugh and answered their questions. My past careers had taught me to maintain my composure and stay calm. One of my interviewers even remarked how it would be great to have a nurse on the team.&lt;/p&gt;
&lt;p&gt;I got the job. I quit nursing and became a fulltime developer.&lt;/p&gt;
&lt;h2&gt;Words of Wisdom&lt;/h2&gt;
&lt;p&gt;Here’s what I wish someone had told me many years ago at the start of this journey:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stop doubting yourself.&lt;/strong&gt; With enough patience and effort, you can learn anything.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do the things that make you happy&lt;/strong&gt; and make you feel fulfilled. Don’t do something because it’s “a good job” or “a steady paycheck”.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Find comfort in the fact that you’re not alone.&lt;/strong&gt; We’re all making this up as we go along. &lt;a href=&quot;https://twitter.com/getify/status/972495616600293381&quot;&gt;Even our mentors struggle to get their code to work&lt;/a&gt;. Nobody has all the answers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t ever forget where you came from.&lt;/strong&gt; Remember the things that confused, infuriated, and discouraged you. It will help you remember how far you’ve come, keep you humble, and remind you to be kind to those following in your footsteps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn from my mistakes, then pay it forward.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[Learn to Code Anything in 6 Steps]]></title><description><![CDATA[Learning to code something new can be a painful process. We inevitably get stuck or frustrated as we stumble through new concepts and ideas…]]></description><link>https://leewarrick.com/blog/how-to-learn-anything/</link><guid isPermaLink="false">https://leewarrick.com/blog/how-to-learn-anything/</guid><pubDate>Sun, 18 Aug 2019 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Learning to code something new can be a painful process. We inevitably get stuck or frustrated as we stumble through new concepts and ideas.&lt;/p&gt;
&lt;p&gt;I’ve learned some hard concepts as a programmer. I’ve started from scratch in a new language as well as struggled through difficult concepts in an area I’m already comfortable in.&lt;/p&gt;
&lt;p&gt;Working through those challenges has taught me that there’s a process to learning to program in a different language or ecosystem. There’s a pattern that emerges.&lt;/p&gt;
&lt;p&gt;It’s a little like the &lt;a href=&quot;https://psychcentral.com/lib/the-5-stages-of-loss-and-grief/&quot;&gt;five stages of grief&lt;/a&gt;; some people are in different spots or skip steps, but everyone struggles through roughly the same process.&lt;/p&gt;
&lt;h2&gt;1. Exposure to a New Topic&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/2da77f2fee4504f6c268c971c8947f5b/971c4/pain.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo by Aarón Blanco Tejedor of mural of man in pain&quot; title=&quot;Photo by Aarón Blanco Tejedor of mural of man in pain&quot; src=&quot;https://leewarrick.com/blog/static/2da77f2fee4504f6c268c971c8947f5b/a111b/pain.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;When you’re first introduced to a completely new concept, it can be overwhelming.&lt;/p&gt;
&lt;p&gt;Handlebars templating stopped me dead in my tracks when I was in a code bootcamp.&lt;/p&gt;
&lt;p&gt;My brain hurt. It was difficult to comprehend this concept, and my body was physically telling me to give up. I found it hard to read about, and I didn’t want to listen in class or do the examples. When it came time to do the homework, I had to force myself to sit down and do it.&lt;/p&gt;
&lt;p&gt;Eventually though, I got the hang of handlebars.&lt;/p&gt;
&lt;p&gt;It took me a long time to realize and find comfort in the fact that this feeling of despair when facing a new, challenging task is temporary. It goes away with time and patience.&lt;/p&gt;
&lt;p&gt;When you find yourself faced with an overwhelming task or topic, think of yourself like a sculptor. A sculptor can’t produce a large piece in an afternoon with a sledgehammer; she has to chisel away slowly to transform the unforgiving rock into art. Hard topics are boulders we try to sculpt into artful understanding slowly over time.&lt;/p&gt;
&lt;p&gt;You need rest, patience, and persistence to learn what at first feels insurmountable.&lt;/p&gt;
&lt;h2&gt;2. Developing a High-level Understanding&lt;/h2&gt;
&lt;p&gt;Many tutorials and guides zero in on the syntax and finite steps required to accomplish something. This is great if you’re a veteran and well-versed in the subject matter.&lt;/p&gt;
&lt;p&gt;So as a guitarist I might watch a 10 minute video and walk away with,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Ah, so one major pentatonic scale cannot be applied universally to a chord progression. To sound good I have  to match the scale to the specific chord being played.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I can accomplish that by using CAGED patterns to match  up with the chords in a progression.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I get it, but I’ve played guitar for about 20 years. If you’re not a guitarist or not familiar with basic music theory, that tip is gibberish to you.&lt;/p&gt;
&lt;p&gt;Looking back at the handlebars example, I had to come to grips with a lot of foreign concepts.&lt;/p&gt;
&lt;p&gt;I had to understand browsers, http, servers, databases, and client-side vs server-side rendering. I also had to learn what node and npm are, what package managers are, and how to work with modules in node.&lt;/p&gt;
&lt;p&gt;I had to understand all of these things to understand the problem that handlebars was created to solve. Once I understood those things, it was easier to focus on handlebars itself, as opposed to the ecosystem it lives in.&lt;/p&gt;
&lt;p&gt;If you find yourself completely lost on a concept, ask yourself:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Do I not understand this because it is complex, or do I not understand this because I don’t understand the things that surround it?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are many times I’ve run up against this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PassportJS - I didn’t know how auth worked, how sessions worked, or how/what OAuth was, so passport was wizardry.&lt;/li&gt;
&lt;li&gt;Docker - I didn’t know what a virtual machine was or why it was useful, therefore didn’t understand containers.&lt;/li&gt;
&lt;li&gt;AWS - I didn’t understand what “cloud architecture” was, so I didn’t understand what it meant to deploy code in the cloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seeking out high-level explanations for those topics and understanding them first was key to allowing me to learn how to use those tools.&lt;/p&gt;
&lt;h2&gt;3. Learning the Workflow&lt;/h2&gt;
&lt;p&gt;With a new coding skill usually comes a new workflow.&lt;/p&gt;
&lt;p&gt;You’re going to have to spend time figuring out how to edit and run your code, how to use other people’s code, and what tooling fits your use case.&lt;/p&gt;
&lt;p&gt;This is often a &lt;strong&gt;boring&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;miserable&lt;/em&gt;&lt;/strong&gt; task.&lt;/p&gt;
&lt;p&gt;To give an example, I’ve recently been learning Python. I immediately had questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Which version should I install, 2 or 3?&lt;/li&gt;
&lt;li&gt;Can I edit and run Python with VSCode?&lt;/li&gt;
&lt;li&gt;What the heck is a REPL?&lt;/li&gt;
&lt;li&gt;How do I manage dependencies? Why do they install globally instead of locally by default?&lt;/li&gt;
&lt;li&gt;What are virtual environments?&lt;/li&gt;
&lt;li&gt;What is a Jupyter Notebook?&lt;/li&gt;
&lt;li&gt;How do I run a Jupyter notebook file? &lt;em&gt;…Oh, hmmm. It comes with Anaconda&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;What is anaconda?&lt;/li&gt;
&lt;li&gt;Ananconda COMES with a Python installation!? 😫&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then I had to go back to step 2 and work through most of the same questions with conda 🤦‍&lt;/p&gt;
&lt;p&gt;A lot tutorial makers and authors skip these crucial tidbits. Whether this is because they don’t think their audience needs to be told the basics, or because they want to skip to the 🔥 &lt;strong&gt;hot tips&lt;/strong&gt; 🔥, I couldn’t say.&lt;/p&gt;
&lt;p&gt;What I &lt;em&gt;can&lt;/em&gt; say is that if you don’t need the handholding, it’s easy to skim further or skip that part of a tutorial. If you &lt;em&gt;do&lt;/em&gt; need that extra instruction and it isn’t there, you’re now lost.&lt;/p&gt;
&lt;p&gt;Personally, I really appreciate whenever someone takes the time to build the audience up to a topic and provides some clear, concise steps to follow to get up and running. It’s a huge time-saver and let’s me get right into the part I enjoy, which is coding.&lt;/p&gt;
&lt;p&gt;So do your research and try to stay motivated while you’re working though this part. It’s easy to say, &lt;em&gt;“Ugh, forget it, I’ll figure out npm another day”&lt;/em&gt;, and then give up on learning Node.&lt;/p&gt;
&lt;p&gt;However, once you get past this boring part of the process, you can start to learn the fun parts. 🦄&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you’re looking for a blog post topic, this is a great start. I &lt;strong&gt;guarantee&lt;/strong&gt; that the workflow knowledge you take for granted is crucial to a novice’s continued learning out there. You probably know more than you think you do, so share it.&lt;/p&gt;
&lt;h2&gt;4. Defining a Small, Attainable Goal&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/97619f9c4f00665ce37cb17d3dc5c2fb/971c4/lego.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo by Kelly Sikkema of a child building a rocket ship out of legos&quot; title=&quot;Photo by Kelly Sikkema of a child building a rocket ship out of legos&quot; src=&quot;https://leewarrick.com/blog/static/97619f9c4f00665ce37cb17d3dc5c2fb/a111b/lego.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Once you’ve got a good workflow and can actually execute the code you’re writing, it’s time to figure out something to build.&lt;/p&gt;
&lt;p&gt;This seems obvious, but it’s actually a crucial step.&lt;/p&gt;
&lt;p&gt;You need to scope yourself to something achieveable, but also useful and fun to build. Something that will challenge you, but not so much that you give up.&lt;/p&gt;
&lt;p&gt;If you’re learning web development, you don’t want to start out trying to build a facebook clone. You’re going to be sent down so many rabbit holes (servers, databases, react, etc) you’ll never get anything accomplished.&lt;/p&gt;
&lt;p&gt;As a beginner, you probably want to stick to HTML and just build a basic site. If you have a little knowledge, maybe use HTML and CSS to make a site with a nice layout and design. If that’s too easy, maybe add in some interactivity with JavaScript.&lt;/p&gt;
&lt;p&gt;Again, this seems simple, but can be devilishly challenging if you’re entering a new area or subject. How do you know what’s too complex? What’s actually useful to learn?&lt;/p&gt;
&lt;p&gt;You have to spend some time figuring out what your actual goals are for learning this new skill, then work backwards. What would you like to be able to build? What will you need to learn to build it? How can you practice those things?&lt;/p&gt;
&lt;p&gt;As a guitarist, I started taking lessons as a young adult after about ten years of study. At that point I knew about scales, chords, how to play a song, etc. I knew all the basics.&lt;/p&gt;
&lt;p&gt;I sat down across from my new teacher one night and he asked me, &lt;em&gt;“What would you like to learn?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I had no idea. He didn’t either. How could he teach me?&lt;/p&gt;
&lt;p&gt;Avoiding the creation of clearly-defined goals often leads to a lot of wasted time.&lt;/p&gt;
&lt;h2&gt;5. Putting in the Work&lt;/h2&gt;
&lt;p&gt;Coding is hard. Building useful things out of code is harder. Even veteran programmers struggle:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;20+ yrs dev exp, 8 books w/ 100k+ copies sold, 300k+ hours watched of my videos, 4k+ taught in person…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;And you know what? I still struggle to get my code to work and it’s still a tedious slog. And my code still confuses me the next day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You’re not alone in these struggles. - &lt;a href=&quot;https://twitter.com/getify/status/972495616600293381&quot;&gt;Kyle Simpson&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Building that first project is going to be tough. You’re going to hit some snags, discover you need to dive into some new topics, and probably end up on stack overflow more than once.&lt;/p&gt;
&lt;p&gt;But you’re going to learn a lot of things if you get it done.&lt;/p&gt;
&lt;p&gt;The important thing here is to realize that you need to keep at it, and that if you planned correctly in the previous step, there’s an end in sight.&lt;/p&gt;
&lt;p&gt;Just remember that finishing that first project and realizing you’ve built something with an entirely new skill, language, or framework is…&lt;/p&gt;
&lt;p&gt;✨🎵🕊&lt;strong&gt;G L O R I O U S&lt;/strong&gt;🕊🎵✨&lt;/p&gt;
&lt;h2&gt;6. Maintaining Momentum&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/d67696a08dc0564dba337868a19c524a/971c4/hiking.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo by Brian Erickson of running on a mountain pass&quot; title=&quot;Photo by Brian Erickson of running on a mountain pass&quot; src=&quot;https://leewarrick.com/blog/static/d67696a08dc0564dba337868a19c524a/a111b/hiking.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Once you have that first win, it’s time to get another under your belt.&lt;/p&gt;
&lt;p&gt;😮 &lt;em&gt;So soon?&lt;/em&gt;, you say.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yes.&lt;/strong&gt; 😐&lt;/p&gt;
&lt;p&gt;Go back to the previous two steps and start figuring out what you can build next that will get you further toward your goal. (You &lt;em&gt;do&lt;/em&gt; have a goal, right?)&lt;/p&gt;
&lt;p&gt;Figure out how you can expand what you’ve learned and take those new skills into the next project. Build something bigger or completely different that’s going to teach you a little bit more about how to reach that end goal.&lt;/p&gt;
&lt;p&gt;Then build it. Build more things. &lt;strong&gt;Keep learning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We signed up for this life when we decided to become developers. It’s the bargain we made for a great job with widely-applicable skills. We accepted that we would be constantly learning and growing, that we would continue to hone our skills in an ever-changing industry.&lt;/p&gt;
&lt;p&gt;The good news is that this process becomes easier. You begin to expect it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Gosh, this is hard. This hurts my brain”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Becomes: &lt;em&gt;“Ah, yes. This will take some time to learn.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Ugh, where do I start?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Becomes: &lt;em&gt;“Hmm, better figure out a workflow.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;p&gt;I’ve been through these steps myself many times as a developer. You’ll get faster if you keep going.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[How to Debug JavaScript Quickly]]></title><description><![CDATA[If you’ve ever thought, “meh… I’m fine with console.log, learning to debug is as painful as rolling in fire ants”, this article is for you…]]></description><link>https://leewarrick.com/blog/debugging-javascript/</link><guid isPermaLink="false">https://leewarrick.com/blog/debugging-javascript/</guid><pubDate>Mon, 12 Aug 2019 03:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/d8b30a405f9f7076dc088249d765c2bf/96f4b/fireants.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of fire ants&quot; title=&quot;Photo of fire ants&quot; src=&quot;https://leewarrick.com/blog/static/d8b30a405f9f7076dc088249d765c2bf/a111b/fireants.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If you’ve ever thought, &lt;em&gt;“meh… I’m fine with&lt;/em&gt; &lt;code&gt;console.log&lt;/code&gt;&lt;em&gt;, learning to debug is as painful as rolling in fire ants”&lt;/em&gt;, this article is for you!&lt;/p&gt;
&lt;h2&gt;Console Confessional&lt;/h2&gt;
&lt;p&gt;Me and &lt;code&gt;console.log&lt;/code&gt; are like this: 🤞. It’s been my go-to solution for all things weirdJS from the start: &lt;code&gt;this&lt;/code&gt;, de-nesting API call data, &lt;code&gt;async&lt;/code&gt; things, timeouts, etc.&lt;/p&gt;
&lt;p&gt;However, once upon a time, my bootcamp teacher showed us debugging briefly (thank you James), and I thought, *“This is… &lt;strong&gt;really cool&lt;/strong&gt;”*.&lt;/p&gt;
&lt;p&gt;You could see &lt;strong&gt;everything&lt;/strong&gt; happening inside your code while it’s executing—how useful!&lt;/p&gt;
&lt;p&gt;Unfortunately I soon got into node-land and then front-end framework valley. I quickly gave up on debugging. (Configure VS Code debugger anyone? Webpack? &lt;em&gt;…No thanks.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;And that was 👌 for a while. I’d hit an issue, fire off a &lt;code&gt;console.log&lt;/code&gt; or three, solve it, and go back through the code to delete them. Sometimes issues would require many more console.logs. Sometimes my boss would giggle when one slipped into a Pull Request; I’d feel bad, delete/re-push, and go back to &lt;code&gt;console.log&lt;/code&gt;-ing.&lt;/p&gt;
&lt;p&gt;I’ve probably typed &lt;code&gt;console.log&lt;/code&gt; more than any other syntax, word, or punctuation in my time coding JavaScript. I’ve typed it so much I’ve thought about installing an &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log&quot;&gt;extension&lt;/a&gt; to save myself keystrokes.&lt;/p&gt;
&lt;p&gt;There’s also a ton of useful &lt;code&gt;console.log&lt;/code&gt; tricks out there. I’ve used &lt;code&gt;console.error&lt;/code&gt;, &lt;code&gt;console.warn&lt;/code&gt;, &lt;code&gt;console.table&lt;/code&gt;, destructring, used CSS in logs, and &lt;a href=&quot;https://kylegill.com/blog/2018-11-20-commanding-the-javascript-console/index&quot;&gt;many more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But what happens when that’s just not enough? What if you’re tired of typing &lt;em&gt;“c o n s o l e . l o g”&lt;/em&gt; everytime you hit a snag?&lt;/p&gt;
&lt;h2&gt;console.gone&lt;/h2&gt;
&lt;p&gt;At work recently, we realized our production code had a memory leak. Our wonderful production code that was compiled and transpiled with webpack, stuffed into a docker container, and running in a linux environment somewhere in AWS land.&lt;/p&gt;
&lt;p&gt;Where was my wonderful &lt;code&gt;console.log&lt;/code&gt; in all that mess?&lt;/p&gt;
&lt;p&gt;Gone, friend. Gone.&lt;/p&gt;
&lt;p&gt;Long story short, we got deep into Chrome’s performance tooling (a topic for another article?). Through that, &lt;strong&gt;I finally found a quick path to connecting node/webpack and chrome dev tools.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since then I’ve found myself using more &lt;code&gt;debugger&lt;/code&gt; statements in my day-to-day.&lt;/p&gt;
&lt;h2&gt;Basic Debugging with Chrome&lt;/h2&gt;
&lt;p&gt;OK. For anyone that’s unfamiliar, first we’re going to start with the basics. How do you actually open the chrome debugger?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, &lt;strong&gt;open dev tools on this site.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press f12, right-click and select “inspect”, press ctrl-shift-i on Windows or cmd-clover-unnatural-hand-movement on Mac… just get the dev tools open however you normally do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add a&lt;/strong&gt; &lt;code&gt;debugger&lt;/code&gt; &lt;strong&gt;statement to your code&lt;/strong&gt;. (I’ve already done this below)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chrome will pick up on any debugger statements, pause the code, and open the debugging tools while code is running &lt;strong&gt;if (and only if)&lt;/strong&gt; dev tools are already open.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run the code!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click ↗↘ or ➡ to step through the code line by line&lt;/li&gt;
&lt;li&gt;Click the ▶ to resume the script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;function doStuff(thing) {
    thing = thing / 4 * -1
    thing = Math.pow(thing, 1)
    const thing2 = Math.trunc(thing) + 5
    debugger // &amp;lt;-- this makes the magic happen
    return thing2
}

const thingamajig = Math.random()
const result = doStuff(thingamajig)
console.log(&quot;And the result is...&quot; + result)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Pretty cool right? 😎👍&lt;/h4&gt;
&lt;p&gt;Notice how the debugger prints the values of the code as you step through it. Very very nice! This can save you many many keystrokes if you’re trying to dig down into an object.&lt;/p&gt;
&lt;p&gt;Why don’t we check out some more basic debugging examples?&lt;/p&gt;
&lt;h2&gt;Checking out variable values&lt;/h2&gt;
&lt;p&gt;You can hover over variables in the debugger and see their value as you step through the code.&lt;/p&gt;
&lt;p&gt;First let’s look at some HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;magical&quot;&amp;gt;Boooooring&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s watch some JavaScript spice things up in the html above. Try stepping through to the “awesome” variable, then hovering over it to see all the magical properties and methods a DOM object has attached to it.&lt;/p&gt;
&lt;p&gt;(Don’t forget to use ↗↘ to step through, and ▶ when you’re finished)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;debugger // Let&apos;s watch the magic happen~ ✨👏
const div = document.getElementById(&apos;magical&apos;)
const awesome = document.createElement(&apos;marquee&apos;)
//I&apos;m I-remember-marquee-tags years old. 🤫
awesome.innerHTML = &apos;&amp;lt;h2&amp;gt;✨🚀~MAGICAL~ 🦄🌈&amp;lt;/h2&amp;gt;&apos;
div.textContent = &quot;&quot; //boring no more...
div.appendChild(awesome)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Nested Properties&lt;/h2&gt;
&lt;p&gt;Trying to find a nested property on an object? Debugging can help!&lt;/p&gt;
&lt;p&gt;Let’s try and get… oh, let’s say the level of sweetness on this meatball object below.&lt;/p&gt;
&lt;p&gt;It would take me a &lt;em&gt;lot&lt;/em&gt; of &lt;code&gt;console.log&lt;/code&gt;s to finally drill down to that… but there’s a better way!&lt;/p&gt;
&lt;p&gt;Debug, Hover the variable, then expand the properties until you find the key you’re looking for then &lt;strong&gt;Right-Click&lt;/strong&gt; and select &lt;strong&gt;Copy Property Path&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const meatball = {
    ingredients: {
        spices: [&quot;Oregano&quot;, &quot;Italian&quot;, &quot;Mystery&quot;],
        meats: {
            beef: {
                freeRange: true,
                happy: &quot;yes, until it was time to make meatballs&quot;,
            }
        },
    },
    flavors: [
        {
            umami: {
                level: &quot;???&quot;
            }
        },
        {
            savory: {
                level: 8
            }
        },
        {
            sweet: {
                level: Math.floor(Math.random() * 9)
            }
        },
    ]
}
//look up where we assign the meatball variable
//hover over meatball, and start opening up properties until you get to sweetness
//then right-click on &quot;level&quot; and choose &quot;copy property path&quot;
//paste it after meatball below:
debugger
console.log(&quot;Mama makes a meatball that&apos;s &quot; + /*meatball.&amp;lt;paste here and uncomment&amp;gt;*/ + &quot;/9 in sweetness&quot;)
//don&apos;t forget to erase the debugger when you run it!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Blackboxing 📦 and React ⚛&lt;/h2&gt;
&lt;p&gt;Want to debug React? No problem! You can use the same workflow as above, even when using a framework like React or Vue. Just drop a &lt;strong&gt;debugger&lt;/strong&gt; statement in, &lt;strong&gt;open dev tools&lt;/strong&gt;, and &lt;strong&gt;run&lt;/strong&gt; it!&lt;/p&gt;
&lt;h4&gt;A small catch&lt;/h4&gt;
&lt;p&gt;OK, there’s one minor note I have to make. We want to debug, &lt;em&gt;our&lt;/em&gt; code, and not React’s code, right? However, the debugger will step through &lt;strong&gt;all&lt;/strong&gt; of the code that’s running, not just yours. So you might find yourself in some weird React code as you’re stepping through your component.&lt;/p&gt;
&lt;p&gt;No sweat! There’s ways to handle that. Try these tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lost in a weird script? Click ⬆ to “Step out” of a function and hopefully back up to a recognizeable script.&lt;/li&gt;
&lt;li&gt;Still lost? Look at the &lt;strong&gt;Call Stack&lt;/strong&gt; Panel. The scripts here are the ones you’re currently stepping through. In some weird script? &lt;strong&gt;Right-click&lt;/strong&gt; and select &lt;strong&gt;“Blackbox script”&lt;/strong&gt; to skip debugging the script you’re in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try it below!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Counter() {
    const [count, setCount] = React.useState(0)
    function countUp(count) {
        debugger
        const newCount = count + 1
        setCount(newCount)
    }
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;h2&amp;gt;Count is {count}&amp;lt;/h2&amp;gt;
            &amp;lt;button onClick={() =&amp;gt; countUp(count)}&amp;gt;Increment&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;But what about Node?&lt;/h2&gt;
&lt;p&gt;Ah yes… the eternal question. How does one debug NodeJS?&lt;/p&gt;
&lt;p&gt;You can use &lt;a href=&quot;https://code.visualstudio.com/docs/nodejs/nodejs-debugging&quot;&gt;VS Code&lt;/a&gt;, you can use a neat tool called &lt;a href=&quot;https://github.com/GoogleChromeLabs/ndb&quot;&gt;NDB&lt;/a&gt;, but I say we just use chrome and move on with our lives.&lt;/p&gt;
&lt;p&gt;(Note: I personally always confuse “ndb” and “nbd” as in “No Big Deal”, instead of “node debugger”, and it makes me nuts. I &lt;strong&gt;always&lt;/strong&gt; mistype it, I can’t google it, and so it makes a fool of me everytime I try to use it.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open chrome and type &lt;code&gt;chrome://inspect&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then start your app with the &lt;code&gt;--inspect&lt;/code&gt; flag.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ex: &lt;code&gt;node --inspect server.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You should see something like: &lt;code&gt;Debugger listening on ws://127.0.0.1:9229/dfcsd4c63-123e-234-adsd-123lkdfgk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go back to Chrome, you should see “Remote Target” and a file name/path to your file, plus a little &lt;code&gt;inspect&lt;/code&gt; link. Click it! This should pop open a separate dev tools window.&lt;/li&gt;
&lt;li&gt;Add some debuggers to your code and go to town!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; You may have to close and re-open chrome’s debug pane for your app if it doesn’t detect your debugger statement on the first pass. I’m also on the latest version of chrome, and you should be too 😉&lt;/p&gt;
&lt;h2&gt;Parting Thoughts&lt;/h2&gt;
&lt;p&gt;Debugging isn’t always my first-line of defense against weird JavaScript, but I use it a lot more often now that I’ve got a decent workflow for it.&lt;/p&gt;
&lt;p&gt;How do you debug code? Hit me up on &lt;a href=&quot;https://twitter.com/leewarrickjr&quot;&gt;twitter&lt;/a&gt; and let me know!&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[The Ultimate Guide to Starting a Tech Podcast]]></title><description><![CDATA[I started the Tech Jr podcast with my co-host Eddie in April of this year. We haven’t been around for very long, but we’ve had some great…]]></description><link>https://leewarrick.com/blog/all-i-know-about-podcasting/</link><guid isPermaLink="false">https://leewarrick.com/blog/all-i-know-about-podcasting/</guid><pubDate>Sun, 28 Jul 2019 15:30:00 GMT</pubDate><content:encoded>&lt;p&gt;I started the &lt;a href=&quot;https://techjr.dev&quot;&gt;Tech Jr&lt;/a&gt; podcast with my co-host Eddie in April of this year. We haven’t been around for very long, but we’ve had some great success reaching developers in our community and beyond with helpful advice and knowledge.&lt;/p&gt;
&lt;p&gt;I’ve been asked a few times about how to get started with a podcast, what our workflow is, what equipment we use, and generally how we do things for our show. I’ve also asked a lot of those questions myself and done a lot of research along the way to launching Tech Jr, so I figured it was time to boil that down into a blog post.&lt;/p&gt;
&lt;p&gt;I’m going to unload everything I’ve learned about making a podcast, so buckle up.&lt;/p&gt;
&lt;p&gt;Before we start, a hot-take 🔥:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I run into an old friend, and I have no idea what they’ve been up to, I just say, “I love your podcast.” Haven’t been wrong yet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;— &lt;a href=&quot;https://twitter.com/fimoculous/status/1138182748735246337&quot;&gt;@fimoculous&lt;/a&gt; June 10, 2019&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Contents:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#essentials&quot;&gt;Getting Started:&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#option1&quot;&gt;Offload it all&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#option2&quot;&gt;Make your site, offload the rest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#option3&quot;&gt;Do it all yourself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#website&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hosting&quot;&gt;File Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rss&quot;&gt;RSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#analytics&quot;&gt;Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sponsors&quot;&gt;Getting Sponsors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#audio&quot;&gt;Getting Great Audio&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mic&quot;&gt;Picking a Microphone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#software&quot;&gt;Recording and Editing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#voip&quot;&gt;Interviews, Co-hosts, and Voip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zoom&quot;&gt;Zoom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#skype&quot;&gt;Skype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#zencastr&quot;&gt;Zencastr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#local&quot;&gt;Local&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#content&quot;&gt;Producing Great Content&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#topic&quot;&gt;Picking a Topic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#audience&quot;&gt;Consider your Audience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#prep&quot;&gt;Episode Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#organizing&quot;&gt;Staying Organized&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#promote&quot;&gt;Promoting the Show&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#social&quot;&gt;Social Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#email&quot;&gt;Newsletter/Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guestspots&quot;&gt;Interviews/Guest Spots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ask&quot;&gt;Ask your Listeners for Help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#reflections&quot;&gt;Reflections&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#hardwork&quot;&gt;It’s hard work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#patience&quot;&gt;It takes time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#persevere&quot;&gt;Perseverance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#feedback&quot;&gt;Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#credits&quot;&gt;Parting Words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a name=&quot;essentials&quot;&gt;&lt;/a&gt; The Essentials:&lt;/h1&gt;
&lt;p&gt;There’s 3 main things you need to have a podcast:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A place to host your audio files&lt;/li&gt;
&lt;li&gt;An RSS feed&lt;/li&gt;
&lt;li&gt;A website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The website is technically optional, but people will expect you to have one. File hosting and RSS, however, are unavoidable and necessary.&lt;/p&gt;
&lt;h4&gt;A note about the RSS feed:&lt;/h4&gt;
&lt;p&gt;If you want your show to be on itunes, spotify, google play, and beyond, you’re going to need an RSS feed. RSS is just a bunch of xml tags similar to HTML that contains a list of your episodes and information about them like the  title, description, author, and where the audio file lives.&lt;/p&gt;
&lt;p&gt;Itunes and other aggregators will consume this feed and use it to list your latest episodes on their platforms. Some will download your episode and host it themselves, while others will point listeners directly to your hosting solution. More importantly though, &lt;em&gt;other&lt;/em&gt; platforms will scrape itunes and re-list your show on &lt;em&gt;their&lt;/em&gt; platform.&lt;/p&gt;
&lt;p&gt;Basically this is all to say that RSS is incredibly important to your show, so do your research before you pick a solution for it.&lt;/p&gt;
&lt;h2&gt;What are my options for RSS, a website, and file hosting?&lt;/h2&gt;
&lt;p&gt;I like to think there’s 3 ways to tackle this. Which one you choose depends on how much money you want to pay and how much time you have to spend.&lt;/p&gt;
&lt;p&gt;(No judgements from me by the way on whichever you choose. Different strokes and all that.)&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;option1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Option 1: Pay the premium 💵, move on with your life&lt;/h3&gt;
&lt;p&gt;If you’re just looking to get your show on the air and don’t care about the technical details, this is for you. There’s some services out there that will absolutely take care of the whole enchilada for you for a monthly fee and provide an RSS feed, website, and file hosting.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://libsyn.com/&quot;&gt;Libsyn&lt;/a&gt; and &lt;a href=&quot;https://fireside.fm/&quot;&gt;Fireside.fm&lt;/a&gt; are two common solutions in this space.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;option2&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Option 2: build the site yourself, pay for hosting.&lt;/h3&gt;
&lt;p&gt;You can absolutely build your own site and use a service to handle RSS and hosting. &lt;a href=&quot;https://syntax.fm&quot;&gt;Syntax.fm&lt;/a&gt; has a &lt;a href=&quot;https://nextjs.org/&quot;&gt;Nextjs&lt;/a&gt; site and uses libsyn for RSS/hosting for example.&lt;/p&gt;
&lt;p&gt;There’s also &lt;a href=&quot;https://anchor.fm&quot;&gt;anchor.fm&lt;/a&gt; that will handle hosting and provide some other goodies for you.&lt;/p&gt;
&lt;p&gt;This is great if you want a beautiful, custom site but don’t care about diving deep into RSS and file hosting.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;option3&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Option 3: DIY to the max; YOLO baby. 😎&lt;/h3&gt;
&lt;p&gt;Then there’s me. I’m so cheap I’ve been driving the same ‘98 civic coupe since college. It turned 21 this year. We’ve almost hit 200,000 miles together and I’ve saved many thousands of dollars on car payments. Me and that car are like 🤞.&lt;/p&gt;
&lt;p&gt;However, my beautiful, wonderful wife &lt;strong&gt;&lt;em&gt;hates&lt;/em&gt;&lt;/strong&gt; that car. It’s tiny and she’s claustrophobic. The interior is disintegrating to plastic chemical dust in the Florida heat. It has no A/C. Also, the windshield wiper motor no longer obeys the off switch, so when it rains I have to reach under the dash and jiggle the fuse to enable/disable the wipers.&lt;/p&gt;
&lt;p&gt;Basically, I’m willing to suffer a little to save a buck. 🤷‍&lt;/p&gt;
&lt;p&gt;I &lt;strong&gt;host my own audio&lt;/strong&gt;, &lt;strong&gt;built my own site&lt;/strong&gt;, and &lt;strong&gt;create my own RSS feed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It was a lot of work, but it saves me 💸💸💸.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;website&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;DIY Website: Netlify + Gridsome + Markdown&lt;/h4&gt;
&lt;p&gt;I’m a front-end developer, so of course I made my own site. I used &lt;a href=&quot;https://gridsome.org&quot;&gt;Gridsome&lt;/a&gt; to build a static site with markdown files for each episode.&lt;/p&gt;
&lt;p&gt;I host my site for &lt;strong&gt;free&lt;/strong&gt; with &lt;a href=&quot;https://netlify.com&quot;&gt;Netlify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the money saved on monthly website hosting, I splurged the extra two bucks on buying the domain through Netlify as well for free and easy SSL certs (https is important for RSS).&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;hosting&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;DIY File Hosting: Amazon S3&lt;/h4&gt;
&lt;p&gt;Amazon S3 is about the easiest thing you can do with AWS as a non-DevOps expert. This is as simple as creating a bucket for your show and setting it to be publically accessible. When you upload a file, S3 gives you a URL to access it at.&lt;/p&gt;
&lt;p&gt;AWS is great because cloud hosting means your files are being hosted by Amazon, and they’re unlikely to experience an outage. It also means you’re paying for usage, and not a flat monthly fee. I had something like 1800 requests last month to my audio files, and paid a whopping $2.58.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;rss&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;DIY RSS: Gridsome plugins / npm&lt;/h4&gt;
&lt;p&gt;Hmm, what about that pesky RSS feed?&lt;/p&gt;
&lt;p&gt;I used a &lt;a href=&quot;https://gridsome.org/plugins/gridsome-plugin-rss&quot;&gt;plugin&lt;/a&gt; for Gridsome that itself uses an &lt;a href=&quot;https://www.npmjs.com/package/rss&quot;&gt;npm package&lt;/a&gt; for generating the XML for the RSS feed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you’re not into Vue/Gridsome, &lt;a href=&quot;https://gatsby.org&quot;&gt;Gatsby&lt;/a&gt; (uses React) has a similar &lt;a href=&quot;https://www.gatsbyjs.org/docs/adding-an-rss-feed/&quot;&gt;plugin&lt;/a&gt; to get you going. (I built my &lt;a href=&quot;https://leewarrick.com/blog&quot;&gt;blog&lt;/a&gt; with Gatsby and use the RSS plugin to publish to &lt;a href=&quot;https://dev.to/leewarrickjr&quot;&gt;Dev.to&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;With Gridsome, my episode pages are generated from markdown, and at the top of those markdown files is some meta-information you can set using something called &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot;&gt;frontmatter&lt;/a&gt;. This is where I include stuff like my description, file size, file location, episode length, tags, etc. The RSS plugin reads this during the build step and then runs a function to create the XML tags based on this info.&lt;/p&gt;
&lt;p&gt;Itunes is picky about RSS, but you can read about what tags you need &lt;a href=&quot;https://www.feedforall.com/itune-tutorial-tags.htm&quot;&gt;here&lt;/a&gt;, and they have a handy validator which will tell you if your feed is valid when you go to &lt;a href=&quot;https://itunesconnect.apple.com/login?module=PodcastsConnect&quot;&gt;submit it&lt;/a&gt;. Spotify and google will also validate your RSS before you submit, but generally follow the same rules as itunes.&lt;/p&gt;
&lt;p&gt;If you want to check your RSS beforehand, there’s a number of &lt;a href=&quot;https://castfeedvalidator.com/&quot;&gt;helpful&lt;/a&gt; &lt;a href=&quot;https://podba.se/validate/&quot;&gt;sites&lt;/a&gt; for that.&lt;/p&gt;
&lt;p&gt;If you want to see a working example, &lt;a href=&quot;https://techjr.dev&quot;&gt;Tech Jr&lt;/a&gt;’s repo is public and you can see it on &lt;a href=&quot;https://github.com/mynar7/techjr&quot;&gt;Github&lt;/a&gt;. Check out the &lt;code&gt;gridsome.plugin.js&lt;/code&gt; file for RSS goodness.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;analytics&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Analytics&lt;/h3&gt;
&lt;p&gt;If you pay for file hosting through a service like libsyn or anchor, they will usually provide all your analytics in a neat little package with a bow on top.&lt;/p&gt;
&lt;p&gt;If you went my route and host your own files, you’re not totally lost, however.&lt;/p&gt;
&lt;p&gt;AWS offers analytics if you know where to look, and you’ll at least get some usage statistics attached to your monthly bill (that’s how they charge, after all).&lt;/p&gt;
&lt;p&gt;Also, iTunes, Google, and Spotify will all give you analytics through their respective creator dashboards. (How did you think libsyn gets those numbers?)&lt;/p&gt;
&lt;p&gt;Lastly, there’s sites like &lt;a href=&quot;https://chartable.com&quot;&gt;chartable&lt;/a&gt; that will aggregate data from those disparate dashboards into something easier to parse. They even offer a free service to proxy your file downloads through their servers to accurately provide download counts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While having analytics &lt;em&gt;might&lt;/em&gt; help with getting sponsors for your show, I’d argue it’s not really very important in the grand scheme of things. They can be fun to look at, but also something to obsess over or feel bad about if they’re not flattering. Their best use is in determining what your audience likes so you can tailor your content accordingly.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Sponsors&lt;/h3&gt;
&lt;p&gt;This is the dream right? Get paid to make your show!&lt;/p&gt;
&lt;p&gt;Sponsors could potentially offer you money for ad-spots on the show, sometimes on a cost per mille (CPM) basis. This means a certain amount per thousand listeners per ad-spot.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Wait, per &lt;strong&gt;&lt;em&gt;thousand&lt;/em&gt;&lt;/strong&gt; listeners?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yes. The reality is that you’re probably not going to be worrying about sponsors at first, and you may never get sponsored.&lt;/p&gt;
&lt;p&gt;Listen, &lt;em&gt;I like&lt;/em&gt; money, &lt;em&gt;you like&lt;/em&gt; money, and we all gotta eat. But for our show, until it happens, sponsorship cash is a daydream.&lt;/p&gt;
&lt;p&gt;It’s far from free money, by the way. Making ad spots and negotiating with sponsors is also added workload for you, the content creator. And of course, your fans may not appreciate having to listen to ad spots.&lt;/p&gt;
&lt;p&gt;At the end of the day, I make Tech Jr &lt;strong&gt;because I want to&lt;/strong&gt; and it’s important to me. Helping junior devs is a passion, not a business goal. Hey, if I make a buck along the way, great. If I don’t, no sweat. I’m not going to place all my eggs in that basket.&lt;/p&gt;
&lt;p&gt;Honestly, podcasting is a great way to telegraph your passion for your niche and establish yourself as an expert in your space. It is impressive on a portfolio or resume, and you end up building a rapport with a lot of great people through interviews. So while there’s not necessarily cash benefits to podcasting, there’s other value.&lt;/p&gt;
&lt;p&gt;That being said, &lt;a href=&quot;https://counterweightcreative.co/ultimate-guide-why-podcast-sponsorships-waste-your-time/&quot;&gt;there are other ways&lt;/a&gt; to monetize your show. You can set up a paypal page for donations (&lt;a href=&quot;https://paypal.me/leewarrick&quot;&gt;Buy me a coffee?&lt;/a&gt;), start a patreon, or be your own advertiser for a service or product you sell (swag anyone?).&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;audio&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Making the Audio Files&lt;/h2&gt;
&lt;p&gt;Audio quality is incredibly important for your show. You’ve got a few seconds to hook listeners, and if they hear bad audio, you’ve probably lost them. Nobody wants to hear to background noise, dead air, or people talking through the microphone equivalent of a potato 🥔 (I’m looking at you, built-in laptop mic podcasters).&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;mic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Choosing a Microphone&lt;/h3&gt;
&lt;p&gt;It’s easiest to handle audio quality upfront as you record as opposed to afterward in post-production. Using an external microphone will help immensely.&lt;/p&gt;
&lt;p&gt;This could be its own blog post, but basically there’s two main categories of microphones that you’ll likely be looking at: &lt;strong&gt;dynamic&lt;/strong&gt; and &lt;strong&gt;condenser&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here’s the short version: A &lt;strong&gt;condenser&lt;/strong&gt; (Blue yeti, for example) is going to sound very natural, but also pick up &lt;strong&gt;A LOT&lt;/strong&gt; of &lt;strong&gt;background noise&lt;/strong&gt;. A &lt;strong&gt;dynamic&lt;/strong&gt; mic on the other hand (think AM radio, broadcast, reporters, etc), has an adjusted EQ that makes you sound less natural, but also &lt;strong&gt;eliminates most background noise&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;My recommendation is to get a &lt;strong&gt;dynamic mic&lt;/strong&gt; unless you’re recording in a studio environment.&lt;/p&gt;
&lt;p&gt;There’s also a question of using a USB mic or an XLR mic with an external sound card/interface.&lt;/p&gt;
&lt;p&gt;Feel free to splurge on whichever, but I’ve done just fine with a dynamic USB mic.&lt;/p&gt;
&lt;p&gt;As for my personal mic, I spent a long time reading microphone reviews before landing on a &lt;a href=&quot;https://www.amazon.com/Samson-Handheld-Microphone-Recording-Podcasting/dp/B001R747SG/&quot;&gt;Samson Q2U&lt;/a&gt;. (This is almost identical to an &lt;a href=&quot;https://www.amazon.com/Audio-Technica-ATR2100-USB-Cardioid-Dynamic-Microphone/dp/B004QJOZS4&quot;&gt;Audio Technica ATR-2100&lt;/a&gt;, by the way.) As a bonus, it also comes with an XLR port if you ever decide to switch to an interface instead of using USB.&lt;/p&gt;
&lt;p&gt;My co-host Eddie uses a high-end XLR dynamic mic into an external interface. To my ears, we both sound good.&lt;/p&gt;
&lt;h4&gt;Helpful Mic Accessories&lt;/h4&gt;
&lt;p&gt;I’d recommend a windscreen (foam/fur ball that covers the business end) &lt;strong&gt;or&lt;/strong&gt; pop filter (a screen that deflects air away), and some type of shock mount (some rubber bands that protect from vibrations from your desk/mic stand).&lt;/p&gt;
&lt;p&gt;I also got a cheap boom arm that clamps to my desk to hold the mic in a good spot.&lt;/p&gt;
&lt;p&gt;All that stuff helps minimize background noise and reduce pops/clicks and breathing sounds that are hard to edit out later. These can be had for cheap, costing maybe 20-30 bucks total.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;software&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Audio Recording and Editing&lt;/h3&gt;
&lt;p&gt;Unless you’re using &lt;a href=&quot;https://anchor.fm&quot;&gt;anchor.fm&lt;/a&gt;, you’re going to need a way to edit and record your audio.&lt;/p&gt;
&lt;p&gt;Personally, I’m on Windows, and I use &lt;a href=&quot;https://www.audacityteam.org/&quot;&gt;Audacity&lt;/a&gt; for both. It’s free, there’s tons of info/tutorials out there about it, and it works. 🤷‍&lt;/p&gt;
&lt;p&gt;There’s also &lt;a href=&quot;https://www.reaper.fm/&quot;&gt;Reaper&lt;/a&gt;, which is &lt;em&gt;not&lt;/em&gt; free, but has a winrar &lt;a href=&quot;https://forlackofabettercomic.tumblr.com/post/26659890193/i-hope-for-all-of-our-sake-that-this-isnt-the&quot;&gt;price model&lt;/a&gt; and is awesome.&lt;/p&gt;
&lt;p&gt;Other options include Garage band and quicktime on mac, as well as a sleu of other paid DAW (digital audio workstation) programs.&lt;/p&gt;
&lt;p&gt;As far as editing goes, applying a smidge of &lt;a href=&quot;https://www.youtube.com/watch?v=RfHA4OPfoi8&quot;&gt;compression&lt;/a&gt; is nice for evening out your volume, but don’t do too much or you’ll remove all the dynamics from the audio. You’ll &lt;a href=&quot;https://www.youtube.com/watch?v=NP0mQeLWCCo&quot;&gt;Ben Stein&lt;/a&gt; it. (I use this &lt;a href=&quot;https://theaudacitytopodcast.com/chriss-dynamic-compressor-plugin-for-audacity/&quot;&gt;plugin&lt;/a&gt; for audacity.)&lt;/p&gt;
&lt;p&gt;Mainly, you’ll want to silence background noise and cut any dead air (periods of silence) during editing, as well as even out your volume with anyone else’s.&lt;/p&gt;
&lt;p&gt;Or you can pay someone to edit for you. I know another podcaster that has his own &lt;a href=&quot;https://productivityintech.transistor.fm/&quot;&gt;show&lt;/a&gt; and makes money on the side &lt;a href=&quot;https://productivityintech.com/editing&quot;&gt;editing&lt;/a&gt; for others.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;voip&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Interviews, Co-hosts, and Voip&lt;/h3&gt;
&lt;p&gt;If your podcast is just you monologuing, feel free to move on. For the rest of us with co-hosts/interview-based shows:&lt;/p&gt;
&lt;p&gt;You can either do everything on-site in the same studio/location (a blue yeti might shine here, it has settings for capturing a room), or you’re in my boat: you have to record over the internet.&lt;/p&gt;
&lt;p&gt;This is a rough spot in podcasting. There’s not many great free &lt;em&gt;or&lt;/em&gt; paid solutions that can account for internet connection issues and speeds. That being said, here’s some options:&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;zoom&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Zoom&lt;/h4&gt;
&lt;p&gt;Zoom is free if you’ve only got two people on the call, and most folks seem to like using it. However, it &lt;em&gt;was&lt;/em&gt; recently blasted for having a zero day security exploit, but has since been patched.&lt;/p&gt;
&lt;p&gt;With Zoom, if you’re on a call with 3 or more people, you’ll have to pay for a premium account to go beyond 45 minutes, or else the call will drop at that time limit.&lt;/p&gt;
&lt;p&gt;The good news is zoom is able to record your calls and automatically gives you separate audio and video files. (Not separate audio tracks though, and if you talk over each other it will sound wonky)&lt;/p&gt;
&lt;p&gt;Also, if you or anyone else on the call has connection issues, you’ll get some funky audio to edit.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;skype&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Skype&lt;/h4&gt;
&lt;p&gt;Most people have used skype at some point or already have it installed. Skype is free and unlimited as far as call length, and will let you record the call (as long as everyone clicks ok when you start recording).&lt;/p&gt;
&lt;p&gt;Unfortunately, skype exports a single video file, so you’ll have to rip the audio off of that (also on a single track).&lt;/p&gt;
&lt;p&gt;Doubly unfortunate is that most people seem to despise skype and have uninstalled and forgotten about it. So they may ask you to please use something else.&lt;/p&gt;
&lt;p&gt;Of course, if you or anyone else on the call has connection issues, you’ll get some funky audio to edit.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;zencastr&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Zencastr&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://zencastr.com/&quot;&gt;Zencastr&lt;/a&gt; is a browser-based voip recording app.&lt;/p&gt;
&lt;p&gt;Here’s how it works: You set up a session through the website, get a link for all parties to click, and once they do, they’re taken to the web app as well. Once there, zencastr provides voip and records through the browser, gives you separate tracks, and even uploads them to a google drive folder for you.&lt;/p&gt;
&lt;p&gt;When it works, it’s fantastic. When it doesn’t, your episode is toast 🍞.&lt;/p&gt;
&lt;p&gt;They claim to have local backups running, but I’ve still gotten shortened tracks due to spotty connections.&lt;/p&gt;
&lt;p&gt;So, if you or anyone else on the call has connection issues, you’ll &lt;em&gt;still&lt;/em&gt; get some funky audio to edit.&lt;/p&gt;
&lt;p&gt;Luckily we’ve had backups going in those situations, but if you have to do backups anyway…&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;local&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Have everyone record locally&lt;/h4&gt;
&lt;p&gt;This is the most reliable solution we’ve found for our show. We ask our guests to record their own audio and send it to us afterward. Then, we use one of the aforementioned methods as the backup in case the guest makes a mistake recording or just forgets to send their audio.&lt;/p&gt;
&lt;p&gt;Most of our guests have a mic and some recording experience, so we’ve had good luck so far. For the others we use zencastr and 🙏.&lt;/p&gt;
&lt;p&gt;The takeaway here is to just make sure you have a backup plan so you’re not recording an episode twice.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;content&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Producing Great Content&lt;/h2&gt;
&lt;p&gt;This seems obvious, but you should spend some time making sure what you’re saying sounds as good as the audio file it’s played from.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;topic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Pick a Subject you can Talk about at Length&lt;/h3&gt;
&lt;p&gt;If you’re doing a Tech podcast, you’ll probably always have plenty to talk about. In general though, it’s good to pick an evergreen subject so you won’t struggle to come up with episodes.&lt;/p&gt;
&lt;p&gt;If you pick a trendy technology or something with too small of a niche, you may struggle to come up with topics.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;audience&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Consider your Audience&lt;/h3&gt;
&lt;p&gt;Be sure to tailor content to your listeners. For example, Syntax knows they have lots of new developers listening to their show, so they almost always explain the things they talk about in simple terms for their audience.&lt;/p&gt;
&lt;p&gt;In our case, we’re aiming to help early career developers. We try to do the same and provide simple explanations for technical concepts as well as provide career advice geared toward juniors.&lt;/p&gt;
&lt;p&gt;The point here is to produce content your audience wants to hear, and not just talk about the things you want to talk about.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;prep&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Prepare for your Episodes beforehand&lt;/h3&gt;
&lt;p&gt;I can’t stress this one enough.&lt;/p&gt;
&lt;p&gt;I write an outline for every episode that we do on our show.&lt;/p&gt;
&lt;p&gt;It’s usually just bullet points of things I want to touch on or questions I hope to ask, but I’ll also re-order those bullet points to group things logically by topic. This really helps keep the episode focused and on topic.&lt;/p&gt;
&lt;p&gt;An outline also helps eliminate dead air and “um”s or “uh”s when trying to think of what to say next.&lt;/p&gt;
&lt;p&gt;It also helps with interviews. Sometimes your guest may ask for your questions beforehand so they can do their own research and preparation. If you have an outline, you can send that to them prior to the interview.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;organizing&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Staying Organized&lt;/h3&gt;
&lt;p&gt;There’s a lot to keep track of when podcasting. You’ve got keep running lists of episode ideas, edits to make, show notes, guests to schedule, etc. It helps to have a system.&lt;/p&gt;
&lt;p&gt;I use &lt;a href=&quot;https://trello.com&quot;&gt;trello&lt;/a&gt; for organizing our episodes, ideas, and keeping track of potential guests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://calendly.com&quot;&gt;Calendly&lt;/a&gt; is excellent for allowing guests to schedule a time to be interviewed. I also use google calendar for keeping track of what I need to do and when.&lt;/p&gt;
&lt;p&gt;Another tip is to send an email to any potential guests to prepare them for the interview. You can make a draft/template in gmail that covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What you will use to record or what they will need to do to record&lt;/li&gt;
&lt;li&gt;A request to please have a decent quality mic ready&lt;/li&gt;
&lt;li&gt;A reminder to try and find a quiet environment with a good internet connection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you land an interviewee, make a copy of the draft, tailor it for your guest and send it. You’ll save time not having to repeat the same conversation with each guest.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;promote&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Promoting the Show&lt;/h2&gt;
&lt;p&gt;I didn’t realize I would have to promote my own show when I started.&lt;/p&gt;
&lt;p&gt;There’s something incredibly off-putting about trying to pitch and sell your own content to the world, but if you don’t get listeners, what’s the point?&lt;/p&gt;
&lt;p&gt;You might be thinking, &lt;em&gt;“Well, people can subscribe on iTunes and Spotify, and I have an RSS feed, so what else is there to do?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There’s a lot of podcasts out there, and while I wouldn’t say you’re &lt;em&gt;competing&lt;/em&gt; for listeners, your discoverability on those platforms is, well, limited. So it helps to drive listeners to your show through other means.&lt;/p&gt;
&lt;p&gt;I am not an expert at this, but I’ll share what I know regardless.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;social&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Social Media&lt;/h3&gt;
&lt;p&gt;Find out where your audience is, and then go there and &lt;strong&gt;participate in that community&lt;/strong&gt;. When you release a new episode, share it.&lt;/p&gt;
&lt;p&gt;The emphasis is because it’s much easier to convert any existing followers you have than to build an audience from scratch. Also, simply opening a chat channel and dropping a link is unlikely to net you many listeners and may get you banned.&lt;/p&gt;
&lt;p&gt;For Tech, Twitter is huge. Other shows have told me they promote in Facebook groups. I personally post new episodes in slack groups that I am active in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; When you’re sharing, it also helps if you send out a preview snippet a few days before the episode to build excitement. You can upload a clip to &lt;a href=&quot;https://soundcloud.com&quot;&gt;soundcloud&lt;/a&gt; for free and use that in your tweets. The great thing about this is that soundcloud links are playable in a &lt;a href=&quot;https://twitter.com/TechJrPodcast/status/1148408788661260288&quot;&gt;tweet&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;seo&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;SEO&lt;/h3&gt;
&lt;p&gt;Your website should have proper &lt;a href=&quot;https://jsonld.com/&quot;&gt;schema&lt;/a&gt; and &lt;a href=&quot;https://css-tricks.com/essential-meta-tags-social-media/&quot;&gt;metatags&lt;/a&gt; so it’s &lt;a href=&quot;https://search.google.com/structured-data/testing-tool/u/0/&quot;&gt;searchable&lt;/a&gt; and &lt;a href=&quot;https://cards-dev.twitter.com/validator&quot;&gt;shareable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It also helps to have transcripts &lt;a href=&quot;https://ladybug.dev/episode/web-technologies-were-excited-about/&quot;&gt;(Ladybug Devs example)&lt;/a&gt;, show notes &lt;a href=&quot;https://techjr.dev/episodes/2019/travis-neilson-talks-ux-ui-and-the-design-process&quot;&gt;(Tech Jr Example)&lt;/a&gt;, or both to help search engines crawl your site (they can’t crawl audio) and hopefully point users your way when they’re searching.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Transcripts are also a thing you really &lt;em&gt;should&lt;/em&gt; do so that hearing-impaired folks can get access to your content. There’s &lt;a href=&quot;https://trint.com&quot;&gt;ai-powered&lt;/a&gt; &lt;a href=&quot;https://otter.ai/&quot;&gt;services&lt;/a&gt; that can help, or you can hire someone.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;email&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Email and Newsletters&lt;/h3&gt;
&lt;p&gt;I’ve noticed a lot of shows have newsletters, so we started our own as well. (Please &lt;a href=&quot;https://tinyletter.com/leewarrick&quot;&gt;subscribe&lt;/a&gt;!) We use &lt;a href=&quot;https://tinyletter.com&quot;&gt;tinyletter&lt;/a&gt; which is free up to 1,000 subscribers.&lt;/p&gt;
&lt;p&gt;I don’t have a lot to say about the efficacy of email marketing, but I know that RSS is a &lt;strong&gt;passive&lt;/strong&gt; means of notifying your listeners of new episodes, while sending an email with a link is a much more &lt;strong&gt;active&lt;/strong&gt; way of engaging your audience.&lt;/p&gt;
&lt;p&gt;I personally try to also include other useful things aside from our latest show in emails. This could be other shows we’ve had guest spots on or have hosts we’ve interviewed, articles I’ve read that are useful, funny tweets, etc.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;guestspots&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Guest Spots and Interviews&lt;/h3&gt;
&lt;p&gt;Cross-promotion is a valuable tactic in your arsenal. Other show hosts will likely be practiced guests and can provide some excellent content. We love interviewing and being guests on other shows!&lt;/p&gt;
&lt;p&gt;When we interview someone, we add links to that person’s podcast, blog, YouTube channel, etc. This helps our fans discover other great material and also helps promote our guests’s content. When you’re a guest on someone else’s show, you’ll likely get the same treatment!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You might think that netting the biggest fish you can to interview would be your best bet to bootstrap to stardom.&lt;/p&gt;
&lt;p&gt;I’m sad to say this isn’t always the case.&lt;/p&gt;
&lt;p&gt;Successful folks are &lt;em&gt;incredibly&lt;/em&gt; busy, and don’t always remember to promote their own episodes.&lt;/p&gt;
&lt;p&gt;I don’t blame them though! I’m incredibly thankful to our more famous guests for even finding the time to let us interview them.&lt;/p&gt;
&lt;p&gt;What I &lt;em&gt;will&lt;/em&gt; say though, is that our lesser known guests &lt;strong&gt;almost always&lt;/strong&gt; promote our show, sometimes even beyond the episode they were on.&lt;/p&gt;
&lt;p&gt;So interview the little people! They have great stories to tell and your listeners may appreciate being able to relate to guests with less star-power.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;ask&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Ask your Listeners to Help&lt;/h3&gt;
&lt;p&gt;This is another thing I feel weird doing, but I try to ask my listeners to spread the word before and after the show. Something like, &lt;em&gt;“If you want to support the show, like, subscribe and leave us a review”.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If it feels weird to ask for your audience to help promote… get over yourself and do it anyway 🙃. It’s fairly standard practice, and if your listeners made it to the end of an episode, then chances are they enjoyed it enough to help you out and by leaving a review.&lt;/p&gt;
&lt;p&gt;I also occasionally throw out some tweets asking for listeners to spread the word by saying something nice about us.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/pulse/its-nagging-repetition-effective-communication-marton-jojarth/&quot;&gt;Repetition&lt;/a&gt; is key here. So be consistent in asking for reviews, subscribes, etc.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;reflections&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reflections&lt;/h2&gt;
&lt;p&gt;To wrap up, I’d like to add a few personal thoughts and lessons I’ve learned.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;hardwork&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;It’s hard work&lt;/h3&gt;
&lt;p&gt;You might have thought podcasting was a simple thing to get into before reading this post.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“I’ll just record some stuff and put it out there!”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hopefully you realize by now that there’s a lot that goes into making the podcasts that you love to listen to. Even shows that aren’t your favorite took a lot of effort to produce and create.&lt;/p&gt;
&lt;p&gt;I’m really awed by some of the amazing shows out there. After creating Tech Jr, I’ve come to admire all the time and effort podcasters put into their work.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;patience&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;It takes patience&lt;/h3&gt;
&lt;p&gt;I’ve seen shows pop up and instantly become sensations. They get thousands of listeners and sponsor offers overnight, etc.&lt;/p&gt;
&lt;p&gt;The thing is, those shows &lt;em&gt;already had an audience&lt;/em&gt; that they brought to their new podcast.&lt;/p&gt;
&lt;p&gt;It takes years of effort to build a following and establish a presence with credibility. I struggle with being patient, but I try to remind myself that &lt;em&gt;these things take time&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;persevere&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Prepare for the long game&lt;/h3&gt;
&lt;p&gt;Most shows don’t make it very far.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&quot;https://blog.pacific-content.com/podcast-success-a-long-game-fd6522b72752&quot;&gt;Dan Misener&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;12% of podcasts have only published a single episode&lt;/li&gt;
&lt;li&gt;6% haven’t made it past two episodes.&lt;/li&gt;
&lt;li&gt;Half of all podcasts have 14 or fewer episodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The longer you’re at it and the more episodes you make, the higher your chances of success, so don’t give up.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;feedback&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Feedback&lt;/h3&gt;
&lt;p&gt;Podcasting feels a little like shouting into the void of space at times. Most people don’t leave a review or reach out to say whether or not they like the show.&lt;/p&gt;
&lt;p&gt;(To the listeners that &lt;em&gt;do&lt;/em&gt; reach out though, you’re all Rock Stars 🎸 and we love you.)&lt;/p&gt;
&lt;p&gt;We put out about 6 episodes for Tech Jr to little fanfare. It wasn’t until I hosted our monthly meetup that I even realized we had listeners.&lt;/p&gt;
&lt;p&gt;A few people approached me after the event to shake my hand and tell me how much the show means to them.&lt;/p&gt;
&lt;p&gt;It’s a really great feeling to get that feedback, so if you enjoy a podcast, leave them a review, tweet about them, or email them something nice to let them know you appreciate the hard work.&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;credits&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Parting Words&lt;/h2&gt;
&lt;p&gt;If reading this post discouraged you from podcasting, that wasn’t my intention.&lt;/p&gt;
&lt;p&gt;If you’re passionate about it, do it! My aim was to help you succeed by covering all the facets of podcasting you might not have thought about. So I hope this post was helpful and informative. I truly enjoy producing content for Tech Jr, and I hope to be able to continue to do so.&lt;/p&gt;
&lt;p&gt;Many thanks to all the other podcasters out there that offer advice and support for our show. And kudos to those podcasters out there that continue to deliver great content.&lt;/p&gt;
&lt;p&gt;And of course, thank you, reader, for making it through this lengthy post. 👏😎✨&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item><item><title><![CDATA[7 Bad Habits of a Successful Developer]]></title><description><![CDATA[Welcome to my blog!I’m a front-end developer, meetup organizer, podcast host, and I get paid for some of those things.Before we start, I’m…]]></description><link>https://leewarrick.com/blog/bad-habits-successful-dev/</link><guid isPermaLink="false">https://leewarrick.com/blog/bad-habits-successful-dev/</guid><pubDate>Fri, 12 Jul 2019 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Welcome to my blog!&lt;/p&gt;
&lt;p&gt;I’m a front-end &lt;a href=&quot;https://www.linkedin.com/in/lee-warrick&quot;&gt;developer&lt;/a&gt;, meetup &lt;a href=&quot;https://meetup.com/project-code-experience&quot;&gt;organizer&lt;/a&gt;, &lt;a href=&quot;https://techjr.dev&quot;&gt;podcast&lt;/a&gt; host, and I get paid for some of those things.&lt;/p&gt;
&lt;p&gt;Before we start, I’m not saying you have to be or do all those things to be successful. Making software is really my only metric for being successful as a developer. If you code and make things, that’s what matters at the end of the day. Everything else is a bonus in my book.&lt;/p&gt;
&lt;p&gt;That being said, I’d like to talk about some things that I could do better.&lt;/p&gt;
&lt;p&gt;These are my bad habits.&lt;/p&gt;
&lt;h2&gt;1. Eating at my Desk&lt;/h2&gt;
&lt;p&gt;At my first job as a developer, I was part of a new, young team that would take a group walk everyday at lunchtime. We’d hop up from our desks, leave our work behind, and go stretch our legs for about a half hour. We’d discuss some work things, some non-work things, but most importantly we were taking a break and getting a little exercise.&lt;/p&gt;
&lt;p&gt;Now, I work on a team that doesn’t take group walks. They have a habit of going out to eat together, but I bring my lunch and don’t partake. I also am constantly taking a free second here or there to take care of business for my podcast, meetup, or side projects. Lunchtime is a prime target for getting a few extra things done. So what ends up happening is that most days I end up eating at my desk.&lt;/p&gt;
&lt;p&gt;Don’t do this. Take a break, get away from the screen, and go walk around outside for a few minutes.&lt;/p&gt;
&lt;h2&gt;2. Going down rabbit holes&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;
      &lt;a href=&quot;https://leewarrick.com/blog/static/a321c6d327761b0f5e89e8ca5b4a5da7/96f4b/rabbit.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
    &lt;span&gt;&lt;/span&gt;
  &lt;img alt=&quot;Photo of a peaceful Rabbit&quot; title=&quot;Photo of a peaceful Rabbit&quot; src=&quot;https://leewarrick.com/blog/static/a321c6d327761b0f5e89e8ca5b4a5da7/a111b/rabbit.jpg&quot;&gt;
  &lt;/a&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;“Going down a rabbit hole” is what happens when you run into a problem while writing code and start jumping between researching solutions, without actually accomplishing the task.&lt;/p&gt;
&lt;p&gt;For example, you want to build a feature that lets a user upload and crop an image. You go onto stack overflow and read about uploading files, then look into file upload components in Vue, then in React, even though you’re working with Vue, then google tells you HTML5 canvas can help so you start looking at codepens…&lt;/p&gt;
&lt;p&gt;Four hours later, you’ve got 8 potential solutions, 10 new side projects, and have learned of 3 new JavaScript frameworks you want to try. You’ve fallen down the rabbit hole.&lt;/p&gt;
&lt;p&gt;It’s good to explore new technologies, but don’t lose focus on the task at hand. Sometimes you just need to get the thing done, and any working solution is good enough for now.&lt;/p&gt;
&lt;h2&gt;3. Saying “Yes” way too often&lt;/h2&gt;
&lt;p&gt;Sometimes this is a friend or colleague asking me if I’m &lt;em&gt;in&lt;/em&gt; on a potential freelance project, trying out some new tech (more on that later), or some other opportunity. Most of the time it’s saying yes to ideas I pitch to myself.&lt;/p&gt;
&lt;p&gt;There’s so much development work out there in the wild that needs to be done. You might be thinking, &lt;em&gt;man, I can’t even get a job&lt;/em&gt;, but I’m telling you it’s true. Every business, non-profit, club, etc. needs a website, and there’s a whole world of problems waiting to be solved by technology. If you keep at this, you’ll see there’s a deluge of opportunities to code waiting for you.&lt;/p&gt;
&lt;p&gt;The key is knowing what things to say yes to. It feels wrong to say no when opportunity knocks, but sometimes you have to take a hard look at your current workload and availability before committing. Sometimes you need to say no.&lt;/p&gt;
&lt;h2&gt;4. Having too many side projects&lt;/h2&gt;
&lt;p&gt;This plays a little into the previous point. How does the saying go?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“The man that chases two rabbits catches none”&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;I have personal projects, talks I want to do, meetups to plan, podcasts to record, and now a blog to write. That’s just in the realm of development. It’s hard to focus on 10 things at the same time and actually accomplish something.&lt;/p&gt;
&lt;p&gt;We live in a world that glorifies multitasking and an industry that worships work. Don’t feel like you have to do all the things. It’s OK to focus on one thing at a time.&lt;/p&gt;
&lt;h2&gt;5. Spending all my free time on Coding&lt;/h2&gt;
&lt;p&gt;I think a trend is emerging.&lt;/p&gt;
&lt;p&gt;I’m a procrastinator and a little lazy by nature, yet somehow I find myself at my desk coding, researching, and planning non-stop. It’s an insidious habit that crept in on me without notice.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Find a job you love and you’ll never work a day in your life.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The inverse of this is you’ll never &lt;em&gt;stop&lt;/em&gt; working if you let yourself go unchecked. I have to force myself sometimes to get away from my desk and go out outside, read a book, or just do something non-productive for a while.&lt;/p&gt;
&lt;h2&gt;6. Not using productivity tools&lt;/h2&gt;
&lt;p&gt;There’s a world of apps out there to help a person take notes, schedule reminders, and plan projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;USE THOSE TOOLS!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can’t tell you how many forgotten things I could have remembered had I just written it down, planned it, recorded it, set a reminder, or just done anything aside from take a mental note.&lt;/p&gt;
&lt;p&gt;Mental notes are the enemy. Don’t take mental notes. We work in a field that demands attention and focus. I guarantee the first thing your brain will do to that important mental note is discard it as soon as you start coding.&lt;/p&gt;
&lt;h5&gt;Side Note:&lt;/h5&gt;
&lt;p&gt;Don’t go down a rabbit hole of making your own productivity tool. I mean it’s good to code and learn, but sometimes it’s better to just use an existing app and call it a day. I’m &lt;a href=&quot;https://leewarrick.com/Goaler&quot;&gt;guilty&lt;/a&gt; of this.&lt;/p&gt;
&lt;h2&gt;7. Learning too many things&lt;/h2&gt;
&lt;p&gt;There are about forty kajillion &lt;a href=&quot;https://github.com/kamranahmedse/developer-roadmap&quot;&gt;things&lt;/a&gt; to learn in software, and I want to learn them &lt;strong&gt;all&lt;/strong&gt;. I’m curious, I’m motivated, and I need to know exactly how everything I touch works under the hood.&lt;/p&gt;
&lt;p&gt;The problem is mortality. We have a finite amount of time on Earth, and even if we spent all of it learning to code we still wouldn’t know all the things.&lt;/p&gt;
&lt;p&gt;I’m calling it: &lt;strong&gt;You can’t learn it all.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wish to one day have the wisdom to know the things I should focus on and ignore the rest or look them up as I need them.&lt;/p&gt;
&lt;h2&gt;Parting words&lt;/h2&gt;
&lt;p&gt;Remember that you can’t do everything and that you’re a mere mortal. Be kind to yourself and guard against burnout. Lastly, take time now and then to remember how far you’ve come and be proud of that accomplishment.&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;</content:encoded><atom:link rel="self" href="https://leewarrick.com/blog/rss.xml" type="application/rss+xml"/></item></channel></rss>